<android.media.IMediaRouter2Manager: void notifyRoutesAdded(java.util.List)>
<android.media.IMediaRouter2Manager: void notifyRoutesChanged(java.util.List)>
<android.media.IMediaRouter2Manager: void notifyRoutesRemoved(java.util.List)>
<android.os.INetworkManagementService: void startTetheringWithConfiguration(boolean,java.lang.String[])>
<android.os.INetworkManagementService: java.lang.String[] getDnsForwarders()>
<android.os.INetworkManagementService: void addInterfaceToLocalNetwork(java.lang.String,java.util.List)>
<android.os.INetworkManagementService: void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider)>
<android.os.INetworkManagementService: void tetherLimitReached(android.net.ITetheringStatsProvider)>
<android.os.INetworkManagementService: boolean setAcceleratedEnabledByPhone(boolean)>
<android.os.INetworkManagementService: int removeRoutesFromLocalNetwork(java.util.List)>
<android.os.INetworkManagementService: boolean isAcceleratedEnabled(java.lang.String)>
<android.os.INetworkManagementService: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>
<android.os.INetworkManagementService: void destorySocketByUid(int)>
<android.os.INetworkManagementService: void addRoute(int,android.net.RouteInfo)>
<android.os.INetworkManagementService: void stopInterfaceForwarding(java.lang.String,java.lang.String)>
<android.os.INetworkManagementService: boolean setMultiLink(int,android.net.Network,boolean)>
<android.os.INetworkManagementService: boolean bindAppUidToNetwork(int,android.net.Network)>
<android.os.INetworkManagementService: void startInterfaceForwarding(java.lang.String,java.lang.String)>
<android.os.INetworkManagementService: void removeRoute(int,android.net.RouteInfo)>
<android.os.INetworkManagementService: void setGlobalAlert(long)>
<android.os.INetworkManagementService: boolean isAppNetWorkAccelerated()>
<android.os.INetworkManagementService: void setFirewallInterfaceRule(java.lang.String,boolean)>
<android.os.INetworkManagementService: void removeInterfaceFromLocalNetwork(java.lang.String)>
<android.os.INetworkManagementService: boolean switchAppNetWorkAccelerated(boolean,java.lang.String)>
<android.os.INetworkManagementService: android.net.NetworkStats getNetworkStatsTethering(int)>
<android.telephony.ims.aidl.IRcsUcePublishStateCallback: void onPublishStateChanged(int)>
<android.view.IRecentsAnimationController: void hideCurrentInputMethod()>
<android.view.IRecentsAnimationController: void finish(boolean,boolean)>
<com.android.internal.widget.ILockSettings: void setLockNoneCredential(com.android.internal.widget.LockscreenCredential,int,int)>
<android.app.INotificationManager: void disallowAssistantAdjustment(java.lang.String)>
<android.app.INotificationManager: void setPlaySound(java.lang.String,int,boolean)>
<android.app.INotificationManager: void setPlayVibration(java.lang.String,int,boolean)>
<android.app.INotificationManager: void allowAssistantAdjustment(java.lang.String)>
<android.app.INotificationManager: boolean canPlayVibration(java.lang.String,int)>
<android.app.INotificationManager: void enqueueToast(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,int)>
<android.app.INotificationManager: boolean canPlaySound(java.lang.String,int)>
<android.app.INotificationManager: void enqueueTextToast(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,int,android.app.ITransientNotificationCallback)>
<android.location.IGeofenceProvider: void setGeofenceHardware(android.hardware.location.IGeofenceHardware)>
<com.android.internal.appwidget.IAppWidgetService: java.util.List getAppWidgetOfHost(java.lang.String,int)>
<com.android.internal.appwidget.IAppWidgetService: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
<com.android.internal.appwidget.IAppWidgetService: java.util.List getBoundAppWidgets(java.lang.String)>
<android.telephony.ims.aidl.IRcsUceControllerCallback: void onComplete()>
<android.telephony.ims.aidl.IRcsUceControllerCallback: void onError(int,long)>
<android.os.IAdaptiveSmartNetworkService: void asnServiceStart()>
<android.location.ILocationManager: java.lang.String[] getBackgroundThrottlingWhitelist()>
<android.location.ILocationManager: java.util.List getCurrentActive()>
<android.location.ILocationManager: void setAdasGnssLocationEnabledForUser(boolean,int)>
<android.location.ILocationManager: void stopGnssBatch()>
<android.location.ILocationManager: void unregisterLocationListener(android.location.ILocationListener)>
<android.location.ILocationManager: void sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.location.ILocationManager: void removeGnssMeasurementsListener(android.location.IGnssMeasurementsListener)>
<android.location.ILocationManager: android.os.PackageTagsList getIgnoreSettingsAllowlist()>
<android.location.ILocationManager: void addProviderRequestListener(android.location.provider.IProviderRequestListener)>
<android.location.ILocationManager: void removeGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener)>
<android.location.ILocationManager: boolean isLocationEnabledForUser(int)>
<android.location.ILocationManager: int getGnssBatchSize()>
<android.location.ILocationManager: boolean isAdasGnssLocationEnabledForUser(int)>
<android.location.ILocationManager: boolean isAutomotiveGnssSuspended()>
<android.location.ILocationManager: void getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,android.location.IGeocodeListener)>
<android.location.ILocationManager: void registerGnssNmeaCallback(android.location.IGnssNmeaListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void flushGnssBatch()>
<android.location.ILocationManager: void addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: boolean hasProvider(java.lang.String)>
<android.location.ILocationManager: void injectGnssMeasurementCorrections(android.location.GnssMeasurementCorrections)>
<android.location.ILocationManager: boolean isProviderEnabledForUser(java.lang.String,int)>
<android.location.ILocationManager: void setAutomotiveGnssSuspended(boolean)>
<android.location.ILocationManager: boolean isProviderPackage(java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void setTestProviderEnabled(java.lang.String,boolean,java.lang.String,java.lang.String)>
<android.location.ILocationManager: boolean geocoderIsPresent()>
<android.location.ILocationManager: void addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void addTestProvider(java.lang.String,android.location.provider.ProviderProperties,java.util.List,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void requestGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)>
<android.location.ILocationManager: android.location.Location getLastLocation(java.lang.String,android.location.LastLocationRequest,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void setExtraLocationControllerPackageEnabled(boolean)>
<android.location.ILocationManager: java.util.List getGnssAntennaInfos()>
<android.location.ILocationManager: void removeGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener)>
<android.location.ILocationManager: void unregisterLocationPendingIntent(android.app.PendingIntent)>
<android.location.ILocationManager: void removeProviderRequestListener(android.location.provider.IProviderRequestListener)>
<android.location.ILocationManager: void requestPendingIntentFlush(java.lang.String,android.app.PendingIntent,int)>
<android.location.ILocationManager: void unregisterGnssStatusCallback(android.location.IGnssStatusListener)>
<android.location.ILocationManager: java.lang.String getGnssHardwareModelName()>
<android.location.ILocationManager: void unregisterGnssNmeaCallback(android.location.IGnssNmeaListener)>
<android.location.ILocationManager: android.os.ICancellationSignal getCurrentLocation(java.lang.String,android.location.LocationRequest,android.location.ILocationCallback,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void startGnssBatch(long,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: boolean isExtraLocationControllerPackageEnabled()>
<android.location.ILocationManager: void injectLocation(android.location.Location)>
<android.location.ILocationManager: void removeTestProvider(java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: int getGnssYearOfHardware()>
<android.location.ILocationManager: void setTestProviderLocation(java.lang.String,android.location.Location,java.lang.String,java.lang.String)>
<android.location.ILocationManager: java.util.List getProviderPackages(java.lang.String)>
<android.location.ILocationManager: void setExtraLocationControllerPackage(java.lang.String)>
<android.location.ILocationManager: void setLocationEnabledForUser(boolean,int)>
<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
<android.location.ILocationManager: android.location.LocationTime getGnssTimeMillis()>
<android.location.ILocationManager: void registerLocationPendingIntent(java.lang.String,android.location.LocationRequest,android.app.PendingIntent,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void requestListenerFlush(java.lang.String,android.location.ILocationListener,int)>
<android.location.ILocationManager: void registerLocationListener(java.lang.String,android.location.LocationRequest,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: java.util.List getAllProviders()>
<android.location.ILocationManager: java.lang.String getExtraLocationControllerPackage()>
<android.location.ILocationManager: android.location.GnssCapabilities getGnssCapabilities()>
<android.location.ILocationManager: void removeGeofence(android.app.PendingIntent)>
<android.location.ILocationManager: void getFromLocation(double,double,int,android.location.GeocoderParams,android.location.IGeocodeListener)>
<android.location.ILocationManager: android.location.provider.ProviderProperties getProviderProperties(java.lang.String)>
<android.location.ILocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.location.ILocationManager: void addGnssMeasurementsListener(android.location.GnssMeasurementRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String,java.lang.String)>
<android.service.dreams.IDreamService: void attach(android.os.IBinder,boolean,android.os.IRemoteCallback)>
<android.service.dreams.IDreamService: void notifyAodAction(int)>
<com.android.internal.policy.IKeyguardService: void onStartedNotifyFaceunlock(int)>
<com.android.internal.policy.IKeyguardService: void onStartFaceUnlock()>
<android.content.pm.IPackageManager: boolean activitySupportsIntent(android.content.ComponentName,android.content.Intent,java.lang.String)>
<android.content.pm.IPackageManager: java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo,java.lang.String,int)>
<android.content.pm.IPackageManager: boolean setDefaultGallerPackageName(java.lang.String,int)>
<android.content.pm.IPackageManager: void setComponentEnabledSettings(java.util.List,int)>
<android.content.pm.IPackageManager: void forceDexOpt(java.lang.String)>
<android.content.pm.IPackageManager: void reconcileSecondaryDexFiles(java.lang.String)>
<android.content.pm.IPackageManager: java.lang.String getContentCaptureServicePackageName()>
<android.content.pm.IPackageManager: android.content.pm.PackageManager$Property getProperty(java.lang.String,java.lang.String,java.lang.String)>
<android.content.pm.IPackageManager: void dumpProfiles(java.lang.String,boolean)>
<android.content.pm.IPackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)>
<android.content.pm.IPackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>
<android.content.pm.IPackageManager: int getApplicationNotifyScreenOn(java.lang.String,int)>
<android.content.pm.IPackageManager: boolean canPackageQuery(java.lang.String,java.lang.String,int)>
<android.content.pm.IPackageManager: void checkDefaultGaller()>
<android.content.pm.IPackageManager: java.lang.String[] getAppOpPermissionPackages(java.lang.String)>
<android.content.pm.IPackageManager: java.lang.String getDefaultGallerPackageName(int)>
<android.content.pm.IPackageManager: int checkSignatures(java.lang.String,java.lang.String)>
<android.content.pm.IPackageManager: boolean isAppTrustedForPrivacyProtect(java.lang.String,int)>
<android.content.pm.IPackageManager: void setApplicationNotifyScreenOn(java.lang.String,int,int)>
<android.content.pm.IPackageManager: void deletePackageAsOOBE(java.lang.String,int,android.content.pm.IPackageDeleteObserver,int,int)>
<android.content.pm.IPackageManager: java.lang.String getDefaultMusicPackageName(int)>
<android.content.pm.IPackageManager: android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String)>
<android.content.pm.IPackageManager: boolean isOnlyCoreApps()>
<android.content.pm.IPackageManager: boolean setDefaultMusicPackageName(java.lang.String,int)>
<android.content.pm.IPackageManager: void setAppTrustStateForPrivacyProtect(java.lang.String,boolean,int)>
<android.content.pm.IPackageManager: void checkDefaultMusic()>
<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryInstrumentation(java.lang.String,int)>
<android.view.IWindowSession: void setInTouchMode(boolean)>
<android.view.IWindowSession: void setRefreshRate(android.view.SurfaceControl,float,int,int,java.lang.String,java.lang.String)>
<android.view.IWindowSession: int addToDisplayAsUser(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,android.view.InsetsVisibilities,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl[])>
<android.view.IWindowSession: void updateRequestedVisibilities(android.view.IWindow,android.view.InsetsVisibilities)>
<android.view.IWindowSession: int addToDisplayWithoutInputChannel(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,android.view.InsetsState)>
<android.view.IWindowSession: int relayout(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,int,android.window.ClientWindowFrames,android.util.MergedConfiguration,android.view.SurfaceControl,android.view.InsetsState,android.view.InsetsSourceControl[],android.os.Bundle)>
<android.view.IWindowSession: void grantInputChannel(int,android.view.SurfaceControl,android.view.IWindow,android.os.IBinder,int,int,int,android.os.IBinder,java.lang.String,android.view.InputChannel)>
<android.view.IWindowSession: void updateInputChannel(android.os.IBinder,int,android.view.SurfaceControl,int,int,android.graphics.Region)>
<android.view.IWindowSession: void prepareToReplaceWindows(android.os.IBinder,boolean)>
<android.view.IWindowSession: boolean getInTouchMode()>
<android.view.IWindowSession: void updateLayout(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.window.ClientWindowFrames,int,int)>
<android.view.IWindowSession: android.os.IBinder performDrag(android.view.IWindow,int,android.view.SurfaceControl,int,float,float,float,float,android.content.ClipData)>
<android.view.IWindowSession: void remove(android.view.IWindow)>
<android.view.IWindowSession: int addToDisplay(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,android.view.InsetsVisibilities,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl[])>
<android.view.IWindowSession: int updateVisibility(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.util.MergedConfiguration,android.view.SurfaceControl,android.view.InsetsState,android.view.InsetsSourceControl[])>
<android.view.IDisplayWindowInsetsController: void hideInsets(int,boolean)>
<android.view.IDisplayWindowInsetsController: void showInsets(int,boolean)>
<android.view.IDisplayWindowInsetsController: void topFocusedWindowChanged(java.lang.String,android.view.InsetsVisibilities)>
<android.app.IActivityClientController: void onBackPressedOnTaskRoot(android.os.IBinder,android.app.IRequestFinishCallback)>
<android.app.IActivityClientController: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)>
<android.app.IGameManagerService: int[] getAvailableGameModes(java.lang.String)>
<com.android.internal.telecom.IInCallAdapter: void doTranAction(android.os.Bundle)>
<android.companion.virtual.IVirtualDevice: void createVirtualTouchscreen(int,java.lang.String,int,int,android.os.IBinder,android.graphics.Point)>
<android.companion.virtual.IVirtualDevice: void createVirtualMouse(int,java.lang.String,int,int,android.os.IBinder)>
<android.companion.virtual.IVirtualDevice: void createVirtualKeyboard(int,java.lang.String,int,int,android.os.IBinder)>
<android.view.accessibility.IWindowMagnificationConnectionCallback: void onAccessibilityActionPerformed(int)>
<android.view.accessibility.IWindowMagnificationConnectionCallback: void onSourceBoundsChanged(int,android.graphics.Rect)>
<android.view.accessibility.IWindowMagnificationConnectionCallback: void onChangeMagnificationMode(int,int)>
<android.view.accessibility.IWindowMagnificationConnectionCallback: void onMove(int)>
<android.view.accessibility.IWindowMagnificationConnectionCallback: void onPerformScaleAction(int,float)>
<android.view.accessibility.IWindowMagnificationConnectionCallback: void onWindowMagnifierBoundsChanged(int,android.graphics.Rect)>
<android.location.ICountryDetector: void addCountryListener(android.location.ICountryListener)>
<android.location.ICountryDetector: void removeCountryListener(android.location.ICountryListener)>
<android.location.ICountryDetector: android.location.Country detectCountry()>
<android.net.ITetheringStatsProvider: android.net.NetworkStats getTetherStats(int)>
<android.net.ITetheringStatsProvider: void setInterfaceQuota(java.lang.String,long)>
<android.app.trust.ITrustListener: void onTrustChanged(boolean,int,int,java.util.List)>
<android.os.IVoldListener: void onVolumeStateChanged(java.lang.String,int)>
<android.app.ITaskSplitManagerListener: void onTaskSplitManagerConnected(android.app.ITaskSplitManager)>
<android.app.ITaskSplitManagerListener: void onTaskSplitManagerDisconnected()>
<android.os.IUserManager: boolean isDualProfile(int)>
<android.os.IUserManager: boolean isCredentialSharableWithParent(int)>
<android.os.IUserManager: android.content.pm.UserInfo findCurrentGuestUser()>
<android.os.IUserManager: boolean isMediaSharedWithParent(int)>
<android.accounts.IAccountManager: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[],java.lang.String)>
<android.media.projection.IMediaProjectionManager: boolean isValidMediaProjection(android.media.projection.IMediaProjection)>
<android.media.projection.IMediaProjectionManager: void setContentRecordingSession(android.view.ContentRecordingSession,android.media.projection.IMediaProjection)>
<android.app.IWindowToken: void onConfigurationChanged(android.content.res.Configuration,int)>
<android.app.IWindowToken: void onWindowTokenRemoved()>
<android.app.slice.ISliceManager: int checkSlicePermission(android.net.Uri,java.lang.String,java.lang.String,int,int,java.lang.String[])>
<com.android.internal.view.IInputMethod: void initializeInternal(android.os.IBinder,com.android.internal.inputmethod.IInputMethodPrivilegedOperations,int,boolean,int)>
<com.android.internal.view.IInputMethod: void bindInput(android.view.inputmethod.InputBinding)>
<com.android.internal.view.IInputMethod: void initInkWindow()>
<com.android.internal.view.IInputMethod: void onNavButtonFlagsChanged(int)>
<com.android.internal.view.IInputMethod: void startStylusHandwriting(int,android.view.InputChannel,java.util.List)>
<com.android.internal.view.IInputMethod: void onCreateInlineSuggestionsRequest(com.android.internal.view.InlineSuggestionsRequestInfo,com.android.internal.view.IInlineSuggestionsRequestCallback)>
<com.android.internal.view.IInputMethod: void createSession(android.view.InputChannel,com.android.internal.view.IInputSessionCallback)>
<com.android.internal.view.IInputMethod: void canStartStylusHandwriting(int)>
<com.android.internal.view.IInputMethod: void hideSoftInput(android.os.IBinder,int,android.os.ResultReceiver)>
<com.android.internal.view.IInputMethod: void unbindInput()>
<com.android.internal.view.IInputMethod: void finishStylusHandwriting()>
<com.android.internal.view.IInputMethod: void showSoftInput(android.os.IBinder,int,android.os.ResultReceiver)>
<com.android.internal.view.IInputMethod: void changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>
<com.android.internal.view.IInputMethod: void startInput(android.os.IBinder,com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo,boolean,int,android.window.ImeOnBackInvokedDispatcher)>
<com.android.internal.view.IInputMethod: void setSessionEnabled(com.android.internal.view.IInputMethodSession,boolean)>
<android.companion.ICompanionDeviceManager: void dispatchMessage(int,int,byte[])>
<android.hardware.camera2.extension.IPreviewExtenderImpl: void onInit(java.lang.String,android.hardware.camera2.impl.CameraMetadataNative)>
<android.hardware.camera2.extension.IPreviewExtenderImpl: void onDeInit()>
<android.nfc.INfcTag: void setTagUpToDate(long)>
<android.location.provider.ILocationProviderManager: void onSetAllowed(boolean)>
<android.location.provider.ILocationProviderManager: void onSetProperties(android.location.provider.ProviderProperties)>
<android.location.provider.ILocationProviderManager: void onInitialize(boolean,android.location.provider.ProviderProperties,java.lang.String)>
<android.location.provider.ILocationProviderManager: void onReportLocation(android.location.Location)>
<android.location.provider.ILocationProviderManager: void onReportLocations(java.util.List)>
<android.location.provider.ILocationProviderManager: void onFlushComplete()>
<android.media.IRingtonePlayer: void playAsync(android.net.Uri,android.os.UserHandle,boolean,android.media.AudioAttributes)>
<android.nfc.INfcAdapter: boolean enableNdefPush()>
<android.nfc.INfcAdapter: boolean disableNdefPush()>
<android.nfc.INfcAdapter: void invokeBeamInternal(android.nfc.BeamShareData)>
<android.nfc.INfcAdapter: void setP2pModes(int,int)>
<android.nfc.INfcAdapter: boolean isNdefPushEnabled()>
<android.nfc.INfcAdapter: void invokeBeam()>
<android.location.ICountryListener: void onCountryDetected(android.location.Country)>
<android.media.IResourceManagerService: void markClientForPendingRemoval(int,long)>
<android.media.IResourceManagerService: void addResource(int,int,long,android.media.IResourceManagerClient,android.media.MediaResourceParcel[])>
<android.media.IResourceManagerService: void removeResource(int,long,android.media.MediaResourceParcel[])>
<android.media.IResourceManagerService: boolean reclaimResource(int,android.media.MediaResourceParcel[])>
<android.media.IResourceManagerService: void removeClient(int,long)>
<android.hardware.camera2.extension.ISessionProcessorImpl: android.hardware.camera2.extension.CameraSessionConfig initSession(java.lang.String,android.hardware.camera2.extension.OutputSurface,android.hardware.camera2.extension.OutputSurface)>
<android.hardware.camera2.extension.ISessionProcessorImpl: void onCaptureSessionStart(android.hardware.camera2.extension.IRequestProcessorImpl)>
<android.hardware.camera2.extension.ISessionProcessorImpl: void deInitSession()>
<android.hardware.camera2.extension.ISessionProcessorImpl: int startCapture(android.hardware.camera2.extension.ICaptureCallback)>
<com.android.internal.view.IInlineSuggestionsRequestCallback: void onInputMethodShowInputRequested(boolean)>
<com.android.internal.view.IInlineSuggestionsRequestCallback: void onInputMethodStartInput(android.view.autofill.AutofillId)>
<com.android.internal.view.IInlineSuggestionsRequestCallback: void onInputMethodFinishInput()>
<com.android.internal.view.IInlineSuggestionsRequestCallback: void onInlineSuggestionsSessionInvalidated()>
<com.android.internal.view.IInlineSuggestionsRequestCallback: void onInputMethodStartInputView()>
<com.android.internal.view.IInlineSuggestionsRequestCallback: void onInlineSuggestionsRequest(android.view.inputmethod.InlineSuggestionsRequest,com.android.internal.view.IInlineSuggestionsResponseCallback)>
<com.android.internal.view.IInlineSuggestionsRequestCallback: void onInputMethodFinishInputView()>
<com.android.internal.view.IInlineSuggestionsRequestCallback: void onInlineSuggestionsUnsupported()>
<android.app.job.IJobScheduler: int schedule(android.app.job.JobInfo)>
<android.app.job.IJobScheduler: int enqueue(android.app.job.JobInfo,android.app.job.JobWorkItem)>
<android.app.job.IJobScheduler: android.content.pm.ParceledListSlice getAllPendingJobs()>
<android.app.job.IJobScheduler: android.app.job.JobInfo getPendingJob(int)>
<android.app.job.IJobScheduler: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>
<android.app.job.IJobScheduler: void cancel(int)>
<android.security.authorization.IKeystoreAuthorization: void onLockScreenEvent(int,int,byte[],long[])>
<android.view.accessibility.IAccessibilityManager: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo,int)>
<android.view.accessibility.IAccessibilityManager: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)>
<android.view.accessibility.IAccessibilityManager: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)>
<android.view.accessibility.IAccessibilityManager: java.util.List getInstalledAccessibilityServiceList(int)>
<android.media.tv.ITvInputService: void createSession(android.view.InputChannel,android.media.tv.ITvInputSessionCallback,java.lang.String,java.lang.String)>
<android.location.ILocationListener: void onFlushComplete(int)>
<android.location.ILocationListener: void onLocationChanged(java.util.List,android.os.IRemoteCallback)>
<android.location.ILocationListener: void onProviderEnabledChanged(java.lang.String,boolean)>
<com.android.internal.app.IBatteryStats: void noteBluetoothOff(int,int,java.lang.String)>
<com.android.internal.app.IBatteryStats: void noteBluetoothOn(int,int,java.lang.String)>
<com.android.internal.app.IBatteryStats: byte[] getStatistics()>
<com.android.internal.app.IBatteryStats: void notePhoneDataConnectionState(int,boolean,int,int)>
<com.android.internal.app.IBatteryStats: android.os.ParcelFileDescriptor getStatisticsStream(boolean)>
<android.security.keymaster.IKeyAttestationApplicationIdProvider: android.security.keymaster.KeyAttestationApplicationId getKeyAttestationApplicationId(int)>
<android.window.ITaskOrganizer: void addStartingWindow(android.window.StartingWindowInfo,android.os.IBinder)>
<com.android.internal.view.IInputMethodSession: void updateCursor(android.graphics.Rect)>
<com.android.internal.view.IInputMethodSession: void updateExtractedText(int,android.view.inputmethod.ExtractedText)>
<com.android.internal.view.IInputMethodSession: void updateSelection(int,int,int,int,int,int)>
<com.android.internal.view.IInputMethodSession: void viewClicked(boolean)>
<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>
<com.android.internal.view.IInputMethodSession: void updateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo)>
<com.android.internal.view.IInputMethodSession: void removeImeSurface()>
<com.android.internal.view.IInputMethodSession: void finishInput()>
<com.android.internal.view.IInputMethodSession: void finishSession()>
<com.android.internal.view.IInputMethodSession: void invalidateInput(android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int)>
<com.android.internal.view.IInputMethodSession: void appPrivateCommand(java.lang.String,android.os.Bundle)>
<com.android.internal.telephony.ISub: int addSubInfoRecord(java.lang.String,int)>
<com.android.internal.telephony.ISub: int getAllSubInfoCount(java.lang.String,java.lang.String)>
<com.android.internal.telephony.ISub: void setDefaultDataSubIdWithReason(int,int)>
<com.android.internal.telephony.ISub: java.util.List getActiveSubscriptionInfoList(java.lang.String,java.lang.String)>
<com.android.internal.telephony.ISub: int setUiccApplicationsEnabled(boolean,int)>
<com.android.internal.telephony.ISub: int getSimStateForSlotIndex(int)>
<com.android.internal.telephony.ISub: int removeSubInfo(java.lang.String,int)>
<com.android.internal.telephony.ISub: int setSubscriptionProperty(int,java.lang.String,java.lang.String)>
<com.android.internal.telephony.ISub: int getActiveSubInfoCount(java.lang.String,java.lang.String)>
<com.android.internal.telephony.ISub: int clearSubInfo()>
<com.android.internal.telephony.ISub: int[] getSubId(int)>
<com.android.internal.telephony.ISub: boolean setSubscriptionEnabled(boolean,int)>
<android.nfc.IAppCallback: android.nfc.BeamShareData createBeamShareData(byte)>
<android.nfc.IAppCallback: void onNdefPushComplete(byte)>
<com.transsion.foldable.ITranFoldingScreen: int getCompatibleModeDefaultValue(java.lang.String)>
<com.transsion.foldable.ITranFoldingScreen: void removeTaskWhileModeChanged(java.lang.String,int,java.lang.String)>
<com.android.internal.telecom.ITelecomService: android.telecom.PhoneAccountHandle getSimCallManagerForUser(int)>
<com.android.internal.telecom.ITelecomService: boolean isVsimSlot(int)>
<com.android.internal.telecom.ITelecomService: void registerPhoneAccount(android.telecom.PhoneAccount)>
<com.android.internal.telecom.ITelecomService: void addNewIncomingConference(android.telecom.PhoneAccountHandle,android.os.Bundle)>
<com.android.internal.telecom.ITelecomService: void addNewIncomingCall(android.telecom.PhoneAccountHandle,android.os.Bundle)>
<com.android.internal.telecom.ITelecomService: android.content.Intent createManageBlockedNumbersIntent()>
<com.android.internal.telecom.ITelecomService: boolean shouldRingForContact()>
<com.android.internal.telecom.ITelecomService: java.lang.String getPhoneNumberByIms(int)>
<com.android.internal.telecom.ITelecomService: java.lang.String getDefaultDialerPackage()>
<com.android.internal.telecom.ITelecomService: void acceptHandover(android.net.Uri,int,android.telecom.PhoneAccountHandle)>
<com.android.internal.telecom.ITelecomService: android.telecom.PhoneAccountHandle getSimCallManager(int)>
<com.android.internal.telecom.ITelecomService: java.lang.String getSystemDialerPackage()>
<com.android.internal.telecom.ITelecomService: void unregisterPhoneAccount(android.telecom.PhoneAccountHandle)>
<android.content.pm.IPackageManagerNative: void registerPackageChangeObserver(android.content.pm.IPackageChangeObserver)>
<android.content.pm.IPackageManagerNative: java.lang.String[] getAllPackages()>
<android.content.pm.IPackageManagerNative: void unregisterPackageChangeObserver(android.content.pm.IPackageChangeObserver)>
<android.os.storage.IStorageManager: void addUserKeyAuth(int,int,byte[])>
<android.os.storage.IStorageManager: void createUserKey(int,int,boolean)>
<android.os.storage.IStorageManager: void destroyUserKey(int)>
<android.os.storage.IStorageManager: boolean isUserKeyUnlocked(int)>
<android.os.storage.IStorageManager: void fixateNewestUserKeyAuth(int)>
<android.os.storage.IStorageManager: void lockUserKey(int)>
<android.os.storage.IStorageManager: void unlockUserKey(int,int,byte[])>
<android.os.storage.IStorageManager: void clearUserKeyAuth(int,int,byte[])>
<android.app.IUiAutomationConnection: android.graphics.Bitmap takeScreenshot(android.graphics.Rect)>
<android.app.IUiAutomationConnection: android.graphics.Bitmap takeSurfaceControlScreenshot(android.view.SurfaceControl)>
<android.net.lowpan.ILowpanInterfaceListener: void onLinkNetworkAdded(android.net.IpPrefix)>
<android.net.lowpan.ILowpanInterfaceListener: void onLinkAddressRemoved(java.lang.String)>
<android.net.lowpan.ILowpanInterfaceListener: void onStateChanged(java.lang.String)>
<android.net.lowpan.ILowpanInterfaceListener: void onConnectedChanged(boolean)>
<android.net.lowpan.ILowpanInterfaceListener: void onLinkAddressAdded(java.lang.String)>
<android.net.lowpan.ILowpanInterfaceListener: void onLinkNetworkRemoved(android.net.IpPrefix)>
<android.net.lowpan.ILowpanInterfaceListener: void onUpChanged(boolean)>
<android.net.lowpan.ILowpanInterfaceListener: void onEnabledChanged(boolean)>
<android.net.lowpan.ILowpanInterfaceListener: void onRoleChanged(java.lang.String)>
<android.net.lowpan.ILowpanInterfaceListener: void onReceiveFromCommissioner(byte[])>
<android.net.lowpan.ILowpanInterfaceListener: void onLowpanIdentityChanged(android.net.lowpan.LowpanIdentity)>
<android.security.maintenance.IKeystoreMaintenance: int getState(int)>
<android.app.ITaskSplitManager: void startAnimationOnSplitSideTask(int,android.view.MultiTaskRemoteAnimationAdapter)>
<android.app.ITaskSplitManager: int getSplitPrimaryTaskId()>
<android.app.ITaskSplitManager: void tranLauncherTask(int,android.os.Bundle,int,float)>
<android.app.ITaskSplitManager: android.app.ActivityManager$RunningTaskInfo getSplitSecondaryTopTaskInfo()>
<android.app.ITaskSplitManager: void tranStartTasks(int,android.os.Bundle,int,android.os.Bundle,int,float,android.view.RemoteAnimationAdapter)>
<android.app.ITaskSplitManager: void startMultiWinToSplit(boolean,android.window.WindowContainerToken,android.window.WindowContainerToken,android.os.Bundle,android.os.Bundle,boolean,int,float,android.window.IWindowContainerTransactionCallbackWithFinishCB)>
<android.app.ITaskSplitManager: android.app.ActivityManager$RunningTaskInfo getSplitPrimaryTopTaskInfo()>
<android.app.ITaskSplitManager: void exitSplitScreenWithSyncTransaction(int,android.window.WindowContainerTransaction,android.window.IWindowContainerTransactionCallbackSync)>
<android.app.ITaskSplitManager: boolean isSplitActive()>
<android.app.ITaskSplitManager: int getSplitSecondaryTaskId()>
<android.app.ITaskSplitManager: void reverseSplitPosition()>
<android.app.ITaskSplitManager: void applySyncTransactionAck()>
<android.app.ITaskSplitManager: android.window.WindowContainerTransaction exitSplitScreenSync(int)>
<android.app.ITaskSplitManager: void startTaskAnimation(int,android.view.MultiTaskRemoteAnimationAdapter)>
<android.app.ITaskSplitManager: android.view.IRemoteAnimationFinishedCallback startTasksToSplit(boolean,android.window.WindowContainerToken,android.window.WindowContainerToken,android.os.Bundle,android.os.Bundle,boolean,int,float,android.window.IWindowContainerTransactionCallback)>
<com.android.internal.view.IInputContext: void getExtractedText(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.ExtractedTextRequest,int,com.android.internal.infra.AndroidFuture)>
<com.android.internal.view.IInputContext: void setComposingTextWithTextAttribute(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>
<com.android.internal.view.IInputContext: void setComposingRegion(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>
<com.android.internal.view.IInputContext: void setComposingRegionWithTextAttribute(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,android.view.inputmethod.TextAttribute)>
<com.android.internal.view.IInputContext: void commitTextWithTextAttribute(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>
<com.android.internal.view.IInputContext: void setImeConsumesInput(com.android.internal.inputmethod.InputConnectionCommandHeader,boolean)>
<com.android.internal.view.IInputContext: void requestCursorUpdates(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,com.android.internal.infra.AndroidFuture)>
<com.android.internal.view.IInputContext: void getSurroundingText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,int,com.android.internal.infra.AndroidFuture)>
<com.android.internal.view.IInputContext: void performContextMenuAction(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>
<com.android.internal.view.IInputContext: void commitText(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int)>
<com.android.internal.view.IInputContext: void setComposingText(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.CharSequence,int)>
<com.android.internal.view.IInputContext: void getCursorCapsMode(com.android.internal.inputmethod.InputConnectionCommandHeader,int,com.android.internal.infra.AndroidFuture)>
<com.android.internal.view.IInputContext: void getSelectedText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,com.android.internal.infra.AndroidFuture)>
<com.android.internal.view.IInputContext: void getTextAfterCursor(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,com.android.internal.infra.AndroidFuture)>
<com.android.internal.view.IInputContext: void setSelection(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>
<com.android.internal.view.IInputContext: void clearMetaKeyStates(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>
<com.android.internal.view.IInputContext: void commitCompletion(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.CompletionInfo)>
<com.android.internal.view.IInputContext: void endBatchEdit(com.android.internal.inputmethod.InputConnectionCommandHeader)>
<com.android.internal.view.IInputContext: void sendKeyEvent(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.KeyEvent)>
<com.android.internal.view.IInputContext: void deleteSurroundingText(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>
<com.android.internal.view.IInputContext: void getTextBeforeCursor(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,com.android.internal.infra.AndroidFuture)>
<com.android.internal.view.IInputContext: void requestCursorUpdatesWithFilter(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int,int,com.android.internal.infra.AndroidFuture)>
<com.android.internal.view.IInputContext: void beginBatchEdit(com.android.internal.inputmethod.InputConnectionCommandHeader)>
<com.android.internal.view.IInputContext: void commitContent(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.InputContentInfo,int,android.os.Bundle,com.android.internal.infra.AndroidFuture)>
<com.android.internal.view.IInputContext: void commitCorrection(com.android.internal.inputmethod.InputConnectionCommandHeader,android.view.inputmethod.CorrectionInfo)>
<com.android.internal.view.IInputContext: void finishComposingText(com.android.internal.inputmethod.InputConnectionCommandHeader)>
<com.android.internal.view.IInputContext: void performPrivateCommand(com.android.internal.inputmethod.InputConnectionCommandHeader,java.lang.String,android.os.Bundle)>
<com.android.internal.view.IInputContext: void performSpellCheck(com.android.internal.inputmethod.InputConnectionCommandHeader)>
<com.android.internal.view.IInputContext: void deleteSurroundingTextInCodePoints(com.android.internal.inputmethod.InputConnectionCommandHeader,int,int)>
<com.android.internal.view.IInputContext: void performEditorAction(com.android.internal.inputmethod.InputConnectionCommandHeader,int)>
<android.service.wallpaper.IWallpaperService: void detach()>
<android.service.wallpaper.IWallpaperService: void attach(android.service.wallpaper.IWallpaperConnection,android.os.IBinder,int,boolean,int,int,android.graphics.Rect,int)>
<android.speech.IRecognitionService: void triggerModelDownload(android.content.Intent)>
<android.speech.IRecognitionService: void checkRecognitionSupport(android.content.Intent,android.speech.IRecognitionSupportCallback)>
<android.app.cloudsearch.ICloudSearchManager: void search(android.app.cloudsearch.SearchRequest,android.app.cloudsearch.ICloudSearchManagerCallback)>
<android.app.cloudsearch.ICloudSearchManager: void returnResults(android.os.IBinder,java.lang.String,android.app.cloudsearch.SearchResponse)>
<android.window.IDisplayAreaOrganizerController: android.window.DisplayAreaAppearedInfo createMultiWindowTaskDisplayArea(android.window.IDisplayAreaOrganizer,int,int,java.lang.String)>
<android.window.IDisplayAreaOrganizerController: void unregisterImeOrganizer(android.window.IDisplayAreaOrganizer)>
<android.window.IDisplayAreaOrganizerController: android.window.DisplayAreaAppearedInfo createMultiWindowTaskDisplayAreaV3(android.window.IDisplayAreaOrganizer,int,int,java.lang.String,int)>
<android.window.IDisplayAreaOrganizerController: android.content.pm.ParceledListSlice registerImeOrganizer(android.window.IDisplayAreaOrganizer,int,boolean)>
<android.os.IPowerManager: void setTorch(boolean)>
<android.os.IPowerManager: boolean getScreenOnManagerEnable()>
<android.os.IPowerManager: void setWakeLockAppMap(java.lang.String,boolean)>
<android.os.IPowerManager: java.util.List getAcquireableWakeLockApp()>
<android.os.IPowerManager: void setScreenOnManagerEnable(boolean)>
<android.os.IPowerManager: void notifyChangeConnectState(boolean)>
<android.os.IPowerManager: java.util.List getWakeLockPkgs()>
<android.os.IPowerManager: java.util.List getUnacquireableWakeLockApp()>
<android.os.IPowerManager: void isNotifyScreenOn(boolean,long)>
<android.app.ITaskStackListener: void onTaskProfileLocked(android.app.ActivityManager$RunningTaskInfo)>
<android.permission.IPermissionManager: void startOneTimePermissionSession(java.lang.String,int,long,long,int,int)>
<android.permission.IPermissionManager: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String,int)>
<android.permission.IPermissionManager: boolean shouldShowRequestPermissionRationale(java.lang.String,java.lang.String,int)>
<android.permission.IPermissionManager: void grantRuntimePermission(java.lang.String,java.lang.String,int)>
<android.permission.IPermissionManager: void updatePermissionFlags(java.lang.String,java.lang.String,int,int,boolean,int)>
<android.permission.IPermissionManager: int getPermissionFlags(java.lang.String,java.lang.String,int)>
<android.permission.IPermissionManager: void revokeRuntimePermission(java.lang.String,java.lang.String,int,java.lang.String)>
<android.apex.IApexService: android.apex.ApexInfo installAndActivatePackage(java.lang.String)>
<android.os.IInstalld: boolean compileLayouts(java.lang.String,java.lang.String,java.lang.String,int)>
<com.android.internal.app.IVoiceInteractionManagerService: boolean showSessionFromSession(android.os.IBinder,android.os.Bundle,int)>
<com.android.internal.app.IVoiceInteractionManagerService: void showSession(android.os.Bundle,int)>
<com.android.internal.app.IVoiceInteractionManagerService: com.android.internal.app.IVoiceInteractionSoundTriggerSession createSoundTriggerSessionAsOriginator(android.media.permission.Identity,android.os.IBinder)>
<com.android.internal.app.IVoiceInteractionManagerService: int startAssistantActivity(android.os.IBinder,android.content.Intent,java.lang.String,java.lang.String)>
<com.android.internal.app.IVoiceInteractionManagerService: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>
<com.android.internal.app.IVoiceInteractionManagerService: void updateState(android.media.permission.Identity,android.os.PersistableBundle,android.os.SharedMemory,com.android.internal.app.IHotwordRecognitionStatusCallback,int)>
<com.android.internal.app.IVoiceInteractionManagerService: void startListeningFromExternalSource(android.os.ParcelFileDescriptor,android.media.AudioFormat,android.os.PersistableBundle,android.service.voice.IMicrophoneHotwordDetectionVoiceInteractionCallback)>
<com.android.internal.view.IInlineSuggestionsResponseCallback: void onInlineSuggestionsResponse(android.view.autofill.AutofillId,android.view.inputmethod.InlineSuggestionsResponse)>
<android.content.IClipboard: android.content.ClipData getPrimaryClip(java.lang.String,int)>
<android.content.IClipboard: boolean hasClipboardText(java.lang.String,int)>
<android.content.IClipboard: void clearPrimaryClip(java.lang.String,int)>
<android.content.IClipboard: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
<android.content.IClipboard: void setPrimaryClipAsPackage(android.content.ClipData,java.lang.String,int,java.lang.String)>
<android.content.IClipboard: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener,java.lang.String,int)>
<android.content.IClipboard: java.lang.String getPrimaryClipSource(java.lang.String,int)>
<android.content.IClipboard: boolean hasPrimaryClip(java.lang.String,int)>
<android.content.IClipboard: android.content.ClipDescription getPrimaryClipDescription(java.lang.String,int)>
<android.content.IClipboard: void setPrimaryClip(android.content.ClipData,java.lang.String,int)>
<android.companion.virtual.IVirtualDeviceManager: android.companion.virtual.IVirtualDevice createVirtualDevice(android.os.IBinder,java.lang.String,int,android.companion.virtual.VirtualDeviceParams,android.companion.virtual.IVirtualDeviceActivityListener)>
<android.service.cloudsearch.ICloudSearchService: void onSearch(android.app.cloudsearch.SearchRequest)>
<android.service.dreams.IDreamOverlay: void startDream(android.view.WindowManager$LayoutParams,android.service.dreams.IDreamOverlayCallback)>
<android.hardware.fingerprint.IFingerprintService: void setMyClientVisible(java.lang.String,boolean)>
<android.hardware.fingerprint.IFingerprintService: android.hardware.fingerprint.Fingerprint getAddFingerprint(int,java.lang.String,java.lang.String)>
<android.hardware.fingerprint.IFingerprintService: void notifyAppResumeForFp(int,java.lang.String,java.lang.String)>
<android.hardware.fingerprint.IFingerprintService: void onPointerDown(long,int,int,int,float,float)>
<android.hardware.fingerprint.IFingerprintService: boolean checkName(int,java.lang.String,java.lang.String,java.lang.String)>
<android.hardware.fingerprint.IFingerprintService: void onUpdateFocusedApp(java.lang.String,android.content.ComponentName,java.lang.String,android.content.ComponentName)>
<android.hardware.fingerprint.IFingerprintService: void prepareForAuthentication(int,android.os.IBinder,long,int,android.hardware.biometrics.IBiometricSensorReceiver,java.lang.String,long,int,boolean)>
<android.hardware.fingerprint.IFingerprintService: long detectFingerprint(android.os.IBinder,int,android.hardware.fingerprint.IFingerprintServiceReceiver,java.lang.String)>
<android.hardware.fingerprint.IFingerprintService: void notifyActivateFingerprint(boolean)>
<android.hardware.fingerprint.IFingerprintService: boolean isAuthenticating()>
<android.hardware.fingerprint.IFingerprintService: void setAppBiometrics(int,int,java.lang.String,int)>
<android.hardware.fingerprint.IFingerprintService: boolean hasAppPackagename(int,java.lang.String,java.lang.String)>
<android.hardware.fingerprint.IFingerprintService: java.lang.String getAppPackagename(int,int,java.lang.String,java.lang.String)>
<android.hardware.fingerprint.IFingerprintService: void startAppForFp(int,int)>
<android.hardware.fingerprint.IFingerprintService: void onPointerUp(long,int)>
<android.hardware.fingerprint.IFingerprintService: void onUiReady(long,int)>
<android.hardware.fingerprint.IFingerprintService: int getAppUserId(int,int)>
<android.hardware.fingerprint.IFingerprintService: void notifyAppPauseForFp(int,java.lang.String,java.lang.String)>
<android.hardware.fingerprint.IFingerprintService: void setKeyguardClientVisible(java.lang.String,boolean)>
<android.hardware.fingerprint.IFingerprintService: long authenticate(android.os.IBinder,long,int,int,android.hardware.fingerprint.IFingerprintServiceReceiver,java.lang.String,java.lang.String,boolean)>
<android.hardware.biometrics.IBiometricContextListener: void onDozeChanged(boolean)>
<android.telephony.ims.aidl.IImsMmTelListener: void onIncomingCall(com.android.ims.internal.IImsCallSession,android.os.Bundle)>
<com.android.internal.os.IBinaryTransparencyService: java.util.Map getApexInfo()>
<android.hardware.radio.ITuner: void scan(boolean,boolean)>
<android.app.IActivityTaskManager: void startCurrentAppInMultiWindow(boolean,int)>
<android.app.IActivityTaskManager: boolean isIMEShowing()>
<android.app.IActivityTaskManager: void hookActiveMultiWindowEndMove(int,int,android.view.MotionEvent)>
<android.app.IActivityTaskManager: android.graphics.Rect hookGetMultiWindowDefaultRect(int)>
<android.app.IActivityTaskManager: void hookStartActivityResult(int,android.graphics.Rect)>
<android.app.IActivityTaskManager: void setFinishFixedRotationEnterMultiWindowTransactionV3(android.view.SurfaceControl,int,int,int,float)>
<android.app.IActivityTaskManager: java.lang.String getMultiWindowVersion()>
<android.app.IActivityTaskManager: void hookShowBlurLayerFinish()>
<android.app.IActivityTaskManager: void removeAnimationIconLayer(android.view.SurfaceControl)>
<android.app.IActivityTaskManager: void notAllowKeyguardGoingAwayQuickly(boolean)>
<android.app.IActivityTaskManager: void registerTaskSplitListener(android.app.ITaskSplitManagerListener)>
<android.app.IActivityTaskManager: void setMuteStateV4(boolean,int)>
<android.app.IActivityTaskManager: void notifyTaskAnimationResult(int,android.app.ITaskAnimation)>
<android.app.IActivityTaskManager: void boostSceneEnd(int)>
<android.app.IActivityTaskManager: void hookMultiWindowToCloseV3(android.view.IWindow)>
<android.app.IActivityTaskManager: android.app.ActivityManager$RunningTaskInfo getMultiWinTopTask(int,int)>
<android.app.IActivityTaskManager: android.graphics.Rect hookGetMultiWindowDefaultRectByTask(int)>
<android.app.IActivityTaskManager: java.lang.String getMultiDisplayAreaTopPackage()>
<android.app.IActivityTaskManager: void hookActiveMultiWindowMoveStartV3()>
<android.app.IActivityTaskManager: boolean isSplitScreen()>
<android.app.IActivityTaskManager: void hookMultiWindowFlingV3(android.view.IWindow,android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.app.IActivityTaskManager: void setSplitScreenResizing(boolean)>
<android.app.IActivityTaskManager: android.window.TaskSnapshot takeTaskSnapshot(int)>
<android.app.IActivityTaskManager: void unregisterTaskSplitListener(android.app.ITaskSplitManagerListener)>
<android.app.IActivityTaskManager: void hookFinishMovingLocationV3(android.view.IWindow)>
<android.app.IActivityTaskManager: java.lang.String getMulitWindowTopPackage()>
<android.app.IActivityTaskManager: boolean checkMultiWindowFeatureOn()>
<android.app.IActivityTaskManager: java.util.List getTasks(int,boolean,boolean)>
<android.app.IActivityTaskManager: void hookMultiWindowToMinV3(android.view.IWindow)>
<android.app.IActivityTaskManager: boolean isPinnedMode()>
<android.app.IActivityTaskManager: void hookMultiWindowMute(android.view.IWindow)>
<android.app.IActivityTaskManager: void hookExitSplitScreenToMultiWindow(int)>
<android.app.IActivityTaskManager: boolean activityInMultiWindow(java.lang.String)>
<android.app.IActivityTaskManager: void setMultiWindowParams(android.os.Bundle)>
<android.app.IActivityTaskManager: void setFinishFixedRotationWithTransaction(android.view.SurfaceControl,float[],float[],int)>
<android.app.IActivityTaskManager: void hookMultiWindowToSplit(int,int)>
<android.app.IActivityTaskManager: android.view.SurfaceControl getDragAndZoomBgLeash(int,int,int,int,boolean)>
<android.app.IActivityTaskManager: boolean getMuteStateV4(int)>
<android.app.IActivityTaskManager: void setMultiWindowConfigToSystem(java.lang.String,java.util.List)>
<android.app.IActivityTaskManager: android.os.Bundle getMultiWindowParams(java.lang.String)>
<android.app.IActivityTaskManager: void hookMultiWindowToSmallV3(android.view.IWindow)>
<android.app.IActivityTaskManager: void minimizeMultiWinToEdge(int,boolean)>
<android.app.IActivityTaskManager: android.os.IBinder getAppTaskByTaskId(int)>
<android.app.IActivityTaskManager: void setMultiWindowBlackListToSystem(java.util.List)>
<android.app.IActivityTaskManager: void clearFinishFixedRotationWithTransaction()>
<android.app.IActivityTaskManager: void setTranMultiWindowModeV3(int)>
<android.app.IActivityTaskManager: void hookReserveMultiWindowNumber(int,long)>
<android.app.IActivityTaskManager: android.window.BackNavigationInfo startBackNavigation(boolean)>
<android.app.IActivityTaskManager: void hookMultiWindowVisible()>
<android.app.IActivityTaskManager: android.graphics.Rect getMultiWindowContentRegion(int)>
<android.app.IActivityTaskManager: boolean isSecureWindow()>
<android.app.IActivityTaskManager: boolean hasMultiWindow()>
<android.app.IActivityTaskManager: void hookActiveMultiWindowMoveStartV4(int,int)>
<android.app.IActivityTaskManager: boolean isSupportMultiWindow()>
<android.app.IActivityTaskManager: int getTaskOrientation(int)>
<android.app.IActivityTaskManager: void boostSceneEndDelay(int,long)>
<android.app.IActivityTaskManager: boolean isSplitScreenSupportMultiWindowV4(int,android.app.ActivityManager$RunningTaskInfo)>
<android.app.IActivityTaskManager: void moveToBottomForMultiWindowV3(java.lang.String)>
<android.app.IActivityTaskManager: void hookActiveMultiWindowStartToMove(android.os.IBinder,int,int,android.view.MotionEvent,android.graphics.Point)>
<android.app.IActivityTaskManager: void hookStartMultiWindowFromSplitScreenV4(int,android.window.WindowContainerToken,android.graphics.Rect,android.window.IWindowContainerTransactionCallbackSync,int)>
<android.app.IActivityTaskManager: void hookMultiWindowInvisible()>
<android.app.IActivityTaskManager: void hookSetMultiWindowDefaultRectResult(android.graphics.Rect)>
<android.app.IActivityTaskManager: boolean getMuteState()>
<android.app.IActivityTaskManager: void setStartInMultiWindow(java.lang.String,int,int,int)>
<android.app.IActivityTaskManager: void notifyAuthenticateSucceed(boolean)>
<android.app.IActivityTaskManager: void setThreadScheduler(int,int,int)>
<android.app.IActivityTaskManager: void hookMultiWindowToLargeV3(android.view.IWindow)>
<android.app.IActivityTaskManager: android.graphics.Rect getMultiWindowDefaultRect()>
<android.app.IActivityTaskManager: boolean startDreamActivity(android.content.Intent)>
<android.app.IActivityTaskManager: void hookMultiWindowToCloseV4(int,int)>
<android.app.IActivityTaskManager: void setTaskSplitManagerProxy(android.app.ITaskSplitManager)>
<android.app.IActivityTaskManager: android.view.SurfaceControl getDefaultRootLeash()>
<android.app.IActivityTaskManager: void hookMultiWindowMuteAethenV4(int)>
<android.app.IActivityTaskManager: void reparentActivity(int,int,boolean)>
<android.app.IActivityTaskManager: void boostSceneStartDuration(int,long)>
<android.app.IActivityTaskManager: void hookStartMultiWindow(int,android.graphics.Rect,android.window.IWindowContainerTransactionCallback)>
<android.app.IActivityTaskManager: android.view.SurfaceControl getWeltWindowLeash(int,int,int,int,boolean)>
<android.app.IActivityTaskManager: void setConnectBlackListToSystem(java.util.List)>
<android.app.IActivityTaskManager: android.app.ITaskAnimation createTaskAnimation(android.os.IBinder,int,android.view.MultiTaskRemoteAnimationAdapter)>
<android.app.IActivityTaskManager: java.lang.String getMultiDisplayAreaTopPackageV4(int,int)>
<android.app.IActivityTaskManager: android.app.ActivityManager$RunningTaskInfo getTopTask(int)>
<android.app.IActivityTaskManager: boolean taskInMultiWindowById(int)>
<android.app.IActivityTaskManager: java.util.List getMultiWindowBlackList()>
<android.app.IActivityTaskManager: boolean resizeTask(int,android.graphics.Rect,int)>
<android.app.IActivityTaskManager: void updateZBoostTaskIdWhenToSplit(int)>
<android.app.IActivityTaskManager: void notifyKeyguardGoingAwayQuickly(boolean)>
<android.app.IActivityTaskManager: boolean isKeyguardLocking()>
<android.app.IActivityTaskManager: void addAnimationIconLayer(android.view.SurfaceControl)>
<android.app.IActivityTaskManager: void removeWeltWindowLeash(android.view.SurfaceControl)>
<android.app.IActivityTaskManager: void hookMultiWindowToMaxV3(android.view.IWindow)>
<android.app.IActivityTaskManager: void setMuteState(boolean)>
<android.app.IActivityTaskManager: void boostSceneStart(int)>
<android.app.IActivityTaskManager: void hookReparentToDefaultDisplay(int,int)>
<android.app.IActivityTaskManager: android.content.ComponentName getTopActivityComponent()>
<android.app.IActivityTaskManager: java.util.List getMultiWindowTopPackages()>
<android.app.IActivityTaskManager: void setMultiWindowWhiteListToSystem(java.util.List)>
<android.app.IActivityTaskManager: void setMultiWindowAcquireFocus(int,boolean)>
<android.app.IActivityTaskManager: void hookMultiWindowToSmallV4(int,int)>
<android.app.IActivityTaskManager: void hookActiveMultiWindowMove(int,int,android.view.MotionEvent)>
<android.app.IActivityTaskManager: boolean requestAssistDataForTask(android.app.IAssistDataReceiver,int,java.lang.String)>
<android.app.IActivityTaskManager: java.lang.String getFocusedWinPkgName()>
<android.app.IActivityTaskManager: boolean inMultiWindowMode()>
<android.app.IActivityTaskManager: void hookMultiWindowLocation(android.view.IWindow,int,int,int,int)>
<android.app.IActivityTaskManager: void hookStartMultiWindowFromSplitScreen(int,android.window.WindowContainerToken,android.graphics.Rect,android.window.IWindowContainerTransactionCallbackSync)>
<android.window.ITaskOrganizerController: void setCompatibleModeInTask(android.window.WindowContainerToken,int)>
<android.window.ITaskOrganizerController: void setIsIgnoreOrientationRequestDisabled(boolean)>
<android.window.ITaskOrganizerController: java.util.List getVisibleTasks(int)>
<android.window.ITaskOrganizerController: boolean isLeafFocusedRootTask(int)>
<android.window.ITaskOrganizerController: android.app.ActivityManager$RunningTaskInfo getFocusedRootTask(int)>
<android.window.ITaskOrganizerController: android.view.SurfaceControl createRootTaskAnimationLeash(int)>
<android.window.ITaskOrganizerController: void destroyRootTaskAnimationLeash(int)>
<android.window.ITaskOrganizerController: void createRootTask(int,int,android.os.IBinder)>
<android.window.ITaskOrganizerController: void onTaskMoveToFront(android.window.WindowContainerToken)>
<android.app.ILocaleManager: void setApplicationLocales(java.lang.String,int,android.os.LocaleList)>
<android.location.IGeocodeProvider: void getFromLocation(double,double,int,android.location.GeocoderParams,android.location.IGeocodeListener)>
<android.location.IGeocodeProvider: void getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,android.location.IGeocodeListener)>
<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver,int)>
<com.android.internal.view.IInputMethodManager: int getInputMethodWindowVisibleHeight(com.android.internal.view.IInputMethodClient)>
<com.android.internal.view.IInputMethodManager: java.util.List getInputMethodList(int)>
<com.android.internal.view.IInputMethodManager: void startStylusHandwriting(com.android.internal.view.IInputMethodClient)>
<com.android.internal.view.IInputMethodManager: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int)>
<com.android.internal.view.IInputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>
<com.android.internal.view.IInputMethodManager: void showInputMethodPickerFromSystem(com.android.internal.view.IInputMethodClient,int,int)>
<com.android.internal.view.IInputMethodManager: void reportVirtualDisplayGeometryAsync(com.android.internal.view.IInputMethodClient,int,float[])>
<com.android.internal.view.IInputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>
<com.android.internal.view.IInputMethodManager: java.util.List getAwareLockedInputMethodList(int,int)>
<com.android.internal.view.IInputMethodManager: void setConnectSessionId(int)>
<com.android.internal.view.IInputMethodManager: void updateSecurityInputBlackList(java.util.List)>
<com.android.internal.view.IInputMethodManager: void clearClient(com.android.internal.view.IInputMethodClient)>
<com.android.internal.view.IInputMethodManager: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>
<com.android.internal.view.IInputMethodManager: void commitConnectKeyAndText(android.view.KeyEvent,java.lang.String)>
<com.android.internal.view.IInputMethodManager: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver,int)>
<com.android.internal.view.IInputMethodManager: com.android.internal.inputmethod.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,com.android.internal.inputmethod.IRemoteAccessibilityInputConnection,int,android.window.ImeOnBackInvokedDispatcher)>
<com.android.internal.view.IInputMethodManager: java.util.List getEnabledInputMethodSubtypeList(java.lang.String,boolean)>
<com.android.internal.view.IInputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>
<com.android.internal.view.IInputMethodManager: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)>
<android.media.soundtrigger_middleware.ISoundTriggerMiddlewareService: android.media.soundtrigger_middleware.ISoundTriggerModule attachAsMiddleman(int,android.media.permission.Identity,android.media.permission.Identity,android.media.soundtrigger_middleware.ISoundTriggerCallback)>
<android.os.IVibratorManagerService: void vibrate(int,java.lang.String,android.os.CombinedVibration,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>
<com.android.internal.statusbar.IStatusBarService: void hideCurrentInputMethodForBubbles()>
<com.android.internal.statusbar.IStatusBarService: void handleSystemKey(int)>
<com.android.internal.statusbar.IStatusBarService: void showAuthenticationDialog(android.hardware.biometrics.PromptInfo,android.hardware.biometrics.IBiometricSysuiReceiver,int[],boolean,boolean,int,long,java.lang.String,long,int)>
<com.android.internal.statusbar.IStatusBarService: void setUdfpsHbmListener(android.hardware.fingerprint.IUdfpsHbmListener)>
<com.android.internal.statusbar.IStatusBarService: void showInCallUIStatuBar(java.lang.String,long)>
<com.android.internal.statusbar.IStatusBarService: void hideInCallUIStatuBar()>
<com.transsion.powerhub.ITranPowerhubManager: android.os.Bundle getSkipInfo(android.os.Bundle)>
<com.transsion.powerhub.ITranPowerhubManager: void updateCollectData(android.os.Bundle)>
<android.hardware.input.IInputManager: void unRegisterGestureListener(android.hardware.input.IGestureListener)>
<android.hardware.input.IInputManager: java.lang.String getMagellanConfig()>
<android.hardware.input.IInputManager: void registerGestureListener(android.hardware.input.IGestureListener)>
<android.hardware.input.IInputManager: boolean ignoreMultiWindowGesture()>
<android.hardware.input.IInputManager: int getBatteryCapacity(int)>
<android.hardware.input.IInputManager: boolean updateTrackingData(int,android.os.Bundle)>
<android.hardware.input.IInputManager: int getBatteryStatus(int)>
<android.hardware.fingerprint.IUdfpsHbmListener: void onHbmEnabled(int)>
<android.hardware.fingerprint.IUdfpsHbmListener: void onHbmDisabled(int)>
<com.android.internal.telephony.ITelephony: int invokeOemRilRequestRaw(byte[],byte[])>
<com.android.internal.telephony.ITelephony: void setCellInfoListRate(int)>
<com.android.internal.telephony.ITelephony: boolean isUsingNewDataStack()>
<android.hardware.camera2.extension.ICameraExtensionsProxyService: long registerClient()>
<android.hardware.camera2.extension.ICameraExtensionsProxyService: void unregisterClient(long)>
<android.hardware.security.keymint.IRemotelyProvisionedComponent: int getInterfaceVersion()>
<android.hardware.security.keymint.IRemotelyProvisionedComponent: byte[] generateEcdsaP256KeyPair(boolean,android.hardware.security.keymint.MacedPublicKey)>
<android.hardware.security.keymint.IRemotelyProvisionedComponent: android.hardware.security.keymint.RpcHardwareInfo getHardwareInfo()>
<android.hardware.security.keymint.IRemotelyProvisionedComponent: byte[] generateCertificateRequest(boolean,android.hardware.security.keymint.MacedPublicKey[],byte[],byte[],android.hardware.security.keymint.DeviceInfo,android.hardware.security.keymint.ProtectedData)>
<android.hardware.security.keymint.IRemotelyProvisionedComponent: java.lang.String getInterfaceHash()>
<android.telephony.ims.aidl.IPublishResponseCallback: void onNetworkRespHeader(int,java.lang.String,int,java.lang.String)>
<android.telephony.ims.aidl.IPublishResponseCallback: void onNetworkResponse(int,java.lang.String)>
<android.app.timezone.ICallback: void onFinished(int)>
<android.permission.IPermissionController: void revokeSelfPermissionsOnKill(java.lang.String,java.util.List,com.android.internal.infra.AndroidFuture)>
<android.permission.IPermissionController: void notifyOneTimePermissionSessionTimeout(java.lang.String)>
<android.app.IAlarmManager: long currentNetworkTimeMillis()>
<android.app.IAlarmManager: void cancelPoweroffAlarm(java.lang.String)>
<android.window.ITaskFragmentOrganizer: void onTaskFragmentVanished(android.window.TaskFragmentInfo)>
<android.window.ITaskFragmentOrganizer: void onTaskFragmentError(android.os.IBinder,android.os.Bundle)>
<android.window.ITaskFragmentOrganizer: void onTaskFragmentAppeared(android.window.TaskFragmentInfo)>
<android.window.ITaskFragmentOrganizer: void onTaskFragmentParentInfoChanged(android.os.IBinder,android.content.res.Configuration)>
<android.window.ITaskFragmentOrganizer: void onActivityReparentToTask(int,android.content.Intent,android.os.IBinder)>
<android.window.ITaskFragmentOrganizer: void onTaskFragmentInfoChanged(android.window.TaskFragmentInfo)>
<android.content.pm.IPackageChangeObserver: void onPackageChanged(android.content.pm.PackageChangeEvent)>
<android.hardware.input.IGestureListener: void onGesture(int,android.os.Bundle)>
<android.hardware.biometrics.IBiometricSysuiReceiver: void onDialogAnimatedIn()>
<android.companion.ICompanionDeviceService: void onDispatchMessage(int,int,byte[])>
<android.window.IWindowContainerTransactionCallbackWithFinishCB: void onSendFinishCallback(android.view.IRemoteAnimationFinishedCallback)>
<android.window.IWindowContainerTransactionCallbackWithFinishCB: void onTransactionReady(int,android.view.SurfaceControl$Transaction)>
<android.app.cloudsearch.ICloudSearchManagerCallback: void onSearchFailed(android.app.cloudsearch.SearchResponse)>
<android.app.cloudsearch.ICloudSearchManagerCallback: void onSearchSucceeded(android.app.cloudsearch.SearchResponse)>
<android.net.lowpan.ILowpanManagerListener: void onInterfaceAdded(android.net.lowpan.ILowpanInterface)>
<android.net.lowpan.ILowpanManagerListener: void onInterfaceRemoved(android.net.lowpan.ILowpanInterface)>
<android.telephony.ims.aidl.ISubscribeResponseCallback: void onNetworkRespHeader(int,java.lang.String,int,java.lang.String)>
<android.telephony.ims.aidl.ISubscribeResponseCallback: void onNetworkResponse(int,java.lang.String)>
<android.app.IApplicationThread: void enableProcessMainThreadLooperLog()>
<android.app.IApplicationThread: void dumpMemInfo(android.os.ParcelFileDescriptor,android.os.Debug$MemoryInfo,boolean,boolean,boolean,boolean,boolean,java.lang.String[])>
<android.app.IApplicationThread: void scheduleCreateBackupAgent(android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo,int,int,int)>
<android.app.IApplicationThread: void reclaimMemory()>
<android.app.IApplicationThread: void scheduleDestroyBackupAgent(android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo,int)>
<android.app.IApplicationThread: void enableActivityThreadLog(boolean)>
<android.app.IApplicationThread: void scheduleBindService(android.os.IBinder,android.content.Intent,boolean,int)>
<android.app.IApplicationThread: void scheduleReceiver(android.content.Intent,android.content.pm.ActivityInfo,android.content.res.CompatibilityInfo,int,java.lang.String,android.os.Bundle,boolean,int,int)>
<android.app.IApplicationThread: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int,int)>
<android.app.IApplicationThread: void bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,java.lang.String,android.content.pm.ProviderInfoList,android.content.ComponentName,android.app.ProfilerInfo,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,boolean,boolean,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle,java.lang.String,android.content.AutofillOptions,android.content.ContentCaptureOptions,long[],android.os.SharedMemory,long,long)>
<android.app.IApplicationThread: void dumpMessage(boolean)>
<android.location.provider.ILocationProvider: void flush()>
<android.location.provider.ILocationProvider: void sendExtraCommand(java.lang.String,android.os.Bundle)>
<android.location.provider.ILocationProvider: void setLocationProviderManager(android.location.provider.ILocationProviderManager)>
<android.location.provider.ILocationProvider: void setRequest(android.location.provider.ProviderRequest)>
<android.location.IGnssMeasurementsListener: void onStatusChanged(int)>
<android.location.IGnssMeasurementsListener: void onGnssMeasurementsReceived(android.location.GnssMeasurementsEvent)>
<android.os.IDumpstateListener: void onFinished()>
<android.app.timedetector.ITimeDetectorService: void suggestGnssTime(android.app.timedetector.GnssTimeSuggestion)>
<android.app.timedetector.ITimeDetectorService: void suggestNetworkTime(android.app.timedetector.NetworkTimeSuggestion)>
<android.security.identity.ICredential: void setAvailableAuthenticationKeys(int,int)>
<android.hardware.camera2.extension.IAdvancedExtenderImpl: boolean isExtensionAvailable(java.lang.String)>
<android.hardware.camera2.extension.IAdvancedExtenderImpl: void init(java.lang.String)>
<android.net.lowpan.ILowpanInterface: void stopEnergyScan()>
<android.net.lowpan.ILowpanInterface: boolean isUp()>
<android.net.lowpan.ILowpanInterface: void attach(android.net.lowpan.LowpanProvision)>
<android.net.lowpan.ILowpanInterface: void addOnMeshPrefix(android.net.IpPrefix,int)>
<android.net.lowpan.ILowpanInterface: void sendToCommissioner(byte[])>
<android.net.lowpan.ILowpanInterface: void addExternalRoute(android.net.IpPrefix,int)>
<android.net.lowpan.ILowpanInterface: java.lang.String getNcpVersion()>
<android.net.lowpan.ILowpanInterface: java.lang.String getDriverVersion()>
<android.net.lowpan.ILowpanInterface: void startNetScan(java.util.Map,android.net.lowpan.ILowpanNetScanCallback)>
<android.net.lowpan.ILowpanInterface: void addListener(android.net.lowpan.ILowpanInterfaceListener)>
<android.net.lowpan.ILowpanInterface: java.lang.String[] getSupportedNetworkTypes()>
<android.net.lowpan.ILowpanInterface: void beginLowPower()>
<android.net.lowpan.ILowpanInterface: java.lang.String getState()>
<android.net.lowpan.ILowpanInterface: void removeExternalRoute(android.net.IpPrefix)>
<android.net.lowpan.ILowpanInterface: void pollForData()>
<android.net.lowpan.ILowpanInterface: void removeOnMeshPrefix(android.net.IpPrefix)>
<android.net.lowpan.ILowpanInterface: void setEnabled(boolean)>
<android.net.lowpan.ILowpanInterface: void startCommissioningSession(android.net.lowpan.LowpanBeaconInfo)>
<android.net.lowpan.ILowpanInterface: android.net.IpPrefix[] getLinkNetworks()>
<android.net.lowpan.ILowpanInterface: java.lang.String getName()>
<android.net.lowpan.ILowpanInterface: void reset()>
<android.net.lowpan.ILowpanInterface: android.net.lowpan.LowpanChannelInfo[] getSupportedChannels()>
<android.net.lowpan.ILowpanInterface: boolean isEnabled()>
<android.net.lowpan.ILowpanInterface: java.lang.String getPartitionId()>
<android.net.lowpan.ILowpanInterface: boolean isConnected()>
<android.net.lowpan.ILowpanInterface: void closeCommissioningSession()>
<android.net.lowpan.ILowpanInterface: java.lang.String getRole()>
<android.net.lowpan.ILowpanInterface: void startEnergyScan(java.util.Map,android.net.lowpan.ILowpanEnergyScanCallback)>
<android.net.lowpan.ILowpanInterface: byte[] getMacAddress()>
<android.net.lowpan.ILowpanInterface: byte[] getExtendedAddress()>
<android.net.lowpan.ILowpanInterface: java.lang.String[] getLinkAddresses()>
<android.net.lowpan.ILowpanInterface: android.net.lowpan.LowpanCredential getLowpanCredential()>
<android.net.lowpan.ILowpanInterface: android.net.lowpan.LowpanIdentity getLowpanIdentity()>
<android.net.lowpan.ILowpanInterface: void onHostWake()>
<android.net.lowpan.ILowpanInterface: void form(android.net.lowpan.LowpanProvision)>
<android.net.lowpan.ILowpanInterface: void stopNetScan()>
<android.net.lowpan.ILowpanInterface: void join(android.net.lowpan.LowpanProvision)>
<android.net.lowpan.ILowpanInterface: boolean isCommissioned()>
<android.net.lowpan.ILowpanInterface: void leave()>
<android.net.lowpan.ILowpanInterface: void removeListener(android.net.lowpan.ILowpanInterfaceListener)>
<com.android.internal.telephony.IF3aLtr: void onF3a(android.os.Bundle)>
<android.hardware.biometrics.IBiometricAuthenticator: void prepareForAuthentication(boolean,android.os.IBinder,long,int,android.hardware.biometrics.IBiometricSensorReceiver,java.lang.String,long,int,boolean)>
<android.hardware.biometrics.IBiometricService: void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback,int)>
<android.service.dreams.IDreamManager: void notifyAodAction(int)>
<android.location.IGeocodeListener: void onResults(java.lang.String,java.util.List)>
<android.net.lowpan.ILowpanManager: void removeListener(android.net.lowpan.ILowpanManagerListener)>
<android.net.lowpan.ILowpanManager: void addInterface(android.net.lowpan.ILowpanInterface)>
<android.net.lowpan.ILowpanManager: android.net.lowpan.ILowpanInterface getInterface(java.lang.String)>
<android.net.lowpan.ILowpanManager: void addListener(android.net.lowpan.ILowpanManagerListener)>
<android.net.lowpan.ILowpanManager: java.lang.String[] getInterfaceList()>
<android.net.lowpan.ILowpanManager: void removeInterface(android.net.lowpan.ILowpanInterface)>
<android.window.IWindowContainerTransactionCallbackSync: void onTransactionReady(int,android.view.SurfaceControl$Transaction)>
<android.service.voice.IHotwordDetectionService: void updateState(android.os.PersistableBundle,android.os.SharedMemory,android.os.IRemoteCallback)>
<android.service.voice.IHotwordDetectionService: void detectFromMicrophoneSource(android.os.ParcelFileDescriptor,int,android.media.AudioFormat,android.os.PersistableBundle,android.service.voice.IDspHotwordDetectionCallback)>
<android.service.voice.IHotwordDetectionService: void detectFromDspSource(android.hardware.soundtrigger.SoundTrigger$KeyphraseRecognitionEvent,android.media.AudioFormat,long,android.service.voice.IDspHotwordDetectionCallback)>
<android.service.voice.IHotwordDetectionService: void updateContentCaptureManager(android.view.contentcapture.IContentCaptureManager,android.content.ContentCaptureOptions)>
<android.service.voice.IHotwordDetectionService: void stopDetection()>
<android.service.voice.IHotwordDetectionService: void updateAudioFlinger(android.os.IBinder)>
<android.service.voice.IHotwordDetectionService: void ping(android.os.IRemoteCallback)>
<android.service.voice.IMicrophoneHotwordDetectionVoiceInteractionCallback: void onError()>
<com.android.internal.inputmethod.IInputMethodPrivilegedOperations: void hideMySoftInput(int,com.android.internal.infra.AndroidFuture)>
<com.android.internal.inputmethod.IInputMethodPrivilegedOperations: void applyImeVisibilityAsync(android.os.IBinder,boolean)>
<android.os.IIdmap2: void releaseFabricatedOverlayIterator()>
<android.os.IIdmap2: java.util.List nextFabricatedOverlayInfos()>
<android.os.IIdmap2: void acquireFabricatedOverlayIterator()>
<android.media.tv.ITvInputManager: void createSession(android.media.tv.ITvInputClient,java.lang.String,boolean,int,int)>
<android.os.incremental.IIncrementalService: int makeFile(int,java.lang.String,android.os.incremental.IncrementalNewFileParams,byte[])>
<android.media.session.ISession: void setMediaButtonReceiver(android.app.PendingIntent,java.lang.String)>
<android.hardware.display.IDisplayManager: void openDualDisplay()>
<android.hardware.display.IDisplayManager: int getForcedUsingDisplayMode()>
<android.hardware.display.IDisplayManager: void addDualDisplayCompotent(java.lang.String,java.lang.String)>
<android.hardware.display.IDisplayManager: void updateRefreshRateForVideoScene(int,int,int)>
<android.hardware.display.IDisplayManager: boolean isDualDisplayComponent(java.lang.String,java.lang.String)>
<android.hardware.display.IDisplayManager: void setForcedUsingDisplayMode(int)>
<android.hardware.display.IDisplayManager: void closeDualDisplay()>
<android.hardware.display.IDisplayManager: void registerDualCallbackWithEventMask(android.hardware.display.IDisplayManagerCallback,long)>
<android.hardware.display.IDisplayManager: void updateRefreshRateForScene(android.os.Bundle)>
<android.view.IRecentsAnimationRunner: void onAnimationStart(android.view.IRecentsAnimationController,android.view.RemoteAnimationTarget[],android.view.RemoteAnimationTarget[],android.graphics.Rect,android.graphics.Rect)>
<android.window.IWindowOrganizerController: int finishTransition(android.os.IBinder,android.window.WindowContainerTransaction,android.window.IWindowContainerTransactionCallback)>
<android.window.IWindowOrganizerController: android.os.IBinder startTransition(int,android.os.IBinder,android.window.WindowContainerTransaction)>
<android.location.IGnssNmeaListener: void onNmeaReceived(long,java.lang.String)>
<android.location.IGnssAntennaInfoListener: void onGnssAntennaInfoChanged(java.util.List)>
<android.view.accessibility.IWindowMagnificationConnection: void moveWindowMagnifierToPosition(int,float,float,android.view.accessibility.IRemoteMagnificationAnimationCallback)>
<android.view.accessibility.IWindowMagnificationConnection: void disableWindowMagnification(int,android.view.accessibility.IRemoteMagnificationAnimationCallback)>
<android.view.accessibility.IWindowMagnificationConnection: void setConnectionCallback(android.view.accessibility.IWindowMagnificationConnectionCallback)>
<android.view.accessibility.IWindowMagnificationConnection: void showMagnificationButton(int,int)>
<android.view.accessibility.IWindowMagnificationConnection: void setScale(int,float)>
<android.view.accessibility.IWindowMagnificationConnection: void moveWindowMagnifier(int,float,float)>
<android.view.accessibility.IWindowMagnificationConnection: void removeMagnificationButton(int)>
<android.view.accessibility.IWindowMagnificationConnection: void enableWindowMagnification(int,float,float,float,float,float,android.view.accessibility.IRemoteMagnificationAnimationCallback)>
<android.app.IWallpaperManager: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int)>
<android.app.IWallpaperManager: void clearOsWallpaper(java.lang.String,int,int)>
<android.app.IWallpaperManager: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>
<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int)>
<android.telephony.ims.aidl.ICapabilityExchangeEventListener: void onPublishUpdated(int,java.lang.String,int,java.lang.String)>
<android.app.ITaskAnimation: void updateTransformWithTransaction(android.view.SurfaceControl$Transaction,android.os.Bundle)>
<android.app.ITaskAnimation: void finishAnimationForSplitTask(boolean,android.graphics.Rect,android.window.WindowContainerToken,int)>
<android.app.ITaskAnimation: void finishAnimation(boolean,android.graphics.Rect)>
<android.app.ITaskAnimation: void updateTransform(android.os.Bundle)>
<android.app.ITaskAnimation: void initAnimation(int,android.os.Bundle)>
<com.transsion.aipowerlab.ITranAipowerlabManager: void enable(boolean)>
<android.app.timezone.IRulesManager: int requestUninstall(byte[],android.app.timezone.ICallback)>
<android.app.timezone.IRulesManager: android.app.timezone.RulesState getRulesState()>
<android.app.timezone.IRulesManager: int requestInstall(android.os.ParcelFileDescriptor,byte[],android.app.timezone.ICallback)>
<android.app.timezone.IRulesManager: void requestNothing(byte[],boolean)>
<android.hardware.ICameraServiceProxy: boolean isCameraDisabled()>
<android.location.provider.IProviderRequestListener: void onProviderRequestChanged(java.lang.String,android.location.provider.ProviderRequest)>
<android.view.IWindowManager: void updateRotation(boolean,boolean)>
<android.view.IWindowManager: android.content.res.Configuration attachToDisplayContent(android.os.IBinder,int)>
<android.view.IWindowManager: void attachWindowContextToWindowToken(android.os.IBinder,android.os.IBinder)>
<android.view.IWindowManager: void setInTouchMode(boolean)>
<android.view.IWindowManager: boolean useBLAST()>
<android.view.IWindowManager: void detachWindowContextFromWindowContainer(android.os.IBinder)>
<android.view.IWindowManager: void freezeDisplayRotation(int,int)>
<android.view.IWindowManager: android.graphics.Bitmap screenshotScaleWallpaper(float)>
<android.view.IWindowManager: void enableScreenIfNeeded()>
<android.view.IWindowManager: int[] getTranPictureSupportMode()>
<android.view.IWindowManager: int getNavBarPosition(int)>
<android.view.IWindowManager: void reloadPQEConfig()>
<android.view.IWindowManager: void thawDisplayRotation(int)>
<android.view.IWindowManager: void freezeRotation(int)>
<android.view.IWindowManager: java.util.List getPossibleDisplayInfo(int,java.lang.String)>
<android.view.IWindowManager: void setDockedTaskDividerTouchRegion(android.graphics.Rect)>
<android.view.IWindowManager: boolean destroyInputConsumer(java.lang.String,int)>
<android.view.IWindowManager: android.graphics.Bitmap tranScaleScreenshotWallpaperLocked(float)>
<android.view.IWindowManager: void setDisplayWindowRotationController(android.view.IDisplayWindowRotationController)>
<android.view.IWindowManager: android.content.res.Configuration attachWindowContextToDisplayArea(android.os.IBinder,int,int,android.os.Bundle)>
<android.view.IWindowManager: android.graphics.Bitmap tranScreenshotWallpaperLocked()>
<android.view.IWindowManager: void updateDisplayWindowRequestedVisibilities(int,android.view.InsetsVisibilities)>
<android.view.IWindowManager: java.util.List getTranPictureList(int)>
<android.view.IWindowManager: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.view.InsetsState)>
<android.view.IWindowManager: void setTranPictureMode(int,java.lang.String)>
<android.view.IWindowManager: void thawRotation()>
<android.view.IWindowManager: boolean modifyConfigFile(java.lang.String,java.lang.String,int,int,int,int)>
<android.permission.IOnPermissionsChangeListener: void onPermissionsChanged(int)>
<android.hardware.ICameraService: android.hardware.camera2.ICameraDeviceUser connectDevice(android.hardware.camera2.ICameraDeviceCallbacks,java.lang.String,java.lang.String,java.lang.String,int,int,int)>
<android.hardware.ICameraService: android.hardware.ICamera connect(android.hardware.ICameraClient,int,java.lang.String,int,int,int)>
<android.hardware.ICameraService: void setCustomTorchMode(java.lang.String,java.lang.String,android.os.IBinder)>
<android.hardware.ICameraService: android.hardware.CameraInfo getCameraInfo(int)>
<android.hardware.ICameraService: android.hardware.camera2.impl.CameraMetadataNative getCameraCharacteristics(java.lang.String,int)>
<android.app.IActivityManager: void compactAppFullForced(java.lang.String,int)>
<android.app.IActivityManager: boolean setBlockStartEnable(java.lang.String,boolean)>
<android.app.IActivityManager: void startTNE(java.lang.String,long,int,java.lang.String)>
<android.app.IActivityManager: java.util.List resetBlockStartList()>
<android.app.IActivityManager: boolean updateBlockStartList(java.util.List)>
<android.app.IActivityManager: void killApplication(java.lang.String,int,int,java.lang.String)>
<android.app.IActivityManager: boolean inSlmList(java.lang.String,java.lang.String)>
<android.app.IActivityManager: boolean isUxCompactionSupport()>
<android.app.IActivityManager: boolean isFeatureEnable(int)>
<android.app.IActivityManager: boolean setETControl(java.lang.String,boolean)>
<android.app.IActivityManager: void doClean(int,java.util.List)>
<android.app.IActivityManager: void setAalMode(int)>
<android.app.IActivityManager: void switchMemFusion(boolean)>
<android.app.IActivityManager: boolean isETDisabledByPackageName(java.lang.String,java.lang.String)>
<android.app.IActivityManager: boolean isAutoStartEnabled(java.lang.String)>
<android.app.IActivityManager: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>
<android.app.IActivityManager: boolean setAutoStartEnable(java.lang.String,boolean)>
<android.app.IActivityManager: boolean isFocusedAppInFloatWindow()>
<android.app.IActivityManager: void updateWallpaperSchedGroup(boolean)>
<android.app.IActivityManager: java.util.List getCleanProtectList()>
<android.app.IActivityManager: boolean isRequestChangeParams(java.lang.String,java.lang.String)>
<android.app.IActivityManager: int setMemFusionEnable(boolean)>
<android.app.IActivityManager: java.util.List getBlockStartList()>
<android.app.IActivityManager: void switchUXCompaction(boolean)>
<android.app.IActivityManager: java.util.List resetAutoStartList()>
<android.app.IActivityManager: float getLatestTotalCpuPercent()>
<android.app.IActivityManager: void setGiftConfig(java.lang.String)>
<android.app.IActivityManager: boolean isMatchCurMemSelection()>
<android.app.IActivityManager: boolean inFrzList(java.lang.String,java.lang.String)>
<android.app.IActivityManager: void getProviderMimeTypeAsync(android.net.Uri,int,android.os.RemoteCallback)>
<android.app.IActivityManager: int restartUserInBackground(int)>
<android.app.IActivityManager: java.lang.String getProviderMimeType(android.net.Uri,int)>
<android.app.IActivityManager: int getScaledTouchSlop()>
<android.app.IActivityManager: int sendIntentSender(android.content.IIntentSender,android.os.IBinder,int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>
<android.app.IActivityManager: boolean isBlockStartEnabled(java.lang.String)>
<android.app.IActivityManager: void setAalEnabled(boolean)>
<android.app.IActivityManager: void setGiftEnable(boolean)>
<android.app.IActivityManager: java.util.List getSwapFileSizeList()>
<android.app.IActivityManager: int isMemoryEnoughToMF(java.lang.String)>
<android.app.IActivityManager: void enableBinderTracing()>
<android.app.IActivityManager: void doOptimize(int,java.util.List)>
<android.app.IActivityManager: boolean setCleanProtect(java.lang.String,boolean)>
<android.app.IActivityManager: int getMemoryForMF(java.lang.String)>
<android.app.IActivityManager: java.util.List getAutoStartList()>
<android.app.IActivityManager: int bindServiceInstance(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,java.lang.String,int)>
<android.app.IActivityManager: boolean isProcessInPreloadState(java.lang.String)>
<android.app.IActivityManager: boolean isTpTurboApp()>
<android.app.IActivityManager: android.os.Bundle getMultiWindowParams(java.lang.String)>
<android.app.IActivityManager: boolean updateAutoStartList(java.util.List)>
<android.app.IActivityManager: void reportNe(java.lang.String)>
<android.app.IActivityManager: void updateCleanProtectList(java.util.List)>
<android.app.IActivityManager: java.lang.String getTpTurboConfigs()>
<android.app.IActivityManager: void changeCompactionMem(java.lang.String)>
<android.security.IGenerateRkpKeyService: void notifyKeyGenerated(int)>
<android.security.IGenerateRkpKeyService: int generateKey(int)>
<android.os.IVold: void setGCUrgentPace(int,int,float,float,int)>
<android.os.IVold: void fixateNewestUserKeyAuth(int)>
<android.os.IVold: void addUserKeyAuth(int,int,java.lang.String)>
<android.os.IVold: void createUserKey(int,int,boolean)>
<android.os.IVold: void clearUserKeyAuth(int,int,java.lang.String)>
<android.os.IVold: void encryptFstab(java.lang.String,java.lang.String,boolean,java.lang.String)>
<android.os.IVold: void unlockUserKey(int,int,java.lang.String)>
<android.os.IVold: void destroyUserKey(int)>
<android.os.IVold: void mountFstab(java.lang.String,java.lang.String)>
<android.os.IVold: void lockUserKey(int)>
<android.os.IVold: void onUserAdded(int,int)>
<android.window.ITaskFragmentOrganizerController: void registerRemoteAnimations(android.window.ITaskFragmentOrganizer,int,android.view.RemoteAnimationDefinition)>
<android.window.ITaskFragmentOrganizerController: void registerOrganizer(android.window.ITaskFragmentOrganizer)>
<android.window.ITaskFragmentOrganizerController: void unregisterRemoteAnimations(android.window.ITaskFragmentOrganizer,int)>
<android.media.IMediaRouter2: void notifyRoutesChanged(java.util.List)>
<android.media.IMediaRouter2: void notifyRoutesRemoved(java.util.List)>
<android.media.IMediaRouter2: void notifyRoutesAdded(java.util.List)>
<android.os.IDeviceIdleController: int setPreIdleTimeoutMode(int)>
<android.os.IDeviceIdleController: void resetPreIdleTimeoutMode()>
<android.service.voice.IVoiceInteractionSession: void updateVisibleActivityInfo(android.service.voice.VisibleActivityInfo,int)>
<android.location.INetInitiatedListener: boolean sendNiResponse(int,int)>
<android.service.wallpaper.IWallpaperEngine: void scalePreview(android.graphics.Rect)>
<android.companion.virtual.IVirtualDeviceActivityListener: void onTopActivityChanged(int,android.content.ComponentName)>
<android.location.IGnssNavigationMessageListener: void onStatusChanged(int)>
<android.location.IGnssNavigationMessageListener: void onGnssNavigationMessageReceived(android.location.GnssNavigationMessage)>
<android.view.IDisplayWindowRotationController: void onRotateDisplay(int,int,int,android.view.IDisplayWindowRotationCallback)>
<com.android.internal.app.IAppOpsService: android.app.SyncNotedAppOp startProxyOperation(int,android.content.AttributionSource,boolean,boolean,java.lang.String,boolean,boolean,int,int,int)>
<com.android.internal.app.IAppOpsService: void finishProxyOperation(int,android.content.AttributionSource,boolean)>
<android.media.soundtrigger_middleware.ISoundTriggerCallback: void onPhraseRecognition(int,android.media.soundtrigger.PhraseRecognitionEvent,int)>
<android.media.soundtrigger_middleware.ISoundTriggerCallback: void onRecognition(int,android.media.soundtrigger.RecognitionEvent,int)>
<android.content.pm.ICrossProfileApps: boolean canConfigureInteractAcrossProfiles(java.lang.String)>
<android.content.pm.ICrossProfileApps: void setInteractAcrossProfilesAppOp(java.lang.String,int)>
<android.content.pm.ICrossProfileApps: void clearInteractAcrossProfilesAppOps()>
<android.content.pm.ICrossProfileApps: void resetInteractAcrossProfilesAppOps(java.util.List)>
<android.content.pm.ICrossProfileApps: boolean canUserAttemptToConfigureInteractAcrossProfiles(java.lang.String)>
<android.media.projection.IMediaProjection: android.window.WindowContainerToken getTaskRecordingWindowContainerToken()>
<android.media.projection.IMediaProjection: void setTaskRecordingWindowContainerToken(android.window.WindowContainerToken)>
<com.android.internal.app.IHotwordRecognitionStatusCallback: void onError(int)>
<android.hardware.camera2.extension.ICaptureProcessorImpl: void process(java.util.List,android.hardware.camera2.extension.IProcessResultImpl)>
<android.hardware.camera2.extension.ICaptureProcessorImpl: void onResolutionUpdate(android.hardware.camera2.extension.Size)>
<android.view.IRemoteAnimationRunner: void onAnimationCancelled(boolean)>
<android.media.IAudioService: int rescaleCgVolumeIndexToHfpVolumeIndex(int)>
<android.media.IAudioService: void setMicrophoneMuteDeathHandler(boolean,java.lang.String,int,android.os.IBinder)>
<android.media.IAudioService: int getMinVolumeIndexForAttributes(android.media.AudioAttributes)>
<android.media.IAudioService: int getLastHfpScoVolume()>
<android.media.IAudioService: boolean isBluetoothLeCgOn()>
<android.media.IAudioService: java.lang.String getCurrentAudioFocusPackageName()>
<android.media.IAudioService: void registerDeviceVolumeDispatcherForAbsoluteVolume(boolean,android.media.IAudioDeviceVolumeDispatcher,java.lang.String,android.media.AudioDeviceAttributes,java.util.List,boolean)>
<android.media.IAudioService: int getBleCgVolume()>
<android.media.IAudioService: void setVolumeIndexForAttributes(android.media.AudioAttributes,int,int,java.lang.String,java.lang.String)>
<android.media.IAudioService: int getMaxVolumeIndexForAttributes(android.media.AudioAttributes)>
<android.media.IAudioService: java.lang.String getHalVersion()>
<android.media.IAudioService: int getCurrentAudioFocusUid()>
<android.media.IAudioService: int getVolumeIndexForAttributes(android.media.AudioAttributes)>
<android.net.lowpan.ILowpanNetScanCallback: void onNetScanFinished()>
<android.net.lowpan.ILowpanNetScanCallback: void onNetScanBeacon(android.net.lowpan.LowpanBeaconInfo)>
<android.location.IGnssStatusListener: void onFirstFix(int)>
<android.location.IGnssStatusListener: void onGnssStarted()>
<android.location.IGnssStatusListener: void onGnssStopped()>
<android.location.IGnssStatusListener: void onSvStatusChanged(android.location.GnssStatus)>
<android.telephony.ims.aidl.IImsRegistrationCallback: void onDeregistered(android.telephony.ims.ImsReasonInfo)>
<android.hardware.usb.IUsbManager: void setCurrentFunction(java.lang.String,boolean)>
<android.hardware.usb.IUsbManager: void setCurrentFunctions(long)>
<android.net.lowpan.ILowpanEnergyScanCallback: void onEnergyScanFinished()>
<android.net.lowpan.ILowpanEnergyScanCallback: void onEnergyScanResult(int,int)>
<android.app.IUidObserver: void onUidProcAdjChanged(int)>
<android.view.IMultiTaskRemoteAnimationRunner: void onAnimationStart(android.app.ActivityManager$RunningTaskInfo,android.view.SurfaceControl,android.view.IRemoteAnimationFinishedCallback)>
<android.view.IMultiTaskRemoteAnimationRunner: void onAnimationCancelled()>
<com.android.internal.telephony.ITelephonyRegistry: void notifyDataActivity(int)>
<com.android.internal.telephony.ITelephonyRegistry: void notifyPreciseCallState(int,int,int,int,int)>
<com.android.internal.telephony.IPhoneStateListener: void onCallAttributesChanged(android.telephony.CallAttributes)>
<android.media.soundtrigger_middleware.ISoundTriggerModule: void startRecognition(int,android.media.soundtrigger.RecognitionConfig)>
<android.service.euicc.IEuiccService: void getDownloadableSubscriptionMetadata(int,android.telephony.euicc.DownloadableSubscription,boolean,android.service.euicc.IGetDownloadableSubscriptionMetadataCallback)>
<android.view.IDisplayWindowRotationCallback: void continueRotateDisplay(int,android.window.WindowContainerTransaction)>
<android.hardware.camera2.extension.IImageCaptureExtenderImpl: void onInit(java.lang.String,android.hardware.camera2.impl.CameraMetadataNative)>
<android.hardware.camera2.extension.IImageCaptureExtenderImpl: void onDeInit()>
<android.app.admin.IDevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long,boolean)>
<android.app.admin.IDevicePolicyManager: void setRequiredStrongAuthTimeout(android.content.ComponentName,long,boolean)>
<android.app.admin.IDevicePolicyManager: boolean setResetPasswordToken(android.content.ComponentName,byte[])>
<android.app.admin.IDevicePolicyManager: void setLockTaskPackages(android.content.ComponentName,java.lang.String[])>
<android.app.admin.IDevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName,int,boolean)>
<android.app.admin.IDevicePolicyManager: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean,boolean)>
<android.app.admin.IDevicePolicyManager: int getCurrentFailedPasswordAttempts(int,boolean)>
<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getShortSupportMessage(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager: android.os.Bundle getUserRestrictions(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager: int getRequiredPasswordComplexity(boolean)>
<android.app.admin.IDevicePolicyManager: java.util.List getAllCrossProfilePackages()>
<android.app.admin.IDevicePolicyManager: void setAutoTimeEnabled(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager: boolean isResetPasswordTokenActive(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager: void setConfiguredNetworksLockdownState(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager: void clearPackagePersistentPreferredActivities(android.content.ComponentName,java.lang.String)>
<android.app.admin.IDevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabled()>
<android.app.admin.IDevicePolicyManager: void wipeDataWithReason(int,java.lang.String,boolean)>
<android.app.admin.IDevicePolicyManager: java.lang.CharSequence getOrganizationName(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager: void addCrossProfileIntentFilter(android.content.ComponentName,android.content.IntentFilter,int)>
<android.app.admin.IDevicePolicyManager: boolean resetPasswordWithToken(android.content.ComponentName,java.lang.String,byte[],int)>
<android.app.admin.IDevicePolicyManager: android.app.admin.WifiSsidPolicy getWifiSsidPolicy()>
<android.app.admin.IDevicePolicyManager: void installUpdateFromFile(android.content.ComponentName,android.os.ParcelFileDescriptor,android.app.admin.StartInstallingUpdateCallback)>
<android.app.admin.IDevicePolicyManager: void setKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>
<android.app.admin.IDevicePolicyManager: boolean setTime(android.content.ComponentName,long)>
<android.app.admin.IDevicePolicyManager: void setUserRestriction(android.content.ComponentName,java.lang.String,boolean,boolean)>
<android.app.admin.IDevicePolicyManager: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>
<android.app.admin.IDevicePolicyManager: boolean setTimeZone(android.content.ComponentName,java.lang.String)>
<android.app.admin.IDevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long,boolean)>
<android.app.admin.IDevicePolicyManager: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int,boolean)>
<android.app.admin.IDevicePolicyManager: void setScreenCaptureDisabled(android.content.ComponentName,boolean,boolean)>
<android.app.admin.IDevicePolicyManager: void setDefaultSmsApplication(android.content.ComponentName,java.lang.String,boolean)>
<android.app.admin.IDevicePolicyManager: int getLockTaskFeatures(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager: void setWifiSsidPolicy(android.app.admin.WifiSsidPolicy)>
<android.app.admin.IDevicePolicyManager: void setCommonCriteriaModeEnabled(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager: boolean bindDeviceAdminServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
<android.app.admin.IDevicePolicyManager: void setMinimumRequiredWifiSecurityLevel(int)>
<android.app.admin.IDevicePolicyManager: void setUserControlDisabledPackages(android.content.ComponentName,java.util.List)>
<android.app.admin.IDevicePolicyManager: boolean setStatusBarDisabled(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager: void reportFailedPasswordAttempt(int)>
<android.app.admin.IDevicePolicyManager: void setSystemUpdatePolicy(android.content.ComponentName,android.app.admin.SystemUpdatePolicy)>
<android.app.admin.IDevicePolicyManager: void addPersistentPreferredActivity(android.content.ComponentName,android.content.IntentFilter,android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager: void setAutoTimeZoneEnabled(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager: java.util.List getCrossProfileWidgetProviders(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager: boolean isUninstallBlocked(android.content.ComponentName,java.lang.String)>
<android.app.admin.IDevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>
<android.app.admin.IDevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean,boolean)>
<android.app.admin.IDevicePolicyManager: void setDualProfileEnabled(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: void clearCrossProfileIntentFilters(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager: void setFactoryResetProtectionPolicy(android.content.ComponentName,android.app.admin.FactoryResetProtectionPolicy)>
<android.app.admin.IDevicePolicyManager: java.util.List getUserControlDisabledPackages(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List,boolean)>
<android.app.admin.IDevicePolicyManager: void lockNow(int,boolean)>
<android.app.admin.IDevicePolicyManager: void setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle,boolean)>
<android.app.admin.IDevicePolicyManager: void setLockTaskFeatures(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: void setRequiredPasswordComplexity(int,boolean)>
<android.app.admin.IDevicePolicyManager: boolean canAdminGrantSensorsPermissionsForUser(int)>
<android.app.admin.IDevicePolicyManager: boolean isActivePasswordSufficient(int,boolean)>
<android.app.admin.IDevicePolicyManager: java.lang.String getWifiMacAddress(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int,boolean)>
<android.app.admin.IDevicePolicyManager: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>
<android.app.admin.IDevicePolicyManager: void setOrganizationName(android.content.ComponentName,java.lang.CharSequence)>
<android.app.admin.IDevicePolicyManager: boolean getAutoTimeEnabled(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager: void setShortSupportMessage(android.content.ComponentName,java.lang.CharSequence)>
<android.app.admin.IDevicePolicyManager: java.lang.String[] getLockTaskPackages(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager: boolean isUsbDataSignalingEnabledForUser(int)>
<android.app.admin.IDevicePolicyManager: boolean removeCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>
<android.app.admin.IDevicePolicyManager: boolean getAutoTimeZoneEnabled(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager: int getUserProvisioningState()>
<android.app.admin.IDevicePolicyManager: boolean clearResetPasswordToken(android.content.ComponentName)>
<android.app.admin.IDevicePolicyManager: java.util.List getPermittedInputMethods(android.content.ComponentName,boolean)>
<android.media.IMediaRouterService: android.media.RoutingSessionInfo getSystemSessionInfoForPackage(android.media.IMediaRouter2Manager,java.lang.String)>
<android.media.IMediaRouterService: void enforceMediaContentControlPermission()>
<android.hardware.face.IFaceService: void prepareForAuthentication(int,boolean,android.os.IBinder,long,int,android.hardware.biometrics.IBiometricSensorReceiver,java.lang.String,long,int,boolean)>
<android.hardware.face.IFaceService: long authenticate(android.os.IBinder,long,int,android.hardware.face.IFaceServiceReceiver,java.lang.String,boolean)>
<android.hardware.face.IFaceService: long detectFace(android.os.IBinder,int,android.hardware.face.IFaceServiceReceiver,java.lang.String)>
<android.window.IOnBackInvokedCallback: void onBackStarted()>
<android.window.IOnBackInvokedCallback: void onBackProgressed(android.window.BackEvent)>
<com.android.internal.app.ISoundTriggerService: com.android.internal.app.ISoundTriggerSession attachAsOriginator(android.media.permission.Identity,android.os.IBinder)>
<com.android.internal.app.ISoundTriggerService: com.android.internal.app.ISoundTriggerSession attachAsMiddleman(android.media.permission.Identity,android.media.permission.Identity,android.os.IBinder)>
<com.android.internal.app.ISoundTriggerSession: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig,boolean)>
<android.os.IDumpstate: void startBugreport(int,java.lang.String,java.io.FileDescriptor,java.io.FileDescriptor,int,android.os.IDumpstateListener,boolean)>
<com.android.internal.view.IInputSessionCallback: void sessionCreated(com.android.internal.view.IInputMethodSession)>
<android.hardware.soundtrigger.IRecognitionStatusCallback: void onError(int)>
<com.android.internal.view.IInputMethodClient: void onUnbindMethod(int,int)>
<com.android.internal.view.IInputMethodClient: void onUnbindAccessibilityService(int,int)>
<com.android.internal.view.IInputMethodClient: void updateVirtualDisplayToScreenMatrix(int,float[])>
<com.android.internal.view.IInputMethodClient: void onBindAccessibilityService(com.android.internal.inputmethod.InputBindResult,int)>
<com.android.internal.view.IInputMethodClient: void scheduleStartInputIfNecessary(boolean)>
<com.android.internal.view.IInputMethodClient: void setActive(boolean,boolean,boolean)>
<com.android.internal.view.IInputMethodClient: void setImeTraceEnabled(boolean)>
<com.android.internal.view.IInputMethodClient: void throwExceptionFromSystem(java.lang.String)>
<com.android.internal.view.IInputMethodClient: void onBindMethod(com.android.internal.inputmethod.InputBindResult)>
<com.android.internal.view.IInputMethodClient: void reportFullscreenMode(boolean)>
<android.location.ILocationCallback: void onLocation(android.location.Location)>
<android.view.IWindow: void resized(android.window.ClientWindowFrames,boolean,android.util.MergedConfiguration,android.view.InsetsState,boolean,boolean,int,int,int)>
<android.view.IWindow: void dispatchCaptionViewStatus(boolean,int)>
<android.view.IWindow: void showInsets(int,boolean)>
<android.view.IWindow: void hideInsets(int,boolean)>
<android.content.IContentProvider: java.lang.String getType(android.net.Uri)>
<android.content.IContentProvider: void getTypeAsync(android.net.Uri,android.os.RemoteCallback)>
<android.content.IContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<com.android.internal.statusbar.IStatusBar: void handleWindowManagerLoggingCommand(java.lang.String[],android.os.ParcelFileDescriptor)>
<com.android.internal.statusbar.IStatusBar: void hideInCallUIStatuBar()>
<com.android.internal.statusbar.IStatusBar: void requestWindowMagnificationConnection(boolean)>
<com.android.internal.statusbar.IStatusBar: void showTransient(int,int[],boolean)>
<com.android.internal.statusbar.IStatusBar: void requestAddTile(android.content.ComponentName,java.lang.CharSequence,java.lang.CharSequence,android.graphics.drawable.Icon,com.android.internal.statusbar.IAddTileResultCallback)>
<com.android.internal.statusbar.IStatusBar: void showAuthenticationDialog(android.hardware.biometrics.PromptInfo,android.hardware.biometrics.IBiometricSysuiReceiver,int[],boolean,boolean,int,long,java.lang.String,long,int)>
<com.android.internal.statusbar.IStatusBar: void setUdfpsHbmListener(android.hardware.fingerprint.IUdfpsHbmListener)>
<com.android.internal.statusbar.IStatusBar: void abortTransient(int,int[])>
<com.android.internal.statusbar.IStatusBar: void showInCallUIStatuBar(java.lang.String,long)>
<com.android.internal.statusbar.IStatusBar: void handleSystemKey(int)>
<com.android.internal.statusbar.IStatusBar: void onSystemBarAttributesChanged(int,int,com.android.internal.view.AppearanceRegion[],boolean,int,android.view.InsetsVisibilities,java.lang.String)>