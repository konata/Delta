<android.hardware.usb.IUsbManager: int semGetPowerRoleStatus()>
<android.hardware.usb.IUsbManager: void semSetDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>
<android.hardware.usb.IUsbManager: int restrictUsbHostInterface(boolean,java.lang.String)>
<android.hardware.usb.IUsbManager: boolean isSupportDexRestrict()>
<android.hardware.usb.IUsbManager: int semGetDataRoleStatus()>
<android.hardware.usb.IUsbManager: void semGrantDevicePermission(android.hardware.usb.UsbDevice,int)>
<android.hardware.usb.IUsbManager: void semSetMode(int)>
<android.hardware.usb.IUsbManager: boolean isUsbBlocked()>
<android.hardware.usb.IUsbManager: void setUsbHiddenMenuState(boolean)>
<android.app.INotificationPlayerOnCompletionListener: void onCompletion()>
<android.location.provider.ILocationProviderManager: void onFlushComplete()>
<android.location.provider.ILocationProviderManager: void onReportLocations(java.util.List)>
<android.location.provider.ILocationProviderManager: void onSetProperties(android.location.provider.ProviderProperties)>
<android.location.provider.ILocationProviderManager: void onReportLocation(android.location.Location)>
<android.location.provider.ILocationProviderManager: void onSetAllowed(boolean)>
<android.location.provider.ILocationProviderManager: void onInitialize(boolean,android.location.provider.ProviderProperties,java.lang.String)>
<com.samsung.android.content.clipboard.IOnUserChangedListener: void onUserChanged(int)>
<android.content.om.ISamsungOverlayCallback: void onOverlayStateChanged(java.lang.String,java.lang.String,int)>
<android.content.ISyncCallBack: void deletePersonaData(int)>
<android.content.ISyncCallBack: void doSync(java.lang.String,int)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void onAutoCurrentLimitStateChangedWithBrightness(boolean)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void setDouAppModeEnable(boolean)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void setBlfEnableTimeBySchedule(boolean,int)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void onAutoCurrentLimitOffMode(boolean)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void onDetailVeiwStateChanged(boolean)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void setEyeComfortWeightingFactor(float)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void setMdnieScenarioControlServiceEnable(boolean)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void setMultipleScreenBrightness(java.lang.String)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void setMultipleScreenBrightnessValueForHDR(float)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: boolean getCameraModeEnable()>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void setHighDynamicRangeMode(boolean)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void setScreenBrightnessForPreview(int)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: boolean isMdnieScenarioControlServiceEnabled()>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: float getFingerPrintBacklightValue(int)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: boolean getGalleryModeEnable()>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: java.lang.String getOnPixelRatioValueForPMS()>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void setSleepPatternBLF(java.lang.String,long,long,float)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void setVideoEnhancerSettingState(java.lang.String,int)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void setIRCompensationMode(boolean)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: boolean getDouAppModeEnable()>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void setGalleryModeEnable(boolean)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void setCameraModeEnable(boolean)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void setEadIndexOffset(int)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: float getAlphaMaskLevel(float,float,float)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void onAutoCurrentLimitStateChangedInt(int)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: int getVideoEnhancerSettingState(java.lang.String)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: boolean getVideoModeEnable()>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void onBurnInPreventionDisabled(boolean)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: boolean isBlueLightFilterScheduledTime()>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: boolean getAutoCurrentLimitOffModeEnabled()>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void onAutoCurrentLimitStateChanged(boolean)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void setOnPixelRatioValueForPMS(java.lang.String)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void setVideoModeEnable(boolean)>
<com.samsung.android.displaysolution.ISemDisplaySolutionManager: void setAutoCurrentLimitOffModeEnabled(boolean)>
<com.samsung.android.edge.IEdgeLightingCallback: void onEdgeLightingStarted()>
<com.samsung.android.edge.IEdgeLightingCallback: void onScreenChanged(boolean)>
<com.samsung.android.edge.IEdgeLightingCallback: void onStartEdgeLighting(java.lang.String,com.samsung.android.edge.SemEdgeLightingInfo,int)>
<com.samsung.android.edge.IEdgeLightingCallback: void onStopEdgeLighting(java.lang.String,int)>
<com.samsung.android.edge.IEdgeLightingCallback: void onEdgeLightingStopped()>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: boolean terminatePreloadedTa(int)>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: boolean terminateDrk()>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: boolean initialize(android.os.ParcelFileDescriptor,long,long)>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: byte[] process(byte[])>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: java.util.List getMatchedFilePaths(java.lang.String,java.lang.String)>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: boolean initializeDrk()>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: byte[] processPreloadedTa(int,byte[])>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: boolean deleteFile(java.lang.String)>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: boolean setChallenge(byte[])>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: byte[] getDrkKeyHandle()>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: java.util.List getFiles(java.lang.String,java.lang.String)>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: int getVersion()>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: byte[] getWrappedObject(byte[])>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: boolean terminate()>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: boolean writeFile(byte[],java.lang.String)>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: byte[] processWithPreloadedTa(byte[],java.lang.String)>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: java.lang.String readFile(java.lang.String)>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: boolean initializePreloadedTa(int)>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: boolean initializeWithPreloadedTa()>
<com.samsung.android.authnrservice.manager.ISemAuthnrService: boolean terminateWithPreloadedTa()>
<android.app.admin.IDevicePolicyManager: boolean resetPasswordWithTokenMDM(android.content.ComponentName,java.lang.String,byte[],int,int)>
<android.app.admin.IDevicePolicyManager: boolean semGetAllowStorageCard(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: boolean hasDelegatedPermission(java.lang.String,int,java.lang.String)>
<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLowerCaseMDM(android.content.ComponentName,int,int)>
<android.app.admin.IDevicePolicyManager: boolean getSamsungSDcardEncryptionStatus(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: boolean isUsbDataSignalingEnabledForUser(int)>
<android.app.admin.IDevicePolicyManager: void semSetAllowDesktopSync(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager: void semSetAllowBluetoothMode(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: void setPasswordMinimumNumericMDM(android.content.ComponentName,int,int)>
<android.app.admin.IDevicePolicyManager: void semSetAllowIrda(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager: void setMaximumFailedPasswordsForWipeMDM(android.content.ComponentName,int,int)>
<android.app.admin.IDevicePolicyManager: void semSetPasswordMinimumSymbols(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: void semSetAllowStorageCard(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager: boolean semGetAllowIrda(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: int semGetAllowBluetoothMode(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: boolean getBluetoothContactSharingEnabledForKnox(int)>
<android.app.admin.IDevicePolicyManager: void semSetPasswordMinimumLength(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: void semSetAllowTextMessaging(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLengthMDM(android.content.ComponentName,int,int)>
<android.app.admin.IDevicePolicyManager: void semSetPasswordMinimumLowerCase(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: boolean semGetAllowWifi(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: boolean semIsSimplePasswordEnabled(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: void semSetAllowInternetSharing(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager: void setPasswordMinimumUpperCaseMDM(android.content.ComponentName,int,int)>
<android.app.admin.IDevicePolicyManager: boolean clearResetPasswordTokenMDM(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: void setPasswordHistoryLengthMDM(android.content.ComponentName,int,int)>
<android.app.admin.IDevicePolicyManager: void setBluetoothContactSharingEnabledForKnox(int,boolean)>
<android.app.admin.IDevicePolicyManager: void setPasswordMinimumSymbolsMDM(android.content.ComponentName,int,int)>
<android.app.admin.IDevicePolicyManager: void semSetPasswordHistoryLength(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: boolean semIsActivePasswordSufficient(int)>
<android.app.admin.IDevicePolicyManager: java.lang.String getActualDeviceOwnerMDM()>
<android.app.admin.IDevicePolicyManager: void clearCrossProfileIntentFiltersMDM(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: boolean semGetAllowDesktopSync(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: void setPasswordQualityMDM(android.content.ComponentName,int,int)>
<android.app.admin.IDevicePolicyManager: void setPasswordMinimumLettersMDM(android.content.ComponentName,int,int)>
<android.app.admin.IDevicePolicyManager: boolean setResetPasswordTokenMDM(android.content.ComponentName,byte[],int)>
<android.app.admin.IDevicePolicyManager: void semSetPasswordMinimumNonLetter(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: int getCurrentFailedBiometricAttempts(int)>
<android.app.admin.IDevicePolicyManager: void semSetPasswordMinimumUpperCase(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: void semSetChangeNotificationEnabled(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager: void semSetAllowPopImapEmail(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager: void semSetPasswordMinimumNumeric(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: void setUserRestrictionForKnox(android.content.ComponentName,java.lang.String,boolean,int)>
<android.app.admin.IDevicePolicyManager: void addCrossProfileIntentFilterMDM(android.content.ComponentName,android.content.IntentFilter,int,int)>
<android.app.admin.IDevicePolicyManager: void setMaximumTimeToLockMDM(android.content.ComponentName,long,int)>
<android.app.admin.IDevicePolicyManager: android.os.Bundle getApplicationRestrictionsMDM(android.content.ComponentName,java.lang.String,int)>
<android.app.admin.IDevicePolicyManager: void setPasswordExpirationTimeoutMDM(android.content.ComponentName,long,int)>
<android.app.admin.IDevicePolicyManager: boolean semGetRequireStorageCardEncryption(android.content.ComponentName,int,boolean)>
<android.app.admin.IDevicePolicyManager: boolean semGetAllowBrowser(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: void semSetPasswordQuality(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: void semSetAllowWifi(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager: void semSetPasswordExpirationTimeout(android.content.ComponentName,long)>
<android.app.admin.IDevicePolicyManager: void setApplicationRestrictionsMDM(android.content.ComponentName,java.lang.String,android.os.Bundle,int)>
<android.app.admin.IDevicePolicyManager: void setKeyguardDisabledFeaturesMDM(android.content.ComponentName,int,int)>
<android.app.admin.IDevicePolicyManager: void setTrustAgentConfigurationMDM(int,android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle)>
<android.app.admin.IDevicePolicyManager: boolean isResetPasswordTokenActiveMDM(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: boolean isProfileOwnerOfOrganizationOwnedDeviceMDM(int)>
<android.app.admin.IDevicePolicyManager: boolean rebootMDM(java.lang.String)>
<android.app.admin.IDevicePolicyManager: void semSetKeyguardDisabledFeatures(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: void semSetPasswordMinimumLetters(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: boolean semGetAllowInternetSharing(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: boolean semGetAllowTextMessaging(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: void semSetRequireStorageCardEncryption(android.content.ComponentName,boolean,boolean)>
<android.app.admin.IDevicePolicyManager: void semSetSimplePasswordEnabled(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager: void setPasswordMinimumNonLetterMDM(android.content.ComponentName,int,int)>
<android.app.admin.IDevicePolicyManager: void semSetCameraDisabled(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager: void semSetAllowBrowser(android.content.ComponentName,boolean)>
<android.app.admin.IDevicePolicyManager: boolean semGetAllowPopImapEmail(android.content.ComponentName,int)>
<android.app.admin.IDevicePolicyManager: void setOverrideKeepProfilesRunning(boolean)>
<com.android.ims.internal.IImsService: void setSmsListener(int,android.telephony.ims.aidl.IImsSmsListener)>
<com.android.ims.internal.IImsService: void setTtyMode(int,int)>
<com.android.ims.internal.IImsService: int stopLocalRingBackTone()>
<com.android.ims.internal.IImsService: void acknowledgeSmsReport(int,int,int,int)>
<com.android.ims.internal.IImsService: void acknowledgeSmsWithPdu(int,int,int,byte[])>
<com.android.ims.internal.IImsService: java.lang.String getTrn(java.lang.String,java.lang.String)>
<com.android.ims.internal.IImsService: boolean isCmcEmergencyCallSupported(int)>
<com.android.ims.internal.IImsService: void setSmsc(int,java.lang.String)>
<com.android.ims.internal.IImsService: int getE911CallCount(int)>
<com.android.ims.internal.IImsService: void removeImsFeature(int,int)>
<com.android.ims.internal.IImsService: void sendSms(int,int,int,java.lang.String,java.lang.String,boolean,byte[])>
<com.android.ims.internal.IImsService: void setVideoCrtAudio(int,boolean)>
<com.android.ims.internal.IImsService: android.telephony.ims.aidl.IImsConfig getConfig(int)>
<com.android.ims.internal.IImsService: android.telephony.ims.aidl.IImsRcsFeature createRcsFeature(int)>
<com.android.ims.internal.IImsService: void onSmsReady(int)>
<com.android.ims.internal.IImsService: boolean queryCapabilityConfiguration(int,int,int)>
<com.android.ims.internal.IImsService: android.telephony.ims.aidl.ISipTransport getSipTransport(int)>
<com.android.ims.internal.IImsService: void setRetryCount(int,int,int)>
<com.android.ims.internal.IImsService: java.lang.String getSmsFormat(int)>
<com.android.ims.internal.IImsService: void triggerAutoConfigurationForApp(int)>
<com.android.ims.internal.IImsService: void onMemoryAvailable(int,int)>
<com.android.ims.internal.IImsService: void sendDtmfEvent(int,java.lang.String)>
<com.android.ims.internal.IImsService: void sendPublishDialog(int,com.android.internal.telephony.PublishDialog)>
<com.android.ims.internal.IImsService: void acknowledgeSms(int,int,int,int)>
<com.android.ims.internal.IImsService: void notifyEpsFallbackResult(int,int)>
<com.android.ims.internal.IImsService: void changeAudioPath(int,int)>
<com.android.ims.internal.IImsService: int startLocalRingBackTone(int,int,int)>
<com.android.ims.internal.IImsService: android.telephony.ims.aidl.IImsRegistration getRegistration(int)>
<com.android.ims.internal.IImsService: void setSecImsMmTelEventListener(int,com.android.ims.internal.ISecImsMmTelEventListener)>
<com.samsung.android.knox.SemIRCPCallback: void onFail(java.lang.String,int,int)>
<com.samsung.android.knox.SemIRCPCallback: void onProgress(java.lang.String,int,int)>
<com.samsung.android.knox.SemIRCPCallback: void onDone(java.lang.String,int)>
<com.samsung.android.knox.SemIRCPCallback: void onComplete(java.util.List,int,int)>
<com.samsung.android.continuity.ISemContinuityManager: void registerContinuityCopyListener(com.samsung.android.continuity.ISemContinuitySimpleListener,int)>
<com.samsung.android.continuity.ISemContinuityManager: void cancelDownload(java.lang.String,int)>
<com.samsung.android.continuity.ISemContinuityManager: void clearLocalClip(int)>
<com.samsung.android.continuity.ISemContinuityManager: boolean requestDownload(java.lang.String,com.samsung.android.continuity.ISemContinuitySimpleListener,int)>
<com.samsung.android.continuity.ISemContinuityManager: void setLocalClip(android.os.Bundle,int)>
<com.samsung.android.continuity.ISemContinuityManager: void unregisterContinuityCopyListener(int)>
<com.samsung.android.continuity.ISemContinuityManager: int getNearbyDeviceCount(int,int)>
<android.app.backup.IMemorySaverBackupRestoreObserver: void onTimeout()>
<android.app.backup.IMemorySaverBackupRestoreObserver: void onRestoreCompleted(java.lang.String,boolean)>
<android.app.backup.IMemorySaverBackupRestoreObserver: void onRestoreStart(java.lang.String)>
<android.app.backup.IMemorySaverBackupRestoreObserver: void onStartBackup(java.lang.String)>
<android.app.backup.IMemorySaverBackupRestoreObserver: void onBackupCompleted(java.lang.String,boolean)>
<android.app.ITaskStackListener: void onTaskWindowingModeChanged(int)>
<android.app.ITaskStackListener: void onActivityDismissingSplitTask(java.lang.String)>
<android.app.ITaskStackListener: void onOccludeChangeNotice(android.content.ComponentName,boolean)>
<android.os.IDeviceIdleController: void resetPreIdleTimeoutMode()>
<android.os.IDeviceIdleController: int setPreIdleTimeoutMode(int)>
<com.samsung.android.knox.dar.ddar.proxy.IProxyService: boolean registerAgentByAction(java.lang.String,int,java.lang.String,java.lang.String)>
<com.samsung.android.knox.dar.ddar.proxy.IProxyService: boolean registerAgentByMetadata(java.lang.String,int,java.lang.String,java.lang.String)>
<com.samsung.android.knox.dar.ddar.proxy.IProxyService: android.os.Bundle relay(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>
<com.samsung.android.knox.dar.ddar.proxy.IProxyService: android.os.Bundle relayAsync(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>
<com.samsung.android.knox.dar.ddar.proxy.IProxyService: void deregisterAgent(java.lang.String)>
<com.android.internal.widget.IRemoteLockMonitorCallback: int checkRemoteLockPassword(byte[])>
<com.android.internal.widget.IRemoteLockMonitorCallback: void changeRemoteLockState(com.android.internal.widget.RemoteLockInfo)>
<com.samsung.android.remoteappmode.IRotationChangeListener: void onRotationChanged(int,int)>
<android.media.IAudioPolicyService: java.lang.String getAudioPolicyConfig(java.lang.String)>
<android.media.IAudioPolicyService: int getVolumeGroupFromAudioAttributes(android.media.AudioAttributesInternal,boolean)>
<android.media.IAudioPolicyService: android.media.AudioMixerAttributesInternal getPreferredMixerAttributes(android.media.AudioAttributesInternal,int)>
<android.media.IAudioPolicyService: void setVolumeIndexForAttributes(android.media.AudioAttributesInternal,android.media.audio.common.AudioDeviceDescription,int)>
<android.media.IAudioPolicyService: android.media.audio.common.AudioProfile[] getDirectProfilesForAttributes(android.media.AudioAttributesInternal)>
<android.media.IAudioPolicyService: void setPreferredMixerAttributes(android.media.AudioAttributesInternal,int,int,android.media.AudioMixerAttributesInternal)>
<android.media.IAudioPolicyService: int getDirectPlaybackSupport(android.media.AudioAttributesInternal,android.media.audio.common.AudioConfig)>
<android.media.IAudioPolicyService: int getProductStrategyFromAudioAttributes(android.media.AudioAttributesInternal,boolean)>
<android.media.IAudioPolicyService: int getMinVolumeIndexForAttributes(android.media.AudioAttributesInternal)>
<android.media.IAudioPolicyService: void clearPreferredMixerAttributes(android.media.AudioAttributesInternal,int,int)>
<android.media.IAudioPolicyService: boolean canBeSpatialized(android.media.AudioAttributesInternal,android.media.audio.common.AudioConfig,android.media.audio.common.AudioDevice[])>
<android.media.IAudioPolicyService: android.media.GetInputForAttrResponse getInputForAttr(android.media.AudioAttributesInternal,int,int,int,android.content.AttributionSourceState,android.media.audio.common.AudioConfigBase,int,int)>
<android.media.IAudioPolicyService: int getMaxVolumeIndexForAttributes(android.media.AudioAttributesInternal)>
<android.media.IAudioPolicyService: int startAudioSource(android.media.AudioPortConfigFw,android.media.AudioAttributesInternal)>
<android.media.IAudioPolicyService: boolean isDirectOutputSupported(android.media.audio.common.AudioConfigBase,android.media.AudioAttributesInternal)>
<android.media.IAudioPolicyService: int getVolumeIndexForAttributes(android.media.AudioAttributesInternal,android.media.audio.common.AudioDeviceDescription)>
<android.media.IAudioPolicyService: android.media.GetOutputForAttrResponse getOutputForAttr(android.media.AudioAttributesInternal,int,android.content.AttributionSourceState,android.media.audio.common.AudioConfig,int,int)>
<android.media.IAudioPolicyService: android.media.audio.common.AudioDevice[] getDevicesForAttributes(android.media.AudioAttributesInternal,boolean)>
<android.media.IAudioPolicyService: void setAudioPolicyConfig(java.lang.String)>
<android.hardware.camera2.ICameraDeviceUser: void setParameters(java.lang.String)>
<android.sec.enterprise.proxy.IProxyCredentialsCallback: void onAuthenticationResult(int)>
<com.samsung.android.core.pm.containerservice.IContainerService: java.lang.String copyPackageToContainer(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)>
<com.samsung.android.core.pm.containerservice.IContainerService: void doForceGC()>
<com.samsung.android.knox.zt.devicetrust.IEndpointMonitorListener: void onEventGeneralized(int,java.lang.String)>
<com.samsung.android.knox.zt.devicetrust.IEndpointMonitorListener: void onEventSimplified(int,java.lang.String)>
<com.samsung.android.knox.zt.devicetrust.IEndpointMonitorListener: void onEvent(int,android.os.Bundle)>
<android.sec.clipboard.IClipboardDataPasteEvent: void onPaste(com.samsung.android.content.clipboard.data.SemClipData)>
<android.net.INetworkPolicyManager: int[] getAllFirewallRuleMobileData()>
<android.net.INetworkPolicyManager: void setFirewallRuleWifi(int,boolean)>
<android.net.INetworkPolicyManager: void setFirewallRuleMobileDataMap(java.util.Map)>
<android.net.INetworkPolicyManager: boolean getFirewallRuleWifi(int)>
<android.net.INetworkPolicyManager: void setFirewallRuleMobileData(int,boolean)>
<android.net.INetworkPolicyManager: boolean getFirewallRuleMobileData(int)>
<android.net.INetworkPolicyManager: void setFirewallRuleWifiMap(java.util.Map)>
<android.location.ICountryListener: void onCountryDetected(android.location.Country)>
<android.hardware.input.ISwitchEventChangedListener: void onSwitchEventChanged(int,int,int,int)>
<com.samsung.android.camera.iris.IIrisServiceLockoutResetCallback: void onLockoutReset(long)>
<android.os.storage.IStorageManager: long getUsedF2fsFileNode()>
<android.os.storage.IStorageManager: int semGetExternalSdCardHealthState()>
<android.os.storage.IStorageManager: boolean isSecureContainerMounted(java.lang.String)>
<android.os.storage.IStorageManager: boolean mvFileAtData(java.lang.String,java.lang.String)>
<android.os.storage.IStorageManager: int encryptExternalStorage(boolean)>
<android.os.storage.IStorageManager: int finalizeSecureContainer(java.lang.String)>
<android.os.storage.IStorageManager: java.lang.String getVolumeState(java.lang.String)>
<android.os.storage.IStorageManager: boolean isUserKeyUnlocked(int)>
<android.os.storage.IStorageManager: boolean setSdpPolicyToPathCmd(int,java.lang.String)>
<android.os.storage.IStorageManager: void finishMediaUpdate()>
<android.os.storage.IStorageManager: int resizeSecureContainer(java.lang.String,int,java.lang.String)>
<android.os.storage.IStorageManager: java.lang.String getSecureContainerFilesystemPath(java.lang.String)>
<android.os.storage.IStorageManager: void setUserKeyProtection(int,byte[])>
<android.os.storage.IStorageManager: int renameSecureContainer(java.lang.String,java.lang.String)>
<android.os.storage.IStorageManager: void createUserKey(int,int,boolean)>
<android.os.storage.IStorageManager: java.lang.String getSecureContainerPath(java.lang.String)>
<android.os.storage.IStorageManager: java.lang.String[] getSecureContainerList()>
<android.os.storage.IStorageManager: void waitForAsecScan()>
<android.os.storage.IStorageManager: int createSecureContainer(java.lang.String,int,java.lang.String,java.lang.String,int,boolean)>
<android.os.storage.IStorageManager: int unmountSecureContainer(java.lang.String,boolean)>
<android.os.storage.IStorageManager: void unmountBySecApp(java.lang.String,java.lang.String)>
<android.os.storage.IStorageManager: boolean cpFileAtData(java.lang.String,java.lang.String)>
<android.os.storage.IStorageManager: boolean isSensitive(java.lang.String)>
<android.os.storage.IStorageManager: boolean setSdpPolicyCmd(int)>
<android.os.storage.IStorageManager: void destroyUserKey(int)>
<android.os.storage.IStorageManager: void lockUserKey(int)>
<android.os.storage.IStorageManager: java.lang.String semGetExternalSdCardId()>
<android.os.storage.IStorageManager: int mountSecureContainer(java.lang.String,java.lang.String,int,boolean)>
<android.os.storage.IStorageManager: boolean setSensitive(int,java.lang.String)>
<android.os.storage.IStorageManager: void unlockUserKey(int,int,byte[],byte[])>
<android.os.storage.IStorageManager: int destroySecureContainer(java.lang.String,boolean)>
<android.os.storage.IStorageManager: int fixPermissionsSecureContainer(java.lang.String,int,java.lang.String)>
<android.os.storage.IStorageManager: void formatBySecApp(java.lang.String,java.lang.String)>
<android.os.storage.IStorageManager: boolean mountSdpMediaStorageCmd(int)>
<android.os.storage.IStorageManager: int mountVolume(java.lang.String)>
<android.os.storage.IStorageManager: int trimSecureContainer(java.lang.String,int,java.lang.String)>
<android.os.storage.IStorageManager: void unmountVolume(java.lang.String,boolean,boolean)>
<android.os.storage.IStorageManager: int getUsedSpaceSecureContainer(java.lang.String)>
<android.os.storage.IStorageManager: void mountBySecApp(java.lang.String,java.lang.String)>
<android.os.storage.IStorageManager: boolean setDualDARPolicyCmd(int,int)>
<android.window.ITransitionPlayer: void transitionAborted(android.os.IBinder)>
<android.security.keymaster.IKeyAttestationApplicationIdProvider: android.security.keymaster.KeyAttestationApplicationId getKeyAttestationApplicationId(int)>
<vendor.samsung.hardware.radio.data.ISehRadioData: void setDataAllowed(int,boolean,vendor.samsung.hardware.radio.data.SehAllowDataParam)>
<vendor.samsung.hardware.radio.data.ISehRadioData: void setMobileDataSetting(int,boolean,boolean)>
<vendor.samsung.hardware.radio.data.ISehRadioData: int getInterfaceVersion()>
<vendor.samsung.hardware.radio.data.ISehRadioData: java.lang.String getInterfaceHash()>
<vendor.samsung.hardware.radio.data.ISehRadioData: void setResponseFunctions(vendor.samsung.hardware.radio.data.ISehRadioDataResponse,vendor.samsung.hardware.radio.data.ISehRadioDataIndication)>
<com.samsung.android.wifi.ISemWifiDiagnosticsClient: void runDiagnosis(java.lang.String,java.lang.String)>
<com.samsung.android.wifi.ISemWifiDiagnosticsClient: java.util.List setupDelegation(java.lang.String)>
<com.samsung.android.wifi.ISemWifiDiagnosticsClient: void clearHistory()>
<com.samsung.android.wifi.ISemWifiDiagnosticsClient: java.util.List getDiagnosisResults()>
<android.os.IDumpstate: void retrieveBugreport(int,java.lang.String,java.io.FileDescriptor,java.lang.String,android.os.IDumpstateListener)>
<android.app.ISearchManager: java.util.List getSearchablesInInsightSearch(boolean)>
<com.android.internal.telephony.ISub: int getActiveSubInfoCount(java.lang.String,java.lang.String)>
<com.android.internal.telephony.ISub: java.util.List getActiveSubscriptionInfoList(java.lang.String,java.lang.String)>
<android.app.IActivityManager: android.os.Bundle getOptionsForIntentSender(android.content.IIntentSender)>
<android.app.IActivityManager: boolean isScaledAppByPackageName(java.lang.String)>
<android.app.IActivityManager: void addPackageData(java.lang.String,float)>
<android.app.IActivityManager: void forceStopPackageByAdmin(java.lang.String,int)>
<android.app.IActivityManager: java.util.List getRestrictableList(int)>
<android.app.IActivityManager: boolean isFreezableUid(int)>
<android.app.IActivityManager: boolean moveTaskToBack(int,boolean)>
<android.app.IActivityManager: boolean setFGSFilter(int,boolean)>
<android.app.IActivityManager: void removeApplicationStartInfoCompleteListener(int)>
<android.app.IActivityManager: boolean isScaledApp(int)>
<android.app.IActivityManager: boolean canRestrict(int,java.lang.String,int)>
<android.app.IActivityManager: android.content.res.Configuration getGlobalConfiguration()>
<android.app.IActivityManager: void closeSystemDialogsInDisplay(java.lang.String,int)>
<android.app.IActivityManager: boolean setProcessSlowdown(int,boolean)>
<android.app.IActivityManager: boolean updateRestrictionInfo(com.samsung.android.sdhms.SemAppRestrictionManager$RestrictionInfo,java.util.List)>
<android.app.IActivityManager: void setTTSPkgInfo(int)>
<android.app.IActivityManager: com.samsung.android.sdhms.SemAppRestrictionManager$RestrictionInfo getRestrictionInfo(int,java.lang.String,int)>
<android.app.IActivityManager: java.lang.String getPackageFromAppProcesses(int)>
<android.app.IActivityManager: void updateFlingerFlag(int,java.lang.String)>
<android.app.IActivityManager: boolean getAutoRemoveRecents(int)>
<android.app.IActivityManager: java.util.List getLongLiveProcessesForUser(int)>
<android.app.IActivityManager: void checkProfileForADCP(int,java.lang.String)>
<android.app.IActivityManager: float getScalingFactor(java.lang.String)>
<android.app.IActivityManager: boolean clearRestrictionInfo(java.util.List)>
<android.app.IActivityManager: boolean restrict(int,int,boolean,java.lang.String,int)>
<android.app.IActivityManager: java.lang.String getLongLiveApp()>
<android.app.IActivityManager: void resetAbnormalList()>
<android.app.IActivityManager: java.util.List getRestrictedList(int)>
<android.app.IActivityManager: boolean setLongLiveApp(java.lang.String)>
<android.app.IActivityManager: java.util.List getAllRestrictedList()>
<android.app.IActivityManager: void preloadBoosterAppsFromIpm(java.util.List,int)>
<android.app.IActivityManager: java.lang.String[] queryRegisteredReceiverPackages(android.content.Intent,java.lang.String,int)>
<android.app.IActivityManager: java.util.List getLongLiveApps()>
<android.app.IActivityManager: void dismissUserSwitchingDialog(int)>
<android.app.IActivityManager: java.util.List getLongLiveTaskIdsForUser(int)>
<android.app.IActivityManager: void registerDedicatedCallback(android.os.RemoteCallback,int)>
<android.app.IActivityManager: int getMaxLongLiveApps()>
<android.app.IActivityManager: boolean addLongLiveApp(java.lang.String)>
<android.app.IActivityManager: void showAllDSSInfo()>
<android.app.IActivityManager: boolean setLongLiveTask(int)>
<android.app.IActivityManager: boolean clearLongLiveTask(int)>
<android.app.IActivityManager: void clearTTSPkgInfo()>
<android.app.IActivityManager: void setDssForPackage(java.lang.String,float)>
<android.app.IActivityManager: boolean moveTaskToBackWithBundle(int,boolean,android.os.Bundle)>
<android.app.IActivityManager: void updatePersistentConfigurationAndLocaleOverlays(android.content.res.Configuration,java.lang.String,java.lang.String,android.os.LocaleList)>
<android.app.IActivityManager: java.util.List getLongLiveProcesses()>
<android.app.IActivityManager: boolean removeLongLiveApp(java.lang.String)>
<android.app.IActivityManager: int[] getIsolatedProcessList()>
<android.app.IActivityManager: void reportAbnormalUsage(int,int)>
<com.samsung.android.location.ISLocationBatchingListener: void onLocationAvailable(android.location.Location[],boolean)>
<android.service.selectiontoolbar.ISelectionToolbarRenderServiceCallback: void transferTouch(android.os.IBinder,android.os.IBinder)>
<com.samsung.android.infoextraction.IKerykeion: void training(java.lang.String)>
<com.samsung.android.infoextraction.IKerykeion: void dismiss()>
<com.samsung.android.infoextraction.IKerykeion: void setInfoExtractionListener(int,android.os.IBinder)>
<com.samsung.android.infoextraction.IKerykeion: void addResultRule(int,java.lang.String)>
<com.samsung.android.infoextraction.IKerykeion: void show(java.lang.String,android.graphics.Rect)>
<com.samsung.android.infoextraction.IKerykeion: void start(int,com.samsung.android.infoextraction.KerykeionRequest,android.graphics.Rect)>
<com.samsung.android.infoextraction.IKerykeion: void restart()>
<com.samsung.android.infoextraction.IKerykeion: void stop(int)>
<android.service.quicksettings.IQSTileService: void semSetToggleButtonChecked(boolean)>
<android.service.quicksettings.IQSTileService: boolean semIsToggleButtonChecked()>
<android.service.quicksettings.IQSTileService: android.widget.RemoteViews semGetDetailView()>
<android.service.quicksettings.IQSTileService: java.lang.CharSequence semGetDetailViewTitle()>
<android.service.quicksettings.IQSTileService: boolean semIsToggleButtonExists()>
<android.service.quicksettings.IQSTileService: android.content.Intent semGetSettingsIntent()>
<android.service.quicksettings.IQSTileService: java.lang.CharSequence semGetDetailViewSettingButtonName()>
<com.android.ims.internal.IImsCallSession: void notifyReadyToHandleImsCallbacks()>
<com.android.ims.internal.IImsCallSession: void sendImsCallEvent(java.lang.String,android.os.Bundle)>
<com.android.ims.internal.IImsCallSession: void cancelTransferCall()>
<android.permission.IOnPermissionsChangeListener: void onPermissionsChanged(int)>
<com.sec.android.iaft.IIAFTManagerService: void stopTrace()>
<com.sec.android.iaft.IIAFTManagerService: void startAtraceAndAnalyze(int,java.lang.String,int)>
<com.sec.android.iaft.IIAFTManagerService: void registerCallback(com.sec.android.iaft.callback.IIAFTCallback)>
<com.sec.android.iaft.IIAFTManagerService: void startAtrace()>
<com.samsung.android.wifi.ISemWifiApClientUpdateCallback: void onClientUpdated(com.samsung.android.wifi.SemWifiApClientDetails)>
<android.view.IRecentsAnimationController: void finish(boolean,boolean)>
<com.samsung.android.remoteappmode.ISecureAppChangedListener: void onSecuredAppRemoved(int,java.lang.String)>
<com.samsung.android.remoteappmode.ISecureAppChangedListener: void onSecuredAppLaunched(int,java.lang.String)>
<com.samsung.android.service.reactive.IReactiveService: int setString(java.lang.String)>
<com.samsung.android.service.reactive.IReactiveService: int getServiceSupport()>
<com.samsung.android.service.reactive.IReactiveService: int removeString()>
<com.samsung.android.service.reactive.IReactiveService: byte[] getRandom()>
<com.samsung.android.service.reactive.IReactiveService: byte[] sessionAccept(byte[])>
<com.samsung.android.service.reactive.IReactiveService: java.lang.String getString()>
<com.samsung.android.service.reactive.IReactiveService: int getFlag(int)>
<com.samsung.android.service.reactive.IReactiveService: int setFlag(int,int,java.lang.String)>
<com.samsung.android.service.reactive.IReactiveService: int getErrorCode()>
<com.samsung.android.service.reactive.IReactiveService: int sessionComplete(byte[])>
<com.samsung.android.service.reactive.IReactiveService: int verify(java.lang.String,int)>
<com.samsung.android.multiwindow.IRemoteAppTransitionListener: void onWallpaperVisibilityChanged(boolean,boolean)>
<com.samsung.android.multiwindow.IRemoteAppTransitionListener: void onFinishRecentsAnimation(boolean)>
<com.samsung.android.multiwindow.IRemoteAppTransitionListener: void onStartHomeAnimation(boolean)>
<com.samsung.android.multiwindow.IRemoteAppTransitionListener: void onStartRecentsAnimation(boolean)>
<com.samsung.android.multiwindow.IDragAndDropClient: void onDisconnected()>
<com.samsung.android.multiwindow.IDragAndDropClient: void onConnected(android.os.IBinder,int)>
<com.samsung.android.multiwindow.IDragAndDropClient: boolean getInitialDropTargetVisible()>
<android.view.IWindowSession: void setTspNoteMode(android.view.IWindow,boolean)>
<android.view.IWindowSession: void grantInputChannelWithTaskToken(int,android.view.SurfaceControl,android.view.IWindow,android.os.IBinder,int,int,int,int,android.os.IBinder,android.os.IBinder,java.lang.String,android.view.InputChannel,int,android.window.WindowContainerToken)>
<android.view.IWindowSession: void performClipDataUpdate(android.content.ClipData)>
<android.view.IWindowSession: android.os.IBinder performDrag(android.view.IWindow,int,android.view.SurfaceControl,int,float,float,float,float,android.content.ClipData)>
<android.view.IWindowSession: android.os.IBinder performDragWithArea(android.view.IWindow,int,android.view.SurfaceControl,int,float,float,float,float,android.content.ClipData,android.graphics.RectF,android.graphics.Point)>
<android.view.IWindowSession: void grantInputChannel(int,android.view.SurfaceControl,android.view.IWindow,android.os.IBinder,int,int,int,int,android.os.IBinder,android.os.IBinder,java.lang.String,android.view.InputChannel)>
<android.view.IWindowSession: void clearTspDeadzone(android.view.IWindow)>
<android.view.IWindowSession: void remove(android.view.IWindow)>
<android.view.IWindowSession: void removeWithTaskToken(android.view.IWindow,android.window.WindowContainerToken)>
<android.view.IWindowSession: void setTspDeadzone(android.view.IWindow,android.os.Bundle)>
<android.os.IUserManager: boolean updateUserInfo(int,android.os.Bundle)>
<com.android.internal.app.IBatteryStatsCallback: void notifyNetworkStatsUpdated(java.util.List)>
<android.hardware.input.IInputManager: void registerLidStateChangedListener(android.hardware.input.ISemLidStateChangedListener)>
<android.hardware.input.IInputManager: void setDisplayIdForPointerIcon(int)>
<android.hardware.input.IInputManager: void registerWirelessKeyboardShareChangedListener(android.hardware.input.IWirelessKeyboardShareChangedListener)>
<android.hardware.input.IInputManager: int getDisplayIdForPointerIcon()>
<android.hardware.input.IInputManager: void registerSwitchEventChangedListener(android.hardware.input.ISwitchEventChangedListener)>
<android.hardware.input.IInputManager: void updateWirelessKeyboardShareStatus()>
<android.hardware.input.IInputManager: boolean isDefaultPointerIconChanged()>
<android.hardware.input.IInputManager: void setCustomHoverIcon(android.view.PointerIcon)>
<android.hardware.input.IInputManager: void removeDeviceWirelessKeyboardShare(java.lang.String,int)>
<android.hardware.input.IInputManager: void forceFadeIcon(int)>
<android.hardware.input.IInputManager: boolean supportPogoDevice()>
<android.hardware.input.IInputManager: int getToolTypeForDefaultPointerIcon()>
<android.hardware.input.IInputManager: int getInboundQueueLength()>
<android.hardware.input.IInputManager: int getScanCodeState(int,int,int)>
<android.hardware.input.IInputManager: void setHostRoleWirelessKeyboardShare()>
<android.hardware.input.IInputManager: void setDefaultPointerIcon(int,android.view.PointerIcon,boolean)>
<android.hardware.input.IInputManager: int getLidState()>
<android.hardware.input.IInputManager: void changeDeviceWirelessKeyboardShare(java.lang.String,int)>
<android.hardware.input.IInputManager: android.view.PointerIcon getDefaultPointerIcon()>
<android.hardware.input.IInputManager: long getLastLidEventTimeNanos()>
<android.hardware.input.IInputManager: int checkInputFeature()>
<android.hardware.input.IInputManager: void setShowAllTouches(boolean)>
<android.hardware.input.IInputManager: android.view.InputChannel monitorInputForBinder(java.lang.String,int,int)>
<android.hardware.input.IInputManager: int getGlobalMetaState(int)>
<android.hardware.input.IInputManager: boolean isUidTouched(int)>
<android.hardware.input.IInputManager: void setWakeKeyDynamically(java.lang.String,boolean,java.lang.String)>
<android.hardware.input.IInputManager: boolean setTspEnabled(int,boolean)>
<android.hardware.input.IInputManager: android.view.InputMonitor monitorGestureInputFiltered(android.os.IBinder,java.lang.String,int,int)>
<android.hardware.input.IInputManager: void notifyQuickAccess(int,float,float)>
<android.hardware.input.IInputManager: boolean addDeviceWirelessKeyboardShare(int)>
<android.hardware.input.IInputManager: void registerMultiFingerGestureListener(android.hardware.input.IMultiFingerGestureListener)>
<android.hardware.input.IInputManager: int getPointerIconType()>
<android.hardware.input.IInputManager: int getCurrentSwitchEventState(int,boolean)>
<android.hardware.input.IInputManager: boolean switchDeviceWirelessKeyboardShare(java.lang.String,int)>
<android.hardware.input.IInputManager: long semGetMotionIdleTimeMillis(boolean)>
<android.hardware.input.IInputManager: void registerPointerIconChangedListener(android.hardware.input.IPointerIconChangedListener)>
<android.hardware.input.IInputManager: void connectByBtDevice(android.bluetooth.BluetoothDevice)>
<android.hardware.input.IInputManager: void setStartedShutdown(boolean)>
<android.service.quicksettings.IQSService: void semUpdateDetailView(android.os.IBinder)>
<android.service.quicksettings.IQSService: void semFireToggleStateChanged(android.os.IBinder,boolean,boolean)>
<android.app.IUiAutomationConnection: android.graphics.Bitmap takeSurfaceControlScreenshot(android.view.SurfaceControl)>
<android.app.IUiAutomationConnection: android.graphics.Bitmap takeScreenshot(android.graphics.Rect)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setPasswordLockDelay(int)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setSettingsChangeAllowed(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setWifiStateChangeAllowed(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setLocationProviderAllowed(java.lang.String,boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setGPSStateChangeAllowed(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setFaceRecognitionEvenCameraBlockedAllowed(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setLockscreenWallpaper(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setNavigationBarHidden(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setRoamingAllowed(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setAirplaneModeAllowed(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setLockedIccIds(java.lang.String[])>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setPwdChangeRequested(int)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setMultifactorAuthEnabled(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setCellularDataAllowed(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setStatusBarExpansionAllowed(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setWifiTetheringAllowed(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setMaximumFailedPasswordsForProfileDisable(int)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setNFCStateChangeAllowed(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setMaximumFailedPasswordsForDisable(int,java.lang.String)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setStatusBarHidden(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void excludeExternalStorageForFailedPasswordsWipe(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setCameraAllowed(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setAdminLock(boolean,boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setApplicationNameControlEnabled(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setBluetoothAllowed(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setPasswordVisibilityEnabled(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setLockscreenInvisibleOverlay(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setKioskModeEnabled(boolean)>
<android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback: void setWifiAllowed(boolean)>
<com.samsung.android.desktopmode.IDesktopModeUiService: void removeNavBarIcon(int)>
<com.samsung.android.desktopmode.IDesktopModeUiService: boolean isActivityShowing(int)>
<com.samsung.android.desktopmode.IDesktopModeUiService: void finishActivity(int)>
<com.samsung.android.desktopmode.IDesktopModeUiService: void removeNotification(int)>
<com.samsung.android.desktopmode.IDesktopModeUiService: int getCurrentOverlayType(int)>
<com.samsung.android.desktopmode.IDesktopModeUiService: boolean hasUiElement()>
<com.samsung.android.desktopmode.IDesktopModeUiService: void showNavBarIcon(int)>
<com.samsung.android.desktopmode.IDesktopModeUiService: void dismissOverlay(int,int)>
<com.samsung.android.desktopmode.IDesktopModeUiService: void showDialog(int,int,com.samsung.android.desktopmode.IDesktopModeUiServiceCallback)>
<com.samsung.android.desktopmode.IDesktopModeUiService: int getCurrentDialogType()>
<com.samsung.android.desktopmode.IDesktopModeUiService: void showNotification(int)>
<com.samsung.android.desktopmode.IDesktopModeUiService: void showOverlay(int,int,com.samsung.android.desktopmode.IDesktopModeUiServiceCallback)>
<com.samsung.android.desktopmode.IDesktopModeUiService: void dismissDialog(int,int)>
<com.samsung.android.desktopmode.IDesktopModeUiService: void startActivity(int,int,com.samsung.android.desktopmode.IDesktopModeUiServiceCallback)>
<com.samsung.android.desktopmode.IDesktopModeUiService: boolean hasOverlay(int,int)>
<com.android.internal.telephony.ISms: void sendTextwithOptionsForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,int,int)>
<com.android.internal.telephony.ISms: boolean getSmsSettingForSubscriber(int,java.lang.String)>
<com.android.internal.telephony.ISms: boolean getSMSPAvailableForSubscriber(int)>
<com.android.internal.telephony.ISms: void sendTextwithOptionsReadconfirmForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,int,int,int)>
<com.android.internal.telephony.ISms: void sendMultipartTextwithOptionsForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,int,int,int)>
<com.android.internal.telephony.ISms: void sendTextwithCBPForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,java.lang.String,int)>
<com.android.internal.telephony.ISms: void sendTextAutoLoginForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean)>
<com.android.internal.telephony.ISms: void sendTextNSRIForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,byte[],android.app.PendingIntent,android.app.PendingIntent,int,int)>
<com.android.internal.telephony.ISms: byte[] getCbSettingsForSubscriber(int)>
<com.android.internal.telephony.ISms: void sendMultipartTextwithCBPForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,java.lang.String,int)>
<com.android.internal.telephony.ISms: void resetSimFullStatusForSubscriber(int)>
<com.android.internal.telephony.ISms: void sendDatawithOrigPortForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,int,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<com.android.internal.telephony.ISms: java.lang.String getMnoNameForSubscriber(int)>
<com.android.internal.telephony.ISms: void sendOTADomesticForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.samsung.android.multiwindow.IDexSnappingCallback: void onWindowSnappingChanged(int,android.graphics.Rect)>
<com.samsung.android.content.smartclip.ISpenGestureService: android.os.Bundle getScrollableAreaInfo(android.graphics.Rect,android.os.IBinder)>
<com.samsung.android.content.smartclip.ISpenGestureService: java.lang.String getBleSpenAddress()>
<com.samsung.android.content.smartclip.ISpenGestureService: void setSpenPdctLowSensitivityEnable()>
<com.samsung.android.content.smartclip.ISpenGestureService: int getCurrentMissingMethodFlags()>
<com.samsung.android.content.smartclip.ISpenGestureService: android.graphics.Bitmap screenshot(int,int,boolean,android.graphics.Rect,int,int,boolean)>
<com.samsung.android.content.smartclip.ISpenGestureService: void resetPenDetachSound(java.lang.String)>
<com.samsung.android.content.smartclip.ISpenGestureService: void setPenHoverIcon(java.lang.String,java.io.FileDescriptor,float,float)>
<com.samsung.android.content.smartclip.ISpenGestureService: int getScreenOffReason()>
<com.samsung.android.content.smartclip.ISpenGestureService: void notifyBleSpenChargeLockState(boolean)>
<com.samsung.android.content.smartclip.ISpenGestureService: void setPenDetachSound(java.lang.String,java.io.FileDescriptor)>
<com.samsung.android.content.smartclip.ISpenGestureService: com.android.internal.inputmethod.IRemoteInputConnection getCurrentInputContext()>
<com.samsung.android.content.smartclip.ISpenGestureService: void resetPenAttachSound(java.lang.String)>
<com.samsung.android.content.smartclip.ISpenGestureService: void setSpenPowerSavingModeEnabled(boolean)>
<com.samsung.android.content.smartclip.ISpenGestureService: void setHoverStayDetectEnabled(boolean)>
<com.samsung.android.content.smartclip.ISpenGestureService: void setBleSpenCmfCode(java.lang.String)>
<com.samsung.android.content.smartclip.ISpenGestureService: void notifyKeyboardClosed()>
<com.samsung.android.content.smartclip.ISpenGestureService: android.view.inputmethod.EditorInfo getCurrentEditorInfo()>
<com.samsung.android.content.smartclip.ISpenGestureService: void registerBleSpenChargeLockStateChangedListener(com.samsung.android.content.smartclip.IBleSpenChargeLockStateChangedListener)>
<com.samsung.android.content.smartclip.ISpenGestureService: void injectInputEvent(int,int,android.view.InputEvent[],boolean,android.os.IBinder)>
<com.samsung.android.content.smartclip.ISpenGestureService: void resetPenHoverIcon(java.lang.String)>
<com.samsung.android.content.smartclip.ISpenGestureService: com.samsung.android.content.smartclip.SemSmartClipDataRepository getSmartClipDataByScreenRect(android.graphics.Rect,android.os.IBinder,int,int)>
<com.samsung.android.content.smartclip.ISpenGestureService: void setBleSpenAddress(java.lang.String)>
<com.samsung.android.content.smartclip.ISpenGestureService: void setSpenInsertionState(boolean)>
<com.samsung.android.content.smartclip.ISpenGestureService: void registerAirGestureListener(com.samsung.android.content.smartclip.IAirGestureListener)>
<com.samsung.android.content.smartclip.ISpenGestureService: void registerInputMethodInfoChangeListener(com.samsung.android.content.smartclip.IInputMethodInfoChangeListener)>
<com.samsung.android.content.smartclip.ISpenGestureService: void setCurrentInputInfo(com.android.internal.inputmethod.IRemoteInputConnection,android.view.inputmethod.EditorInfo,int)>
<com.samsung.android.content.smartclip.ISpenGestureService: void writeBleSpenCommand(java.lang.String)>
<com.samsung.android.content.smartclip.ISpenGestureService: void setScreenOffReason(int)>
<com.samsung.android.content.smartclip.ISpenGestureService: boolean isSupportBleSpen()>
<com.samsung.android.content.smartclip.ISpenGestureService: void unregisterInputMethodInfoChangeListener(com.samsung.android.content.smartclip.IInputMethodInfoChangeListener)>
<com.samsung.android.content.smartclip.ISpenGestureService: android.os.Bundle getScrollableViewInfo(android.graphics.Rect,int,android.os.IBinder)>
<com.samsung.android.content.smartclip.ISpenGestureService: void setHoverStayValues(int,int,int)>
<com.samsung.android.content.smartclip.ISpenGestureService: void unregisterHoverListener(com.samsung.android.content.smartclip.ISpenGestureHoverListener)>
<com.samsung.android.content.smartclip.ISpenGestureService: void saveBleSpenLogFile(byte[])>
<com.samsung.android.content.smartclip.ISpenGestureService: java.lang.String getBleSpenCmfCode()>
<com.samsung.android.content.smartclip.ISpenGestureService: void showTouchPointer(boolean)>
<com.samsung.android.content.smartclip.ISpenGestureService: boolean isSpenInserted()>
<com.samsung.android.content.smartclip.ISpenGestureService: void unregisterBleSpenChargeLockStateChangedListener(com.samsung.android.content.smartclip.IBleSpenChargeLockStateChangedListener)>
<com.samsung.android.content.smartclip.ISpenGestureService: void registerHoverListener(com.samsung.android.content.smartclip.ISpenGestureHoverListener)>
<com.samsung.android.content.smartclip.ISpenGestureService: void unregisterAirGestureListener(com.samsung.android.content.smartclip.IAirGestureListener)>
<com.samsung.android.content.smartclip.ISpenGestureService: void sendSmartClipRemoteRequestResult(com.samsung.android.content.smartclip.SmartClipRemoteRequestResult)>
<com.samsung.android.content.smartclip.ISpenGestureService: void notifyAirGesture(java.lang.String)>
<com.samsung.android.content.smartclip.ISpenGestureService: void setPenAttachSound(java.lang.String,java.io.FileDescriptor)>
<com.samsung.android.ims.cmc.ISemCmcRecordingListener: void onError(int,int)>
<com.samsung.android.ims.cmc.ISemCmcRecordingListener: void onInfo(int,int)>
<com.samsung.android.dsms.aidl.IDsmsInfoService: boolean isCommercializedDevice()>
<com.samsung.android.wifi.ISemWifiApClientListUpdateCallback: void onOverallDataLimitChanged(long)>
<com.samsung.android.wifi.ISemWifiApClientListUpdateCallback: void onClientListUpdated(java.util.List,long)>
<vendor.samsung.hardware.thermal.ISehThermal: int getScenarioHint()>
<vendor.samsung.hardware.thermal.ISehThermal: void unregisterThermalChangedCallback(vendor.samsung.hardware.thermal.ISehThermalChangedCallback)>
<vendor.samsung.hardware.thermal.ISehThermal: java.lang.String getInterfaceHash()>
<vendor.samsung.hardware.thermal.ISehThermal: vendor.samsung.hardware.thermal.SehTemperature[] getTemperatures()>
<vendor.samsung.hardware.thermal.ISehThermal: void registerThermalChangedCallback(vendor.samsung.hardware.thermal.ISehThermalChangedCallback)>
<vendor.samsung.hardware.thermal.ISehThermal: void setScenarioHint(int)>
<vendor.samsung.hardware.thermal.ISehThermal: int getInterfaceVersion()>
<vendor.samsung.hardware.thermal.ISehThermal: vendor.samsung.hardware.thermal.SehTemperature[] getTemperaturesWithType(int)>
<android.service.notification.INotificationListener: void onEdgeNotificationPosted(java.lang.String,int,android.os.Bundle)>
<android.service.notification.INotificationListener: void onEdgeNotificationRemoved(java.lang.String,int,android.os.Bundle)>
<vendor.samsung.hardware.radio.channel.ISehRadioChannel: void setCallback(vendor.samsung.hardware.radio.channel.ISehRadioChannelCallback)>
<vendor.samsung.hardware.radio.channel.ISehRadioChannel: int getInterfaceVersion()>
<vendor.samsung.hardware.radio.channel.ISehRadioChannel: java.lang.String getInterfaceHash()>
<vendor.samsung.hardware.radio.channel.ISehRadioChannel: void send(byte[])>
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getSubscriberIdForUiccAppType(int,int,java.lang.String)>
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String[] getHomePlmns(int)>
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getKeyLifetime(int)>
<com.android.internal.telephony.IPhoneSubInfo: void clearMwiNotificationAndVoicemailCount(int,java.lang.String)>
<com.android.internal.telephony.IPhoneSubInfo: byte[] getPsismsc(java.lang.String)>
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getBtid(int)>
<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getGroupIdLevel2ForSubscriber(int,java.lang.String,java.lang.String)>
<com.android.internal.telephony.IPhoneSubInfo: boolean isGbaSupported()>
<com.android.internal.telephony.IPhoneSubInfo: byte[] getRand(int)>
<com.android.internal.telephony.IPhoneSubInfo: byte[] getPsismscWithPhoneId(int,java.lang.String)>
<com.android.internal.telephony.IPhoneSubInfo: void setPcoValue(int,int,java.lang.String)>
<com.android.internal.telephony.IPhoneSubInfo: boolean isGbaSupportedForSubscriber(int)>
<android.hardware.input.IMultiFingerGestureListener: void onMultiFingerGesture(int,int)>
<com.samsung.android.wifi.ISemMobileWipsService: void onScanResults(java.util.List)>
<com.samsung.android.wifi.ISemMobileWipsService: void sendMessage(android.os.Message)>
<com.samsung.android.wifi.ISemMobileWipsService: boolean checkMWIPS(java.lang.String,int)>
<com.samsung.android.wifi.ISemMobileWipsService: boolean setCurrentBss(java.lang.String,java.lang.String,java.lang.String,int,byte[])>
<com.samsung.android.wifi.ISemMobileWipsService: boolean registerCallback(com.samsung.android.wifi.ISemMobileWipsFramework)>
<com.samsung.android.wifi.ISemMobileWipsService: boolean registerPacketSender(com.samsung.android.wifi.ISemMobileWipsPacketSender)>
<com.samsung.android.wifi.ISemMobileWipsService: void broadcastBcnEventAbort(java.lang.String,int)>
<com.samsung.android.wifi.ISemMobileWipsService: boolean unregisterPacketSender(com.samsung.android.wifi.ISemMobileWipsPacketSender)>
<com.samsung.android.wifi.ISemMobileWipsService: void onDnsResponses(java.util.List,java.lang.String)>
<com.samsung.android.wifi.ISemMobileWipsService: void updateWifiChipInfo(java.lang.String,java.lang.String)>
<com.samsung.android.wifi.ISemMobileWipsService: void broadcastBcnIntervalEvent(java.lang.String,java.lang.String,java.lang.String,int,int,long,long)>
<com.samsung.android.wifi.ISemMobileWipsService: boolean unregisterCallback(com.samsung.android.wifi.ISemMobileWipsFramework)>
<android.telephony.ims.aidl.IImsSmsListener: void onSendSmsResponse(int,int,int,int,int,int)>
<android.telephony.ims.aidl.IImsSmsListener: void onReceiveSmsDeliveryReportAck(int,int)>
<android.app.IWallpaperManagerCallback: void onSemWallpaperChanged(int,int)>
<android.app.IWallpaperManagerCallback: void onSemMultipackApplied(int)>
<android.app.IWallpaperManagerCallback: void onSemWallpaperColorsAnalysisRequested(int,int)>
<android.app.IWallpaperManagerCallback: void onSemWallpaperColorsChanged(android.app.SemWallpaperColors,int,int)>
<android.app.IWallpaperManagerCallback: void onSemBackupStatusChanged(int,int,int)>
<com.samsung.android.ims.ISemEpdgListener: void onEpdgAvailable(int,boolean,int)>
<com.samsung.android.ims.ISemEpdgListener: void onEpdgShowPopup(int,int)>
<com.samsung.android.ims.ISemEpdgListener: void onIpsecConnection(int,java.lang.String,int,int)>
<com.samsung.android.ims.ISemEpdgListener: void onHandoverResult(int,int,int,java.lang.String)>
<com.samsung.android.ims.ISemEpdgListener: void onIpsecDisconnection(int,java.lang.String)>
<android.os.epic.IEpicManager: android.os.epic.IEpicObject Creates(int[])>
<android.os.epic.IEpicManager: android.os.epic.IEpicObject Create(int)>
<com.samsung.android.infoextraction.IKerykeionCallBack: void onCompleted(java.util.List)>
<android.hardware.face.IFaceService: boolean semIsEnrollSession()>
<android.hardware.face.IFaceService: void semResumeEnroll()>
<android.hardware.face.IFaceService: java.lang.String semGetInfo(int)>
<android.hardware.face.IFaceService: long semAuthenticate(android.os.IBinder,long,android.hardware.face.IFaceServiceReceiver,android.hardware.face.FaceAuthenticateOptions,android.os.Bundle,byte[])>
<android.hardware.face.IFaceService: int semGetRemainingLockoutTime(int)>
<android.hardware.face.IFaceService: boolean semIsSessionClose()>
<android.hardware.face.IFaceService: void semSessionOpen()>
<android.hardware.face.IFaceService: boolean semShouldRemoveTemplate()>
<android.hardware.face.IFaceService: void semPauseEnroll()>
<android.hardware.face.IFaceService: boolean semResetAuthenticationTimeout()>
<android.hardware.face.IFaceService: void semSessionClose()>
<android.hardware.face.IFaceService: long semAuthenticateExt(android.os.IBinder,long,android.hardware.face.IFaceServiceReceiver,android.hardware.face.FaceAuthenticateOptions,android.view.Surface,byte[])>
<android.hardware.face.IFaceService: void semPauseAuth()>
<android.hardware.face.IFaceService: boolean semIsFrameworkHandleLockout()>
<android.hardware.face.IFaceService: void semResumeAuth()>
<android.hardware.face.IFaceService: int semGetSecurityLevel(boolean)>
<com.samsung.android.sepunion.IGoodCatchManager: void registerListener(java.lang.String,java.lang.String[],com.samsung.android.sepunion.IGoodCatchDispatcher,android.os.IBinder)>
<com.samsung.android.sepunion.IGoodCatchManager: void update(java.lang.String[])>
<com.samsung.android.sepunion.IGoodCatchManager: java.util.List getSelectedSettingKey()>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceRemoteServiceCallback: void deliveryLastData(int[],float)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceRemoteServiceCallback: void deliveryRawdata(int[])>
<android.hardware.biometrics.IBiometricSensorReceiver: void onSemAuthenticationSucceeded(int,byte[],android.os.Bundle)>
<com.samsung.android.sepunion.IDeviceInfoManager: int getNumPendingIntentAsUser(int,java.lang.String,int)>
<com.samsung.android.sepunion.IDeviceInfoManager: void registerPendingIntentForIntentForAllUsers(android.content.IntentFilter,android.app.PendingIntent,java.lang.String,int)>
<com.samsung.android.sepunion.IDeviceInfoManager: void unregisterPendingIntentForIntentAsUser(android.content.IntentFilter,android.app.PendingIntent,java.lang.String,int)>
<com.samsung.android.sepunion.IDeviceInfoManager: void registerPendingIntentForUriAsUser(android.net.Uri,android.app.PendingIntent,java.lang.String,int)>
<com.samsung.android.sepunion.IDeviceInfoManager: void unregisterPendingIntentForUriAsUser(android.net.Uri,android.app.PendingIntent,java.lang.String,int)>
<com.samsung.android.sepunion.IDeviceInfoManager: void clearPendingIntentAsUser(java.lang.String,int)>
<com.samsung.android.sepunion.IDeviceInfoManager: void registerPendingIntentForIntentAsUser(android.content.IntentFilter,android.app.PendingIntent,java.lang.String,int)>
<com.samsung.android.sepunion.IDeviceInfoManager: void registerPendingIntentForCustomEventAsUser(java.lang.String,android.app.PendingIntent,android.os.Bundle,java.lang.String,int)>
<com.samsung.android.sepunion.IDeviceInfoManager: void registerPendingIntent(android.content.IntentFilter,android.app.PendingIntent,int,java.util.List,java.lang.String,int)>
<com.samsung.android.sepunion.IDeviceInfoManager: void unregisterPendingIntentForCustomEventAsUser(java.lang.String,android.app.PendingIntent,android.os.Bundle,java.lang.String,int)>
<com.samsung.android.sepunion.IDeviceInfoManager: void unregisterPendingIntent(android.content.IntentFilter,android.app.PendingIntent,java.lang.String,int)>
<com.samsung.android.cover.ISViewCoverBaseService: void onSViewCoverHide()>
<com.samsung.android.cover.ISViewCoverBaseService: boolean isCoverViewShowing()>
<com.samsung.android.cover.ISViewCoverBaseService: void onSViewCoverShow()>
<com.samsung.android.cover.ISViewCoverBaseService: void updateCoverState(com.samsung.android.cover.CoverState)>
<com.samsung.android.cover.ISViewCoverBaseService: int onCoverAppCovered(boolean)>
<com.samsung.android.cover.ISViewCoverBaseService: void onSystemReady()>
<android.app.IActivityClientController: void overridePendingTaskTransition(android.os.IBinder,java.lang.String,int,int)>
<android.app.IActivityClientController: boolean convertFromTranslucentOp(android.os.IBinder,boolean)>
<android.app.IActivityClientController: void adjustPopOverOptions(android.os.IBinder,int[],int[],android.graphics.Point[],int[])>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessagingResponse: void sendCdmaSmsResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,vendor.samsung.hardware.radio.messaging.SehSendSmsResult)>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessagingResponse: void getStoredMsgCountFromSimResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,vendor.samsung.hardware.radio.messaging.SehStoredMsgCount)>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessagingResponse: void sendSMSExpectMoreResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,vendor.samsung.hardware.radio.messaging.SehSendSmsResult)>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessagingResponse: void sendCdmaSmsExpectMoreResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,vendor.samsung.hardware.radio.messaging.SehSendSmsResult)>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessagingResponse: void writeSmsToSimResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,int)>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessagingResponse: void readSmsFromSimResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,vendor.samsung.hardware.radio.messaging.SehSimMsgArgs)>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessagingResponse: void getCellBroadcastConfigResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,vendor.samsung.hardware.radio.messaging.SehCbConfigArgs)>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessagingResponse: void getImsRegistrationStateResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,int[])>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessagingResponse: java.lang.String getInterfaceHash()>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessagingResponse: int getInterfaceVersion()>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessagingResponse: void sendSmsResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,vendor.samsung.hardware.radio.messaging.SehSendSmsResult)>
<android.os.IInstalld: boolean setDualDARPolicyDir(int,int,java.lang.String)>
<android.os.IInstalld: boolean getKnoxScanDir(java.lang.String,long,java.util.List)>
<android.os.IInstalld: boolean getCompressedStats(java.lang.String,long[])>
<android.os.IInstalld: boolean copyKnoxAppData(java.lang.String,int,java.lang.String,int,int)>
<android.os.IInstalld: boolean copyKnoxCancel(java.lang.String,long)>
<android.os.IInstalld: boolean hasDualDARPolicyRecursively(java.lang.String,java.util.List)>
<android.os.IInstalld: boolean setDualDARPolicyDirRecursively(int,int,java.lang.String)>
<android.os.IInstalld: boolean getDualDARLockstate()>
<android.os.IInstalld: long[] getKnoxFileInfo(java.lang.String)>
<android.os.IInstalld: void compressFile(java.lang.String,boolean)>
<android.os.IInstalld: int copyKnoxChunks(java.lang.String,int,java.lang.String,int,int,long,long,long)>
<android.os.IInstalld: boolean createEncAppData(java.lang.String,int,int,int)>
<android.os.IInstalld: void scanApkStats(java.lang.String,int)>
<android.os.IInstalld: boolean removeEncUserDir(int)>
<android.os.IInstalld: boolean removeNotTargetedPreloadApksIfNeeded()>
<android.os.IInstalld: boolean compileLayouts(java.lang.String,java.lang.String,java.lang.String,int)>
<android.os.IInstalld: boolean hasDualDARPolicy(java.lang.String)>
<android.os.IInstalld: boolean deleteKnoxFile(java.lang.String)>
<android.os.IInstalld: boolean setEviction(int,boolean)>
<android.os.IInstalld: boolean removeEncPkgDir(int,java.lang.String)>
<android.os.IInstalld: boolean migrateSdpDb(java.lang.String,int)>
<com.samsung.android.wifi.ISemWifiApSmartCallback: void onStateChanged(int,java.lang.String)>
<android.app.IActivityTaskManager: int getOrientationControlPolicy(int,java.lang.String)>
<android.app.IActivityTaskManager: void setCutoutPolicy(int,java.lang.String,int)>
<android.app.IActivityTaskManager: int getBoundsCompatAlignment()>
<android.app.IActivityTaskManager: java.util.List getCoverLauncherAvailableAppList(int)>
<android.app.IActivityTaskManager: void setOrientationControlDefault(boolean)>
<android.app.IActivityTaskManager: java.lang.String getScpmVersion()>
<android.app.IActivityTaskManager: void setCustomSplashScreenTheme(java.lang.String,java.lang.String,int)>
<android.app.IActivityTaskManager: void setApplockLockedAppsPackage(java.lang.String)>
<android.app.IActivityTaskManager: void setAppLockedUnLockPackage(java.lang.String)>
<android.app.IActivityTaskManager: void setAppLockedVerifying(java.lang.String,boolean)>
<android.app.IActivityTaskManager: void setDisallowWhenLandscape(boolean)>
<android.app.IActivityTaskManager: java.util.Map getCoverLauncherEnabledAppListByType(int,int)>
<android.app.IActivityTaskManager: void setApplockType(int)>
<android.app.IActivityTaskManager: void setUseLetterbox(boolean)>
<android.app.IActivityTaskManager: java.lang.String getAppLockedCheckAction()>
<android.app.IActivityTaskManager: boolean startDreamActivity(android.content.Intent)>
<android.app.IActivityTaskManager: int getApplockType()>
<android.app.IActivityTaskManager: java.lang.String getSsecureHiddenAppsPackages()>
<android.app.IActivityTaskManager: void resetUserPackageSettings(int,int)>
<android.app.IActivityTaskManager: void setApplockEnabled(boolean)>
<android.app.IActivityTaskManager: void clearAppLockedUnLockedApp()>
<android.app.IActivityTaskManager: void registerRemoteTransitionForNextActivityStart(java.lang.String,android.view.RemoteAnimationAdapter,android.os.IBinder,android.window.RemoteTransition)>
<android.app.IActivityTaskManager: void startActivityForCoverLauncherAsUser(android.content.Intent,java.lang.String,int)>
<android.app.IActivityTaskManager: void sendSaLoggingBroadcastForSetting(java.lang.String,java.lang.String,java.lang.String)>
<android.app.IActivityTaskManager: boolean isAppLockedVerifying(java.lang.String)>
<android.app.IActivityTaskManager: void setSsecureHiddenAppsPackages(java.lang.String)>
<android.app.IActivityTaskManager: boolean hasWallpaperBackgroundForLetterbox(int)>
<android.app.IActivityTaskManager: void registKeyEventListener(com.samsung.android.multiwindow.IKeyEventListener)>
<android.app.IActivityTaskManager: android.window.TaskSnapshot getTaskSnapshot(int,boolean,boolean)>
<android.app.IActivityTaskManager: boolean removeTaskWithFlags(int,int)>
<android.app.IActivityTaskManager: java.util.List getAppLockedPackageList()>
<android.app.IActivityTaskManager: int setCoverLauncherPackageDisabled(java.lang.String,int)>
<android.app.IActivityTaskManager: void startActivityForCoverLauncher(android.content.Intent,java.lang.String)>
<android.app.IActivityTaskManager: void startAppLockService(android.os.IBinder,android.content.Intent,boolean,java.lang.String)>
<android.app.IActivityTaskManager: com.samsung.android.core.IFoldStarManager getFoldStarManagerService()>
<android.app.IActivityTaskManager: void startActivityForDexRestart(int)>
<android.app.IActivityTaskManager: void sendSaLoggingBroadcast(java.lang.String,java.lang.String,java.lang.String,long,java.util.Map)>
<android.app.IActivityTaskManager: boolean isAppLockedPackage(java.lang.String)>
<android.app.IActivityTaskManager: boolean isApplockEnabled()>
<android.app.IActivityTaskManager: void setOrientationControlPolicy(int,java.lang.String,int)>
<android.app.IActivityTaskManager: boolean clearRecentTasks(int)>
<android.app.IActivityTaskManager: java.lang.String getAppLockedLockType()>
<android.app.IActivityTaskManager: void setApplockLockedAppsClass(java.lang.String)>
<android.app.IActivityTaskManager: java.lang.String getApplockLockedAppsClass()>
<android.app.IActivityTaskManager: int getCutoutPolicy(int,java.lang.String)>
<android.app.IActivityTaskManager: void requestWaitingForOccluding(int)>
<android.app.IActivityTaskManager: boolean isPackageEnabledForCoverLauncher(java.lang.String,int)>
<android.app.IActivityTaskManager: java.util.Map getCoverLauncherEnabledAppList(int)>
<android.app.IActivityTaskManager: int setCoverLauncherPackageEnabled(java.lang.String,int)>
<android.app.IActivityTaskManager: android.graphics.Bitmap getResumedTaskThumbnail(int)>
<android.app.IActivityTaskManager: java.lang.String getApplockLockedAppsPackage()>
<android.app.IActivityTaskManager: com.samsung.android.multiwindow.IMultiTaskingBinder getMultiTaskingBinder()>
<android.app.IActivityTaskManager: void setBoundsCompatAlignment(int)>
<com.samsung.android.camera.iris.IIrisServiceReceiver: void onIRImage(long,byte[],int,int)>
<com.samsung.android.camera.iris.IIrisServiceReceiver: void onError(long,int)>
<com.samsung.android.camera.iris.IIrisServiceReceiver: void onRemoved(long,int,int)>
<com.samsung.android.camera.iris.IIrisServiceReceiver: void onAcquired(long,int)>
<com.samsung.android.camera.iris.IIrisServiceReceiver: void onAuthenticationFailed(long)>
<com.samsung.android.camera.iris.IIrisServiceReceiver: void onAuthenticationSucceeded(long,com.samsung.android.camera.iris.Iris,byte[])>
<com.samsung.android.camera.iris.IIrisServiceReceiver: void onEnrollResult(long,int,int,int)>
<com.android.internal.view.IDragAndDropPermissions: int getFlags()>
<com.samsung.android.cocktailbar.ICocktailBarStateCallback: void onCocktailBarStateChanged(com.samsung.android.cocktailbar.CocktailBarStateInfo)>
<com.samsung.android.ims.SemSimMobStatusListener: void onSimMobilityStateChanged(boolean)>
<com.samsung.android.cocktailbar.ICocktailBarShowCallback: void onShown(android.os.IBinder)>
<vendor.samsung.hardware.radio.sim.ISehRadioSimIndication: void simPhonebookReadyIndication(int)>
<vendor.samsung.hardware.radio.sim.ISehRadioSimIndication: void stkCallControlResultIndication(int,java.lang.String)>
<vendor.samsung.hardware.radio.sim.ISehRadioSimIndication: void stkSmsSendResultIndication(int,int)>
<vendor.samsung.hardware.radio.sim.ISehRadioSimIndication: void releaseCompleteMessageIndication(int,vendor.samsung.hardware.radio.sim.SehSsReleaseComplete)>
<vendor.samsung.hardware.radio.sim.ISehRadioSimIndication: int getInterfaceVersion()>
<vendor.samsung.hardware.radio.sim.ISehRadioSimIndication: java.lang.String getInterfaceHash()>
<vendor.samsung.hardware.radio.sim.ISehRadioSimIndication: void phonebookInitCompleteIndication(int)>
<vendor.samsung.hardware.radio.sim.ISehRadioSimIndication: void simCountMismatchedIndication(int,int)>
<vendor.samsung.hardware.radio.sim.ISehRadioSimIndication: void simSwapStateChangedIndication(int,int)>
<vendor.samsung.hardware.radio.sim.ISehRadioSimIndication: void sapNotify(int,byte[])>
<vendor.samsung.hardware.radio.sim.ISehRadioSimIndication: void simOnOffStateChangedNotify(int,int)>
<com.samsung.android.media.IResourceManagerObserverClient: void notify(int,int,int,com.samsung.android.media.MediaResourceNotifyInfoParcel)>
<com.samsung.android.knox.dar.ddar.IDualDarAuthProgressCallback: void onInnerLayerUnlocked()>
<com.samsung.android.knox.dar.ddar.IDualDarAuthProgressCallback: void onInnerLayerUnlockFailed()>
<android.app.INotificationManager: void setAppBypassDnd(java.lang.String,int,boolean)>
<android.app.INotificationManager: void enqueueTextToastForDex(java.lang.String,android.os.IBinder,java.lang.CharSequence,int,boolean,int,android.app.ITransientNotificationCallback,java.lang.String,int)>
<android.app.INotificationManager: void setReminderEnabled(int,boolean,java.util.List)>
<android.app.INotificationManager: void removeEdgeNotification(java.lang.String,int,android.os.Bundle,int)>
<android.app.INotificationManager: boolean isSubDisplayNotificationAllowed(java.lang.String,int)>
<android.app.INotificationManager: boolean removeWearableAppFromList(int,java.lang.String)>
<android.app.INotificationManager: int getBlockedAppCount(int)>
<android.app.INotificationManager: void cancelNotificationByGroupKey(java.lang.String,java.lang.String,int,int,java.lang.String,java.lang.String)>
<android.app.INotificationManager: void unregisterEdgeLightingListener(android.os.IBinder,java.lang.String)>
<android.app.INotificationManager: boolean isPackageEnabled(java.lang.String,int)>
<android.app.INotificationManager: void cancelNotificationByEdge(java.lang.String,java.lang.String,int,int,java.lang.String)>
<android.app.INotificationManager: int getLockScreenNotificationVisibilityForPackage(java.lang.String,int)>
<android.app.INotificationManager: void updateCancelEvent(int,java.lang.String,boolean)>
<android.app.INotificationManager: boolean canAppBypassDnd(java.lang.String,int)>
<android.app.INotificationManager: java.util.List getNotificationHistoryDataForPackage(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,int)>
<android.app.INotificationManager: java.util.List getWearableAppList(int)>
<android.app.INotificationManager: void updateEdgeLightingPolicy(java.lang.String,com.samsung.android.edge.EdgeLightingPolicy)>
<android.app.INotificationManager: void setNotificationAlertsEnabledForPackage(java.lang.String,int,boolean)>
<android.app.INotificationManager: boolean dispatchDelayedWakelockAndBlocked(int,java.lang.String,java.lang.String,int)>
<android.app.INotificationManager: boolean isEdgeLightingAllowed(java.lang.String,int)>
<android.app.INotificationManager: boolean isReminderEnabled(java.lang.String,int)>
<android.app.INotificationManager: void stopEdgeLighting(java.lang.String,android.os.IBinder)>
<android.app.INotificationManager: boolean setWearableAppList(int,java.util.List)>
<android.app.INotificationManager: boolean isEdgeLightingNotificationAllowed(java.lang.String)>
<android.app.INotificationManager: void registerNotificationListener(android.content.ComponentName,int,boolean)>
<android.app.INotificationManager: boolean addWearableAppToList(int,java.lang.String)>
<android.app.INotificationManager: android.app.NotificationHistory getNotificationHistoryForPackage(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,int)>
<android.app.INotificationManager: boolean dispatchDelayedWakeUpAndBlocked(int,java.lang.String,java.lang.String)>
<android.app.INotificationManager: void unbindEdgeLightingService(android.os.IBinder,java.lang.String)>
<android.app.INotificationManager: void setAllowEdgeLighting(java.lang.String,int,boolean)>
<android.app.INotificationManager: boolean isAlertsAllowed(java.lang.String,int,java.lang.String,int)>
<android.app.INotificationManager: void bindEdgeLightingService(android.os.IBinder,int,android.content.ComponentName)>
<android.app.INotificationManager: int getAllNotificationListenersCount()>
<android.app.INotificationManager: void disable(int,java.lang.String,android.os.IBinder)>
<android.app.INotificationManager: void registerEdgeLightingListener(android.os.IBinder,android.content.ComponentName)>
<android.app.INotificationManager: void setAllowNotificationPopUpForPackage(java.lang.String,int,boolean)>
<android.app.INotificationManager: void updateNotificationChannels(java.lang.String,android.content.pm.ParceledListSlice)>
<android.app.INotificationManager: void startEdgeLighting(java.lang.String,com.samsung.android.edge.SemEdgeLightingInfo,android.os.IBinder)>
<android.app.INotificationManager: void enqueueEdgeNotification(java.lang.String,java.lang.String,int,android.os.Bundle,int)>
<android.app.INotificationManager: int getEdgeLightingState()>
<android.app.INotificationManager: boolean getNotificationAlertsEnabledForPackage(java.lang.String,int)>
<android.app.INotificationManager: void setAllowSubDisplayNotification(java.lang.String,int,boolean)>
<android.app.INotificationManager: void setReminderEnabledForPackage(java.lang.String,int,boolean)>
<android.app.INotificationManager: void setRestoreBlockListForSS(java.util.List)>
<android.app.INotificationManager: void updateEdgeLightingPackageList(java.lang.String,java.util.List)>
<android.app.INotificationManager: void resetDefaultAllowEdgeLighting()>
<android.app.INotificationManager: int getAppsBypassingDndCount(int)>
<android.app.INotificationManager: void disableEdgeLightingNotification(java.lang.String,boolean)>
<android.app.INotificationManager: void setLockScreenNotificationVisibilityForPackage(java.lang.String,int,int)>
<android.app.INotificationManager: void addReplyHistory(int,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>
<android.app.INotificationManager: boolean requestListenerHintsForWearable(int)>
<android.app.INotificationManager: void enqueueToastForDex(java.lang.String,android.os.IBinder,android.app.ITransientNotification,int,boolean,int,java.lang.String,int)>
<android.app.INotificationManager: boolean isAllowNotificationPopUpForPackage(java.lang.String,int)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: int getTemperature(int)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: boolean setThermalControlFlag(int)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: int getThermalThrottlingDelta()>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: boolean setThermalThrottlingDelta(int)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: int getRemainingUsageTime(int)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: void destroyGameSdkMaxlock()>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: boolean addLowModeApps(java.util.List)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: void logAction(java.lang.String,int,java.util.List)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: boolean setThermalThrottlingDeltaWithPackageName(java.lang.String,int)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: java.util.List getCoolingDevices()>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: boolean isDownLoadingForUid(int)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: int getRemainingUsageTimeWithSettings(int,int)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: int getSupportedThermalThrottlingDelta()>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: java.util.List getProcessUsageStats(long,long)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: void logActionWithSource(java.lang.String,int,int)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: void updateGameSdkOperation(boolean,android.os.IBinder)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: int getThermalControlFlag()>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: java.util.List getLowModeApps()>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: java.util.List getTemperatures()>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: boolean addHeavyLoadApps(java.util.List)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: java.util.List getBatteryEventHistory(long,long,int)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: int getSupportedHistoryTypes()>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: void initializeSiopScenario(android.os.Bundle,android.os.IBinder)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: boolean addLowRefreshRateApps(java.util.List)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: java.lang.String getActiveSensorList()>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: int getRUT(int,java.lang.String)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: java.util.List getThermalStats(long,long)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: int getSsrmStatus(int)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: java.util.List getHeavyLoadApps()>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: void registerCallback(android.os.IThermalEventListener)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: void acquireSiop(java.lang.String)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: int[] getAllTemperatures(int)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: void releaseGameSdkMaxlock()>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: void initGameSdkMaxlock(android.os.IBinder,android.os.IBinder)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: java.util.List getBatteryStats(int,long,long,boolean)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: java.util.List getNetworkUsageStats(long,long)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: float[] supportVRTemperaturesInformation(java.lang.String,int,int)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: boolean isGameSupportLRP()>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: void logActionWithPkg(java.lang.String,int,java.lang.String,java.util.List)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: void terminateSiopScenario(java.lang.String)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: java.util.List getLowRefreshRateApps()>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: void logAnomaly(android.os.Bundle)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: void acquireGameSdkMaxlock(int,int)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: void sendCommand(java.lang.String,java.lang.String)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: boolean setAnomalyConfig(android.app.PendingIntent)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: java.util.List getOverheatReason(long,long)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: void releaseSiop(java.lang.String)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: android.os.Bundle getGameSiopInfo()>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: void updateSpaOperation(boolean,android.os.IBinder)>
<com.sec.android.sdhms.ISamsungDeviceHealthManager: int getLRTemperature()>
<com.samsung.android.cover.ICoverManagerCallback: java.lang.String getListenerInfo()>
<com.samsung.android.cover.ICoverManagerCallback: void coverCallback(com.samsung.android.cover.CoverState)>
<android.os.IZtdListener: void onSysDataTraced(int,int,java.lang.String[])>
<android.os.IZtdListener: void onUnauthorizedAccessDetected(int,int,int,long,int,int,java.lang.String,java.lang.String)>
<android.telephony.ims.aidl.IImsMmTelFeature: void sendDtmfEvent(int,java.lang.String)>
<android.telephony.ims.aidl.IImsMmTelFeature: void notifyEpsFallbackResult(int,int)>
<android.telephony.ims.aidl.IImsMmTelFeature: void triggerAutoConfigurationForApp(int)>
<android.telephony.ims.aidl.IImsMmTelFeature: void setTtyMode(int)>
<android.telephony.ims.aidl.IImsMmTelFeature: boolean isCmcEmergencyCallSupported(int)>
<android.telephony.ims.aidl.IImsMmTelFeature: void setVideoCrtAudio(int,boolean)>
<android.telephony.ims.aidl.IImsMmTelFeature: void sendPublishDialog(int,com.android.internal.telephony.PublishDialog)>
<android.telephony.ims.aidl.IImsMmTelFeature: int getInitialCallNetworkType(int)>
<android.telephony.ims.aidl.IImsMmTelFeature: void setSmsc(java.lang.String)>
<android.telephony.ims.aidl.IImsMmTelFeature: void initImsSmsImplAdapter()>
<android.telephony.ims.aidl.IImsMmTelFeature: int stopLocalRingBackTone()>
<android.telephony.ims.aidl.IImsMmTelFeature: void setRetryCount(int,int)>
<android.telephony.ims.aidl.IImsMmTelFeature: void changeAudioPath(int,int)>
<android.telephony.ims.aidl.IImsMmTelFeature: java.lang.String getTrn(java.lang.String,java.lang.String)>
<android.telephony.ims.aidl.IImsMmTelFeature: int startLocalRingBackTone(int,int,int)>
<android.nfc.INfcAdapterExtras: android.os.Bundle getAtr(java.lang.String)>
<android.nfc.INfcAdapterExtras: android.os.Bundle getAtrWithPackageName(java.lang.String,java.lang.String)>
<android.nfc.INfcAdapterExtras: android.os.Bundle transceiveWithPackageName(java.lang.String,byte[],java.lang.String)>
<android.nfc.INfcAdapterExtras: android.os.Bundle openWithPackageName(java.lang.String,android.os.IBinder,java.lang.String)>
<android.nfc.INfcAdapterExtras: android.os.Bundle closeWithPackageName(java.lang.String,android.os.IBinder,java.lang.String)>
<com.samsung.android.service.sats.ISatsService: java.lang.String executePseudoDrkAtCommnd(java.lang.String)>
<com.samsung.android.chimera.IChimera: java.util.List getAvailableMemInfo(long,long)>
<com.android.ims.internal.IImsUt: boolean isUssdEnabled()>
<com.samsung.android.knox.dar.IDarManagerService: int getAvailableUserId()>
<com.samsung.android.knox.dar.IDarManagerService: int getMainUserId(int)>
<com.samsung.android.knox.dar.IDarManagerService: boolean setDualDarInfo(int,int)>
<com.samsung.android.knox.dar.IDarManagerService: java.util.List getPackageListForDualDarPolicy(java.lang.String)>
<com.samsung.android.knox.dar.IDarManagerService: int startTracing(int,int,android.os.Bundle,com.samsung.android.knox.zt.devicetrust.IEndpointMonitorListener)>
<com.samsung.android.knox.dar.IDarManagerService: int getInnerAuthUserId(int)>
<com.samsung.android.knox.dar.IDarManagerService: boolean isSensitive(java.lang.String)>
<com.samsung.android.knox.dar.IDarManagerService: boolean resetPasswordWithToken(java.lang.String,byte[],int)>
<com.samsung.android.knox.dar.IDarManagerService: int getPasswordMinimumLengthForInner()>
<com.samsung.android.knox.dar.IDarManagerService: void registerClient(int,com.samsung.android.knox.dar.sdp.ISdpListener)>
<com.samsung.android.knox.dar.IDarManagerService: boolean isDefaultPathUser(int)>
<com.samsung.android.knox.dar.IDarManagerService: double getSupportedSDKVersion()>
<com.samsung.android.knox.dar.IDarManagerService: void startMonitoringFiles(int,int[],java.util.List,java.util.List,android.os.IZtdListener)>
<com.samsung.android.knox.dar.IDarManagerService: boolean isKnoxKeyInstallable()>
<com.samsung.android.knox.dar.IDarManagerService: int isLicensed()>
<com.samsung.android.knox.dar.IDarManagerService: int exists(java.lang.String)>
<com.samsung.android.knox.dar.IDarManagerService: int unregisterListener(java.lang.String,com.samsung.android.knox.dar.sdp.ISdpListener)>
<com.samsung.android.knox.dar.IDarManagerService: void systemReady()>
<com.samsung.android.knox.dar.IDarManagerService: boolean setSensitive(int,java.lang.String)>
<com.samsung.android.knox.dar.IDarManagerService: boolean setResetPasswordToken(byte[],int)>
<com.samsung.android.knox.dar.IDarManagerService: void stopMonitoringFiles(int)>
<com.samsung.android.knox.dar.IDarManagerService: int removeEngine(java.lang.String)>
<com.samsung.android.knox.dar.IDarManagerService: int createEncPkgDir(int,java.lang.String)>
<com.samsung.android.knox.dar.IDarManagerService: int disallow(java.lang.String,java.lang.String)>
<com.samsung.android.knox.dar.IDarManagerService: boolean isInnerAuthRequired(int)>
<com.samsung.android.knox.dar.IDarManagerService: java.util.List getBlockedClearablePackages(int)>
<com.samsung.android.knox.dar.IDarManagerService: int migrate(java.lang.String)>
<com.samsung.android.knox.dar.IDarManagerService: int addEngine(com.samsung.android.knox.sdp.core.SdpCreationParam,java.lang.String,java.lang.String)>
<com.samsung.android.knox.dar.IDarManagerService: void onDeviceOwnerLocked(int)>
<com.samsung.android.knox.dar.IDarManagerService: int lock(java.lang.String)>
<com.samsung.android.knox.dar.IDarManagerService: boolean isSdpSupportedSecureFolder(int)>
<com.samsung.android.knox.dar.IDarManagerService: void onBiometricsAuthenticated(int)>
<com.samsung.android.knox.dar.IDarManagerService: void unregisterClient(int,com.samsung.android.knox.dar.sdp.ISdpListener)>
<com.samsung.android.knox.dar.IDarManagerService: int registerListener(java.lang.String,com.samsung.android.knox.dar.sdp.ISdpListener)>
<com.samsung.android.knox.dar.IDarManagerService: void setMainUserId(int,int)>
<com.samsung.android.knox.dar.IDarManagerService: int saveTokenIntoTrusted(java.lang.String,java.lang.String)>
<com.samsung.android.knox.dar.IDarManagerService: int unlockViaTrusted(java.lang.String,java.lang.String)>
<com.samsung.android.knox.dar.IDarManagerService: boolean isSdpSupported()>
<com.samsung.android.knox.dar.IDarManagerService: int deleteToeknFromTrusted(java.lang.String)>
<com.samsung.android.knox.dar.IDarManagerService: int stopTracing(int,int)>
<com.samsung.android.knox.dar.IDarManagerService: boolean isResetPasswordTokenActive(int)>
<com.samsung.android.knox.dar.IDarManagerService: boolean clearResetPasswordToken(int)>
<com.samsung.android.knox.dar.IDarManagerService: void startMonitoringDomains(int,int[],java.util.List,android.os.IZtdListener)>
<com.samsung.android.knox.dar.IDarManagerService: void setInnerAuthUserId(int,int)>
<com.samsung.android.knox.dar.IDarManagerService: int allow(java.lang.String,java.lang.String)>
<com.samsung.android.knox.dar.IDarManagerService: void addBlockedClearablePackages(int,java.lang.String)>
<com.samsung.android.knox.dar.IDarManagerService: int reserveUserIdForSystem()>
<com.samsung.android.knox.dar.IDarManagerService: com.samsung.android.knox.sdp.core.SdpEngineInfo getEngineInfo(java.lang.String)>
<com.samsung.android.knox.dar.IDarManagerService: boolean isDarSupported()>
<com.samsung.android.knox.dar.IDarManagerService: int getReservedUserIdForSystem()>
<com.samsung.android.knox.dar.IDarManagerService: boolean isSDPEnabled(int)>
<com.samsung.android.knox.dar.IDarManagerService: int resetPassword(java.lang.String,java.lang.String,java.lang.String)>
<com.samsung.android.knox.dar.IDarManagerService: int setPassword(java.lang.String,java.lang.String)>
<com.samsung.android.knox.dar.IDarManagerService: int unlock(java.lang.String,java.lang.String)>
<com.samsung.android.knox.dar.IDarManagerService: void stopMonitoringDomains(int)>
<com.samsung.android.knox.dar.IDarManagerService: boolean isDeviceRootKeyInstalled()>
<com.samsung.android.ims.SemAutoConfigListener: void onVerificationCodeNeeded()>
<com.samsung.android.ims.SemAutoConfigListener: void onIidTokenNeeded()>
<com.samsung.android.ims.SemAutoConfigListener: void onAutoConfigurationCompleted(boolean)>
<com.samsung.android.ims.SemAutoConfigListener: void onMsisdnNumberNeeded()>
<android.companion.virtual.IVirtualDeviceManager: android.companion.virtual.IVirtualDevice createVirtualDevice(android.os.IBinder,java.lang.String,int,android.companion.virtual.VirtualDeviceParams,android.companion.virtual.IVirtualDeviceActivityListener,android.companion.virtual.IVirtualDeviceSoundEffectListener)>
<android.content.pm.IShortcutService: void restoreBitmapsFromBackupService(android.os.ParcelFileDescriptor,java.lang.String,java.lang.String)>
<android.content.pm.IShortcutService: java.lang.String[] getBitmapPathList(int)>
<android.content.pm.IShortcutService: void handleLocaleChanged(boolean)>
<android.content.pm.IShortcutService: void requestPinShortcutAsDisplay(java.lang.String,android.content.pm.ShortcutInfo,android.content.IntentSender,int,int,com.android.internal.infra.AndroidFuture)>
<android.content.pm.IShortcutService: com.android.internal.os.IParcelFileDescriptorFactory getShortcutBitmapsFileDescriptor()>
<android.content.pm.IShortcutService: android.os.ParcelFileDescriptor getBackupShortcut(int)>
<android.content.pm.IShortcutService: int applyRestoreSmartSwitch(android.os.ParcelFileDescriptor,int)>
<com.samsung.android.isrb.IIsrbManager: void setFakeTime()>
<com.samsung.android.isrb.IIsrbManager: void setIsrbEnable(boolean)>
<com.samsung.android.isrb.IIsrbManager: boolean isBootCompleteState()>
<android.media.IResourceManagerClient: void startWatchingMode()>
<android.media.IResourceManagerClient: void stopWatchingMode()>
<android.media.IResourceManagerClient: int getCodecState()>
<android.service.persistentdata.IPersistentDataBlockService: boolean isEnabled()>
<android.hardware.biometrics.ITestSession: void notifyVendorError(int,int)>
<android.hardware.biometrics.ITestSession: void notifyVendorAcquired(int,int)>
<com.samsung.android.desktopmode.IDesktopModeListener: void onDesktopModeStateChanged(com.samsung.android.desktopmode.SemDesktopModeState)>
<android.media.IResourceManagerService: float getRemainedFrameRateFor(java.lang.String,int,int)>
<android.media.IResourceManagerService: float getSupportedFrameRateFor(java.lang.String,int,int)>
<android.media.IResourceManagerService: void setCodecState(int,int,long,android.media.IResourceManagerClient,int)>
<android.media.IResourceManagerService: com.samsung.android.media.IResourceManagerObserver createResourceObserver(com.samsung.android.media.IResourceManagerObserverClient)>
<android.media.IResourceManagerService: void addMediaInfo(int,int,long,android.media.IResourceManagerClient,com.samsung.android.media.MediaInfoParcel[])>
<android.media.IResourceManagerService: void sendCapacityError(int,int,long,android.media.IResourceManagerClient,com.samsung.android.media.MediaInfoParcel[])>
<com.samsung.android.knox.zt.IZeroTrustListener: void onEventGeneralized(int,java.util.Map)>
<com.samsung.android.knox.zt.IZeroTrustListener: void onEvent(int,android.os.Bundle)>
<com.samsung.android.knox.zt.IZeroTrustListener: void onEventSimplified(int,java.lang.String)>
<com.samsung.android.gamesdk.IGameSDKService: boolean initGameSDK()>
<com.samsung.android.gamesdk.IGameSDKService: java.lang.String getVersion()>
<com.samsung.android.gamesdk.IGameSDKService: boolean setCpuBoostMode(int)>
<com.samsung.android.gamesdk.IGameSDKService: int getGPULevelMax()>
<com.samsung.android.gamesdk.IGameSDKService: int isPMModeEnable()>
<com.samsung.android.gamesdk.IGameSDKService: double getHighPrecisionSkinTempLevel()>
<com.samsung.android.gamesdk.IGameSDKService: int getGpuJTLevel()>
<com.samsung.android.gamesdk.IGameSDKService: boolean initGameSDKWithJsonData(java.lang.String,java.lang.String)>
<com.samsung.android.gamesdk.IGameSDKService: boolean setLevelWithScene(java.lang.String,int,int)>
<com.samsung.android.gamesdk.IGameSDKService: int setFreqLevels(int,int)>
<com.samsung.android.gamesdk.IGameSDKService: int getClusterInfo()>
<com.samsung.android.gamesdk.IGameSDKService: double getGpuLoad()>
<com.samsung.android.gamesdk.IGameSDKService: int getCpuLevelCurrent()>
<com.samsung.android.gamesdk.IGameSDKService: int getCurrentRefreshRate()>
<com.samsung.android.gamesdk.IGameSDKService: double getFrameworkFPS()>
<com.samsung.android.gamesdk.IGameSDKService: int getTempLevel()>
<com.samsung.android.gamesdk.IGameSDKService: int getGpuLevelCurrent()>
<com.samsung.android.gamesdk.IGameSDKService: boolean initGameSDKWithVersion(java.lang.String)>
<com.samsung.android.gamesdk.IGameSDKService: void resetRefreshRate()>
<com.samsung.android.gamesdk.IGameSDKService: void setRefreshRate(int)>
<com.samsung.android.gamesdk.IGameSDKService: boolean setGpuBoostMode(int)>
<com.samsung.android.gamesdk.IGameSDKService: int getCPULevelMax()>
<com.samsung.android.gamesdk.IGameSDKService: int getSkinTempLevel()>
<com.samsung.android.gamesdk.IGameSDKService: double getGpuFrameTime()>
<com.samsung.android.gamesdk.IGameSDKService: boolean setGameSDKStateListener(com.samsung.android.gamesdk.IGameSDKStateListener)>
<com.samsung.android.gamesdk.IGameSDKService: double getCpuLoad()>
<com.samsung.android.gamesdk.IGameSDKService: boolean isGameSDKVrrSupported()>
<com.samsung.android.gamesdk.IGameSDKService: int[] getSupportedRefreshRates()>
<com.samsung.android.gamesdk.IGameSDKService: int getCpuJTLevel()>
<com.samsung.android.gamesdk.IGameSDKService: boolean isPackageInWhiteList(java.lang.String)>
<com.samsung.android.gamesdk.IGameSDKService: boolean setGameSDKListener(com.samsung.android.gamesdk.IGameSDKListener)>
<com.samsung.android.gamesdk.IGameSDKService: boolean setDisableTMLevel(int)>
<com.samsung.android.gamesdk.IGameSDKService: void finalGameSDK(java.lang.String)>
<com.samsung.android.gamesdk.IGameSDKService: double getPrevFrameworkFPS()>
<com.samsung.android.gamesdk.IGameSDKService: boolean registerDebugBridgePid(int)>
<com.android.server.IRealTimeTokenService: int checkTokenInfoExpiry(long)>
<com.android.server.IRealTimeTokenService: int registerTokenInfo(long,long)>
<com.android.server.IRealTimeTokenService: int unregisterTokenInfo(long)>
<com.android.server.IRealTimeTokenService: int unregisterAllTokenInfo()>
<android.location.IGnssMeasurementsListener: void onGnssMeasurementsReceived(android.location.GnssMeasurementsEvent)>
<android.location.IGnssMeasurementsListener: void onStatusChanged(int)>
<com.samsung.android.sepunion.IPluginManager: com.samsung.android.cover.CoverState getCoverState()>
<com.samsung.android.cover.ICoverManager: void registerCallback(android.os.IBinder,android.content.ComponentName)>
<com.samsung.android.cover.ICoverManager: boolean requestCoverAuthentication(android.os.IBinder,android.content.ComponentName)>
<com.samsung.android.cover.ICoverManager: void sendPowerKeyToCover()>
<com.samsung.android.cover.ICoverManager: boolean setFotaInProgress(boolean,android.os.IBinder,android.content.ComponentName)>
<com.samsung.android.cover.ICoverManager: boolean enableLcdOffByCover(android.os.IBinder,android.content.ComponentName)>
<com.samsung.android.cover.ICoverManager: void sendSystemEvent(android.os.Bundle)>
<com.samsung.android.cover.ICoverManager: void sendDataToNfcLedCover(int,byte[])>
<com.samsung.android.cover.ICoverManager: boolean unregisterNfcTouchListenerCallback(android.os.IBinder)>
<com.samsung.android.cover.ICoverManager: boolean unregisterCallbackForExternal(android.os.IBinder)>
<com.samsung.android.cover.ICoverManager: void registerListenerCallbackForExternal(android.os.IBinder,android.content.ComponentName,int)>
<com.samsung.android.cover.ICoverManager: int onCoverAppCovered(boolean)>
<com.samsung.android.cover.ICoverManager: void sendDataToCover(int,byte[])>
<com.samsung.android.cover.ICoverManager: boolean unregisterCallback(android.os.IBinder)>
<com.samsung.android.cover.ICoverManager: void addLedNotification(android.os.Bundle)>
<com.samsung.android.cover.ICoverManager: boolean disableLcdOffByCover(android.os.IBinder,android.content.ComponentName)>
<com.samsung.android.cover.ICoverManager: boolean isCoverManagerDisabled()>
<com.samsung.android.cover.ICoverManager: void registerNfcTouchListenerCallback(int,android.os.IBinder,android.content.ComponentName)>
<com.samsung.android.cover.ICoverManager: com.samsung.android.cover.CoverState getCoverStateForExternal()>
<com.samsung.android.cover.ICoverManager: void removeLedNotification(android.os.Bundle)>
<com.samsung.android.cover.ICoverManager: com.samsung.android.cover.CoverState getCoverState()>
<com.samsung.android.cover.ICoverManager: void disableCoverManager(boolean,android.os.IBinder,java.lang.String)>
<com.samsung.android.cover.ICoverManager: int getVersion()>
<com.samsung.android.cover.ICoverManager: void registerListenerCallback(android.os.IBinder,android.content.ComponentName,int)>
<com.samsung.android.cover.ICoverManager: boolean getCoverSwitchState()>
<com.samsung.android.app.usage.IUsageStatsWatcher: void noteStopComponent(android.content.ComponentName,android.content.Intent,int,int)>
<com.samsung.android.app.usage.IUsageStatsWatcher: void notePauseComponent(android.content.ComponentName,android.content.Intent,int,int)>
<com.samsung.android.app.usage.IUsageStatsWatcher: void noteResumeComponent(android.content.ComponentName,android.content.Intent,int,int)>
<com.android.internal.widget.IUpdateVerifierCallback: void onReceiveSaGuid(java.lang.String)>
<android.app.backup.IBackupManager: void semSetAutoRestoreEnabled(boolean)>
<android.app.backup.IBackupManager: java.util.Map semBackupPackage(android.os.ParcelFileDescriptor,java.lang.String[],java.lang.String,int)>
<android.app.backup.IBackupManager: void fullBackupCustomized(int,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,java.lang.String[],boolean,java.lang.String,boolean,android.app.backup.IMemorySaverBackupRestoreObserver)>
<android.app.backup.IBackupManager: void semSetBackupEnabled(boolean)>
<android.app.backup.IBackupManager: void fullRestoreCustomized(int,java.lang.String,boolean,java.lang.String,android.app.backup.IMemorySaverBackupRestoreObserver)>
<android.app.backup.IBackupManager: boolean isSubUserSupported()>
<android.app.backup.IBackupManager: boolean semCancelBackupAndRestore()>
<android.app.backup.IBackupManager: boolean semIsBackupEnabled()>
<android.app.backup.IBackupManager: void semRestorePackage(android.os.ParcelFileDescriptor,java.lang.String)>
<android.app.backup.IBackupManager: java.util.Map semBackupPackagePath(android.os.ParcelFileDescriptor,java.lang.String[],java.lang.String,int,java.lang.String[])>
<android.app.backup.IBackupManager: boolean semSetTimeoutBackupAndRestore(int)>
<com.android.internal.inputmethod.IInputMethodClient: void updateVirtualDisplayToScreenMatrix(int,float[])>
<com.android.internal.view.IInputMethodManager: int getCurTokenDisplayId()>
<com.android.internal.view.IInputMethodManager: void handleVoiceHWKey()>
<com.android.internal.view.IInputMethodManager: boolean minimizeSoftInput(com.android.internal.inputmethod.IInputMethodClient,int)>
<com.android.internal.view.IInputMethodManager: void dismissAndShowAgainInputMethodPicker()>
<com.android.internal.view.IInputMethodManager: void undoMinimizeSoftInput()>
<com.android.internal.view.IInputMethodManager: boolean acceptStylusHandwritingDelegation(com.android.internal.inputmethod.IInputMethodClient,int,java.lang.String,java.lang.String)>
<com.android.internal.view.IInputMethodManager: void reportVirtualDisplayGeometryAsync(com.android.internal.inputmethod.IInputMethodClient,int,float[])>
<com.android.internal.view.IInputMethodManager: int getCurrentFocusDisplayID()>
<com.android.internal.view.IInputMethodManager: boolean getWACOMPen()>
<com.android.internal.view.IInputMethodManager: boolean isInputMethodShown()>
<com.android.internal.view.IInputMethodManager: int isAccessoryKeyboard()>
<com.android.internal.view.IInputMethodManager: void setInputMethodSwitchDisable(com.android.internal.inputmethod.IInputMethodClient,boolean)>
<com.android.internal.view.IInputMethodManager: boolean isCurrentInputMethodAsSamsungKeyboard()>
<com.android.internal.view.IInputMethodManager: boolean getDexSettingsValue(java.lang.String,java.lang.String)>
<com.samsung.android.dsms.aidl.IDsmsService: void sendMessage(java.lang.String,java.lang.String,long)>
<android.nfc.INfcAdapter: boolean isNFCAllowed(int)>
<android.nfc.INfcAdapter: int getSeSupportedTech()>
<android.nfc.INfcAdapter: java.lang.String getPhoneNumber()>
<android.nfc.INfcAdapter: void changeRoutingTable(android.os.IBinder,int,java.lang.String,java.lang.String,java.util.List)>
<android.nfc.INfcAdapter: byte[] transceiveAuthData(byte[])>
<android.nfc.INfcAdapter: void changeDiscoveryTech(android.os.IBinder,int,int)>
<android.nfc.INfcAdapter: void setDefaultRoutingDestination(java.lang.String)>
<android.nfc.INfcAdapter: void NetworkResetAtt()>
<android.nfc.INfcAdapter: byte[] StartLedCover()>
<android.nfc.INfcAdapter: boolean writeFelicaLockState(java.lang.String,java.lang.String,java.lang.String)>
<android.nfc.INfcAdapter: java.lang.String getDefaultRoutingDestination()>
<android.nfc.INfcAdapter: void storeEnableHistory(java.lang.String[])>
<android.nfc.INfcAdapter: void enableDisableSeTestMode(java.lang.String,boolean)>
<android.nfc.INfcAdapter: byte[] startCoverAuth()>
<android.nfc.INfcAdapter: boolean readerEnable()>
<android.nfc.INfcAdapter: byte[] TransceiveLedCover(byte[])>
<android.nfc.INfcAdapter: boolean SetWirelessChargeEnabled(boolean)>
<android.nfc.INfcAdapter: boolean StopLedCover()>
<android.nfc.INfcAdapter: boolean deviceSupportsReaderOption()>
<android.nfc.INfcAdapter: void copyUtilityFiles()>
<android.nfc.INfcAdapter: boolean stopCoverAuth()>
<android.nfc.INfcAdapter: boolean readerDisable()>
<android.nfc.INfcAdapter: byte[] apcCommand(int,byte[])>
<com.samsung.android.wifi.SemTasPolicyListener: void onTasPolicyChanged(int,int)>
<android.hardware.camera2.extension.ISessionProcessorImpl: void onCaptureSessionStart(android.hardware.camera2.extension.IRequestProcessorImpl)>
<com.samsung.android.camera.iris.IIrisService: void setActiveUser(int)>
<com.samsung.android.camera.iris.IIrisService: java.util.List getEnrolledIrises(int,java.lang.String)>
<com.samsung.android.camera.iris.IIrisService: void cancelAuthentication(android.os.IBinder,java.lang.String)>
<com.samsung.android.camera.iris.IIrisService: long preEnroll(android.os.IBinder)>
<com.samsung.android.camera.iris.IIrisService: long getAuthenticatorId(java.lang.String)>
<com.samsung.android.camera.iris.IIrisService: void enroll(android.os.IBinder,android.os.IBinder,int,int,int,int,byte[],int,com.samsung.android.camera.iris.IIrisServiceReceiver,int,java.lang.String,android.os.Bundle)>
<com.samsung.android.camera.iris.IIrisService: void resetTimeout(byte[])>
<com.samsung.android.camera.iris.IIrisService: void setIrisViewType(int,java.lang.String,int)>
<com.samsung.android.camera.iris.IIrisService: void authenticate(android.os.IBinder,android.os.IBinder,int,int,int,int,long,int,com.samsung.android.camera.iris.IIrisServiceReceiver,int,java.lang.String,android.os.Bundle,byte[])>
<com.samsung.android.camera.iris.IIrisService: void prepareForAuthentication(boolean,android.os.IBinder,long,int,android.hardware.biometrics.IBiometricSensorReceiver,java.lang.String,int,int,int,int,android.os.Bundle)>
<com.samsung.android.camera.iris.IIrisService: int postEnroll(android.os.IBinder)>
<com.samsung.android.camera.iris.IIrisService: void prompt_authenticate(android.os.IBinder,android.os.IBinder,int,int,int,int,long,int,com.samsung.android.camera.iris.IIrisServiceReceiver,int,java.lang.String,android.os.Bundle,byte[])>
<com.samsung.android.camera.iris.IIrisService: boolean hasDisabledIris(int,java.lang.String)>
<com.samsung.android.camera.iris.IIrisService: void cancelAuthenticationFromService(android.os.IBinder,java.lang.String,int,int,int,boolean)>
<com.samsung.android.camera.iris.IIrisService: void rename(int,int,java.lang.String)>
<com.samsung.android.camera.iris.IIrisService: void remove(android.os.IBinder,int,int,int,com.samsung.android.camera.iris.IIrisServiceReceiver)>
<com.samsung.android.camera.iris.IIrisService: int request(android.os.IBinder,int,byte[],byte[],int,int,com.samsung.android.camera.iris.IIrisServiceReceiver)>
<com.samsung.android.camera.iris.IIrisService: void addLockoutResetCallback(com.samsung.android.camera.iris.IIrisServiceLockoutResetCallback)>
<com.samsung.android.camera.iris.IIrisService: void enableIRImageCallback(int,java.lang.String,int)>
<com.samsung.android.camera.iris.IIrisService: boolean hasEnrolledIrises(int,java.lang.String)>
<com.samsung.android.camera.iris.IIrisService: void cancelEnrollment(android.os.IBinder)>
<com.samsung.android.camera.iris.IIrisService: void startPreparedClient(int)>
<com.samsung.android.camera.iris.IIrisService: boolean isHardwareDetected(long,java.lang.String)>
<com.samsung.android.ims.options.SemImsCapabilityService: com.samsung.android.ims.options.SemCapabilities getCapabilities(java.lang.String,int,int)>
<com.samsung.android.ims.options.SemImsCapabilityService: com.samsung.android.ims.options.SemCapabilities getOwnCapabilities(int)>
<com.samsung.android.ims.options.SemImsCapabilityService: void unregisterListener(java.lang.String,int)>
<com.samsung.android.ims.options.SemImsCapabilityService: java.lang.String registerListener(com.samsung.android.ims.options.SemCapabilityServiceEventListener,int)>
<com.samsung.android.ims.options.SemImsCapabilityService: com.samsung.android.ims.options.SemCapabilities[] getCapabilitiesByContactId(java.lang.String,int,int)>
<com.samsung.android.ims.options.SemImsCapabilityService: com.samsung.android.ims.options.SemCapabilities getCapabilitiesByNumber(java.lang.String,int,boolean,int)>
<com.samsung.android.bio.fingerprint.ISemFingerprintAodController: void turnOffDozeMode()>
<com.samsung.android.bio.fingerprint.ISemFingerprintAodController: void turnOnDozeHlpmMode()>
<com.samsung.android.bio.fingerprint.ISemFingerprintAodController: void turnOnDozeMode()>
<com.samsung.android.bio.fingerprint.ISemFingerprintAodController: void hideAodScreen()>
<com.samsung.android.bio.fingerprint.ISemFingerprintAodController: void turnOffDozeHlpmMode()>
<android.os.IVibratorManagerService: int getSupportedVibratorGroup()>
<android.os.IVibratorManagerService: int semGetNumberOfSupportedPatterns()>
<com.samsung.android.ims.SemImsRegiListener: void onDeregistered(com.samsung.android.ims.SemImsRegistration,com.samsung.android.ims.SemImsRegistrationError)>
<com.samsung.android.ims.SemImsRegiListener: void onRegistered(com.samsung.android.ims.SemImsRegistration)>
<android.window.IWindowOrganizerController: int finishTransition(android.os.IBinder,android.window.WindowContainerTransaction,android.window.IWindowContainerTransactionCallback)>
<android.security.maintenance.IKeystoreMaintenance: int getState(int)>
<android.security.maintenance.IKeystoreMaintenance: byte[] getRotValue()>
<com.samsung.android.content.smartclip.ISpenGestureHoverListener: void onBackPressed()>
<com.samsung.android.content.smartclip.ISpenGestureHoverListener: void onHoverEnter()>
<com.samsung.android.content.smartclip.ISpenGestureHoverListener: void onHoverExitTowardBack()>
<com.samsung.android.content.smartclip.ISpenGestureHoverListener: void onHoverExit()>
<com.samsung.android.content.smartclip.ISpenGestureHoverListener: void onHoverStay(int,int)>
<com.samsung.android.icccgrdm.IGrdmIntegrityControlCheckCenter: byte[] grdmSetAttestationData(byte[])>
<com.samsung.android.media.IResourceManagerObserver: com.samsung.android.media.GetCodecCapacityReturn getCodecCapacity(int)>
<com.samsung.android.media.IResourceManagerObserver: void disconnect()>
<com.samsung.android.media.IResourceManagerObserver: int setResourcePriority(int)>
<com.samsung.android.media.IResourceManagerObserver: com.samsung.android.media.GetResourceInfoReturn getResourceInfo(int)>
<com.samsung.android.media.IResourceManagerObserver: int enableObserver(int,int)>
<com.android.internal.telephony.ITelephony: int invokeOemRilRequestRaw(byte[],byte[])>
<com.android.internal.telephony.ITelephony: void onDeviceAlignedWithSatellite(int,boolean)>
<com.samsung.android.wifi.aware.ISemWifiAwareManager: int isPreEnabled()>
<com.samsung.android.wifi.aware.ISemWifiAwareManager: void setClusterMergingEnabled(boolean)>
<com.samsung.android.hardware.context.ISemContextCallback: java.lang.String getListenerInfo()>
<com.samsung.android.hardware.context.ISemContextCallback: void semContextCallback(com.samsung.android.hardware.context.SemContextEvent)>
<com.samsung.android.cover.ICoverService: void onSystemReady()>
<com.samsung.android.cover.ICoverService: void onUpdateCoverState(com.samsung.android.cover.CoverState)>
<com.samsung.android.cover.ICoverService: int onCoverAppCovered(boolean)>
<com.android.net.ICredentialStatusCallback: void onSuccess()>
<com.android.net.ICredentialStatusCallback: void onFail(int)>
<android.sec.enterprise.IEDMProxy: boolean decreaseNumberOfOutgoingSms()>
<android.sec.enterprise.IEDMProxy: boolean isPackageAllowedToAccessExternalSdcard(int,int)>
<android.sec.enterprise.IEDMProxy: boolean isOcspCheckEnabled()>
<android.sec.enterprise.IEDMProxy: boolean isBluetoothUUIDAllowed(java.lang.String)>
<android.sec.enterprise.IEDMProxy: boolean isBlockMmsWithStorageEnabled()>
<android.sec.enterprise.IEDMProxy: java.lang.String getApplicationNameFromDb(java.lang.String,int)>
<android.sec.enterprise.IEDMProxy: boolean isBlockSmsWithStorageEnabled()>
<android.sec.enterprise.IEDMProxy: boolean isClipboardAllowed(boolean)>
<android.sec.enterprise.IEDMProxy: boolean isWapPushAllowed()>
<android.sec.enterprise.IEDMProxy: boolean addNumberOfIncomingCalls()>
<android.sec.enterprise.IEDMProxy: void notifyPasswordPolicyOneLockChanged(boolean,int)>
<android.sec.enterprise.IEDMProxy: boolean isScreenLockPatternVisibilityEnabledAsUser(int)>
<android.sec.enterprise.IEDMProxy: boolean isLimitNumberOfSmsEnabled()>
<android.sec.enterprise.IEDMProxy: boolean isBackupAllowed(boolean)>
<android.sec.enterprise.IEDMProxy: void notifyCertificateRemovedAsUser(java.lang.String,int)>
<android.sec.enterprise.IEDMProxy: long getNtpTimeout()>
<android.sec.enterprise.IEDMProxy: boolean getToastShowPackageNameState()>
<android.sec.enterprise.IEDMProxy: boolean isCopyContactToSimAllowed(int)>
<android.sec.enterprise.IEDMProxy: void storeSMS(java.lang.String,java.lang.String,java.lang.String,boolean)>
<android.sec.enterprise.IEDMProxy: int getToastGravityYOffset()>
<android.sec.enterprise.IEDMProxy: android.os.Bundle getApplicationRestrictions(java.lang.String,int)>
<android.sec.enterprise.IEDMProxy: int getSensorDisabled()>
<android.sec.enterprise.IEDMProxy: void AuditLogger(int,int,boolean,int,java.lang.String,java.lang.String)>
<android.sec.enterprise.IEDMProxy: void AuditLoggerAsUser(int,int,boolean,int,java.lang.String,java.lang.String,int)>
<android.sec.enterprise.IEDMProxy: boolean canIncomingCall(java.lang.String)>
<android.sec.enterprise.IEDMProxy: boolean isIncomingCallAllowedFromSimSlot(int)>
<android.sec.enterprise.IEDMProxy: boolean isBluetoothLogEnabled()>
<android.sec.enterprise.IEDMProxy: boolean isCertificateValidationAtInstallEnabledAsUser(int)>
<android.sec.enterprise.IEDMProxy: boolean isMockLocationEnabled()>
<android.sec.enterprise.IEDMProxy: boolean getEmergencyCallOnly(boolean)>
<android.sec.enterprise.IEDMProxy: boolean getProKioskNotificationMessagesState()>
<android.sec.enterprise.IEDMProxy: void AuditLoggerPrivileged(int,int,boolean,int,java.lang.String,java.lang.String)>
<android.sec.enterprise.IEDMProxy: java.util.List getELMPermissions(java.lang.String)>
<android.sec.enterprise.IEDMProxy: void storeCalling(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>
<android.sec.enterprise.IEDMProxy: boolean canOutgoingSms(java.lang.String)>
<android.sec.enterprise.IEDMProxy: boolean isCaCertificateTrustedAsUser(byte[],boolean,boolean,int)>
<android.sec.enterprise.IEDMProxy: boolean isKnoxBluetoothEnabled(int)>
<android.sec.enterprise.IEDMProxy: boolean isVideoRecordAllowed(boolean)>
<android.sec.enterprise.IEDMProxy: void addCallsCount(java.lang.String)>
<android.sec.enterprise.IEDMProxy: boolean getWifiState()>
<android.sec.enterprise.IEDMProxy: boolean getBrowserSettingStatus(int)>
<android.sec.enterprise.IEDMProxy: boolean registerSystemUICallback(android.sec.enterprise.adapterlayer.ISystemUIAdapterCallback)>
<android.sec.enterprise.IEDMProxy: boolean isRevocationCheckEnabled()>
<android.sec.enterprise.IEDMProxy: int getToastGravityXOffset()>
<android.sec.enterprise.IEDMProxy: boolean canIncomingSms(java.lang.String)>
<android.sec.enterprise.IEDMProxy: boolean isOutgoingCallsAllowed()>
<android.sec.enterprise.IEDMProxy: boolean isFactoryResetAllowed()>
<android.sec.enterprise.IEDMProxy: boolean isSmsPatternCheckRequired()>
<android.sec.enterprise.IEDMProxy: boolean getVolumePanelEnabledState()>
<android.sec.enterprise.IEDMProxy: boolean addNumberOfOutgoingSms()>
<android.sec.enterprise.IEDMProxy: boolean getProKioskState()>
<android.sec.enterprise.IEDMProxy: boolean isOutgoingSmsAllowedFromSimSlot(int)>
<android.sec.enterprise.IEDMProxy: void RedactedAuditLoggerPrivileged(int,int,boolean,int,java.lang.String,java.lang.String,java.lang.String)>
<android.sec.enterprise.IEDMProxy: boolean isDiscoverableEnabled()>
<android.sec.enterprise.IEDMProxy: boolean isRoamingDataEnabled()>
<android.sec.enterprise.IEDMProxy: boolean isAllowedMamPackage(java.lang.String)>
<android.sec.enterprise.IEDMProxy: boolean isPackageInAvrWhitelist(int)>
<android.sec.enterprise.IEDMProxy: byte[] ucmSign(java.lang.String,byte[],java.lang.String)>
<android.sec.enterprise.IEDMProxy: boolean getAddHomeShorcutRequested()>
<android.sec.enterprise.IEDMProxy: boolean isScreenLockPatternVisibilityEnabled()>
<android.sec.enterprise.IEDMProxy: boolean shallForceNtpMdmValues()>
<android.sec.enterprise.IEDMProxy: boolean isBluetoothEnabled()>
<android.sec.enterprise.IEDMProxy: boolean canOutgoingCall(java.lang.String)>
<android.sec.enterprise.IEDMProxy: boolean isRoamingPushEnabled()>
<android.sec.enterprise.IEDMProxy: boolean isSMSCaptureEnabled()>
<android.sec.enterprise.IEDMProxy: boolean addNumberOfOutgoingCalls()>
<android.sec.enterprise.IEDMProxy: java.lang.String getUsbNetAddress(int)>
<android.sec.enterprise.IEDMProxy: boolean isGoogleAccountsAutoSyncAllowedAsUser(int)>
<android.sec.enterprise.IEDMProxy: void RedactedAuditLoggerAsUser(int,int,boolean,int,java.lang.String,java.lang.String,java.lang.String,int)>
<android.sec.enterprise.IEDMProxy: boolean isMmsAllowedFromSimSlot(int)>
<android.sec.enterprise.IEDMProxy: byte[] ucmDecrypt(java.lang.String,byte[],java.lang.String,android.os.Bundle)>
<android.sec.enterprise.IEDMProxy: void bluetoothLog(java.lang.String,java.lang.String)>
<android.sec.enterprise.IEDMProxy: boolean getToastEnabledState()>
<android.sec.enterprise.IEDMProxy: boolean isNtpSetByMDM()>
<android.sec.enterprise.IEDMProxy: byte[] ucmMac(java.lang.String,byte[],java.lang.String)>
<android.sec.enterprise.IEDMProxy: boolean isOutgoingCallAllowedFromSimSlot(int)>
<android.sec.enterprise.IEDMProxy: boolean isClipboardShareAllowed()>
<android.sec.enterprise.IEDMProxy: boolean isAuditLogEnabledAsUser(int)>
<android.sec.enterprise.IEDMProxy: boolean addNumberOfIncomingSms()>
<android.sec.enterprise.IEDMProxy: boolean isPairingEnabled()>
<android.sec.enterprise.IEDMProxy: boolean isAudioRecordAllowed(boolean)>
<android.sec.enterprise.IEDMProxy: boolean isCertificateTrustedUntrustedEnabledAsUser(int)>
<android.sec.enterprise.IEDMProxy: void notifyCertificateFailureAsUser(java.lang.String,java.lang.String,boolean,int)>
<android.sec.enterprise.IEDMProxy: boolean getUsbNetStateInternal()>
<android.sec.enterprise.IEDMProxy: boolean getToastGravityEnabledState()>
<android.sec.enterprise.IEDMProxy: boolean isCallingCaptureEnabled()>
<android.sec.enterprise.IEDMProxy: boolean isOutgoingSmsAllowed()>
<android.sec.enterprise.IEDMProxy: void storeBlockedSmsMms(boolean,byte[],java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>
<android.sec.enterprise.IEDMProxy: boolean isAccountRemovalAllowed(java.lang.String,java.lang.String,boolean)>
<android.sec.enterprise.IEDMProxy: boolean isIncomingSmsAllowed()>
<android.sec.enterprise.IEDMProxy: java.lang.String getNtpServer()>
<android.sec.enterprise.IEDMProxy: boolean isIncomingSmsAllowedFromSimSlot(int)>
<android.sec.enterprise.IEDMProxy: boolean isBluetoothDeviceAllowed(java.lang.String)>
<android.sec.enterprise.IEDMProxy: byte[] ucmGetCertificateChain(java.lang.String)>
<android.sec.enterprise.IEDMProxy: void AuditLoggerPrivilegedAsUser(int,int,boolean,int,java.lang.String,java.lang.String,int)>
<android.sec.enterprise.IEDMProxy: int getKeyboardMode()>
<android.sec.enterprise.IEDMProxy: boolean getAllowBluetoothDataTransfer(boolean)>
<android.sec.enterprise.IEDMProxy: int getVolumeControlStream()>
<android.sec.enterprise.IEDMProxy: boolean getExtendedCallInfoState()>
<android.sec.enterprise.IEDMProxy: int getProKioskHideNotificationMessages()>
<android.sec.enterprise.IEDMProxy: boolean isIncomingMmsAllowed()>
<android.sec.enterprise.IEDMProxy: boolean isAnyApplicationNameChangedAsUser(int)>
<android.sec.enterprise.IEDMProxy: boolean isMicrophoneEnabled(boolean)>
<android.sec.enterprise.IEDMProxy: void RedactedAuditLoggerPrivilegedAsUser(int,int,boolean,int,java.lang.String,java.lang.String,java.lang.String,int)>
<android.sec.enterprise.IEDMProxy: byte[] getApplicationIconFromDb(java.lang.String,int)>
<android.sec.enterprise.IEDMProxy: boolean getVolumeButtonRotationState()>
<android.sec.enterprise.IEDMProxy: int validateCertificateAtInstallAsUser(byte[],int)>
<android.sec.enterprise.IEDMProxy: void RedactedAuditLogger(int,int,boolean,int,java.lang.String,java.lang.String,java.lang.String)>
<android.sec.enterprise.IEDMProxy: boolean isDataAllowedFromSimSlot(int)>
<android.sec.enterprise.IEDMProxy: byte[] ucmEncrypt(java.lang.String,byte[],java.lang.String,android.os.Bundle)>
<android.sec.enterprise.IEDMProxy: int getToastGravity()>
<android.sec.enterprise.IEDMProxy: boolean isTaskManagerAllowed(boolean)>
<android.sec.enterprise.IEDMProxy: boolean isProfileEnabled(int)>
<android.hardware.input.ISemLidStateChangedListener: void onLidStateChanged(long,boolean)>
<com.samsung.android.mocca.IMoccaService: boolean isAvailableType(java.lang.String)>
<com.samsung.android.mocca.IMoccaService: void unregisterContextListener(com.samsung.android.mocca.IMoccaEventListener,java.lang.String)>
<com.samsung.android.mocca.IMoccaService: boolean hasContextAvailabilityListener(com.samsung.android.mocca.IMoccaEventListener)>
<com.samsung.android.mocca.IMoccaService: java.util.List getSupportedTypes()>
<com.samsung.android.mocca.IMoccaService: boolean registerContextAvailabilityListener(com.samsung.android.mocca.IMoccaEventListener,java.lang.String)>
<com.samsung.android.mocca.IMoccaService: boolean hasContextListener(com.samsung.android.mocca.IMoccaEventListener)>
<com.samsung.android.mocca.IMoccaService: void unregisterContextAvailabilityListener(com.samsung.android.mocca.IMoccaEventListener,java.lang.String)>
<com.samsung.android.mocca.IMoccaService: boolean registerContextListener(com.samsung.android.mocca.IMoccaEventListener,java.lang.String,com.samsung.android.mocca.ContextParam)>
<com.samsung.android.knox.IBasicCommand: void setCaller(com.samsung.android.knox.IBasicCommand)>
<com.samsung.android.knox.IBasicCommand: android.os.Bundle sendCmd(android.os.Bundle)>
<com.samsung.android.hardware.context.ISemContextService: java.lang.String getCurrentServiceList()>
<com.samsung.android.hardware.context.ISemContextService: boolean unregisterCallback(android.os.IBinder,int)>
<com.samsung.android.hardware.context.ISemContextService: void initializeService(android.os.IBinder,int)>
<com.samsung.android.hardware.context.ISemContextService: java.util.Map getAvailableServiceMap()>
<com.samsung.android.hardware.context.ISemContextService: void requestToUpdate(android.os.IBinder,int,java.lang.String)>
<com.samsung.android.hardware.context.ISemContextService: boolean setReferenceData(int,int,byte[])>
<com.samsung.android.hardware.context.ISemContextService: boolean changeParameters(android.os.IBinder,int,com.samsung.android.hardware.context.SemContextAttribute)>
<com.samsung.android.hardware.context.ISemContextService: void registerCallback(android.os.IBinder,int,com.samsung.android.hardware.context.SemContextAttribute,java.lang.String)>
<com.samsung.android.hardware.context.ISemContextService: void requestHistoryData(android.os.IBinder,int,java.lang.String)>
<com.samsung.android.cover.ICoverWindowStateListenerCallback: void onCoverAppCovered(boolean)>
<com.android.internal.statusbar.IStatusBarService: void setPanelExpandStateToType(boolean,int)>
<com.android.internal.statusbar.IStatusBarService: void sendKeyEventToDesktopTaskbar(android.view.KeyEvent)>
<com.android.internal.statusbar.IStatusBarService: void rebootByBixby(boolean)>
<com.android.internal.statusbar.IStatusBarService: void hideCurrentInputMethodForBubbles()>
<com.android.internal.statusbar.IStatusBarService: void expandNotificationsPanelToType(int)>
<com.android.internal.statusbar.IStatusBarService: void resetScheduleAutoHide()>
<com.android.internal.statusbar.IStatusBarService: void disableToType(int,android.os.IBinder,java.lang.String,int)>
<com.android.internal.statusbar.IStatusBarService: void setNavigationBarShortcut(java.lang.String,android.widget.RemoteViews,int,int)>
<com.android.internal.statusbar.IStatusBarService: com.android.internal.statusbar.RegisterStatusBarResult registerStatusBarAsType(com.android.internal.statusbar.IStatusBar,int)>
<com.android.internal.statusbar.IStatusBarService: void registerStatusBarForCarLife(com.android.internal.carlife.IStatusBarCarLife)>
<com.android.internal.statusbar.IStatusBarService: boolean getPanelExpandStateToType(int)>
<com.android.internal.statusbar.IStatusBarService: void shutdownByBixby()>
<com.android.internal.statusbar.IStatusBarService: boolean isSysUiSafeModeEnabled()>
<com.android.internal.statusbar.IStatusBarService: void setBlueLightFilter(boolean,int)>
<com.android.internal.statusbar.IStatusBarService: void disable2ToType(int,android.os.IBinder,java.lang.String,int)>
<com.android.internal.statusbar.IStatusBarService: void disable2ForUserToType(int,android.os.IBinder,java.lang.String,int,int)>
<com.android.internal.statusbar.IStatusBarService: void collapsePanelsToType(int)>
<com.android.internal.statusbar.IStatusBarService: void setIndicatorBgColor(int)>
<com.android.internal.statusbar.IStatusBarService: int[] getDisableFlagsToType(android.os.IBinder,int,int)>
<com.android.internal.statusbar.IStatusBarService: boolean isFOTAAvailableForGlobalActions()>
<com.android.internal.statusbar.IStatusBarService: void disableForUserToType(int,android.os.IBinder,java.lang.String,int,int)>
<com.android.internal.statusbar.IStatusBarService: boolean getQuickSettingPanelExpandStateToType(int)>
<com.android.internal.statusbar.IStatusBarService: void expandSettingsPanelToType(java.lang.String,int)>
<com.android.internal.widget.ILockSettings: void notifyPasswordChangedForEnterpriseUser(com.android.internal.widget.LockscreenCredential,int)>
<com.android.internal.widget.ILockSettings: void setAppLockBackupPin(java.lang.String,int)>
<com.android.internal.widget.ILockSettings: boolean haveAppLockFingerprintPassword(int)>
<com.android.internal.widget.ILockSettings: boolean changeToken(byte[],long,byte[],long,int)>
<com.android.internal.widget.ILockSettings: void unregisterRemoteLockCallback(int,com.android.internal.widget.IRemoteLockMonitorCallback)>
<com.android.internal.widget.ILockSettings: boolean haveCarrierPassword(int)>
<com.android.internal.widget.ILockSettings: void setAppLockPin(java.lang.String,int)>
<com.android.internal.widget.ILockSettings: void addLog(int,java.lang.String)>
<com.android.internal.widget.ILockSettings: boolean checkAppLockPin(java.lang.String,int)>
<com.android.internal.widget.ILockSettings: void setLockModeChangedCallback(android.os.IRemoteCallback)>
<com.android.internal.widget.ILockSettings: void sendLockTypeChangedInfo(int)>
<com.android.internal.widget.ILockSettings: void requestRemoteLockInfo(int)>
<com.android.internal.widget.ILockSettings: void updateSdpMdfppForSystem(int,long)>
<com.android.internal.widget.ILockSettings: boolean updateCarrierLock(int)>
<com.android.internal.widget.ILockSettings: void setLockFMMPassword(byte[],int)>
<com.android.internal.widget.ILockSettings: boolean checkAppLockFingerprintPassword(java.lang.String,int)>
<com.android.internal.widget.ILockSettings: boolean haveAppLockPin(int)>
<com.android.internal.widget.ILockSettings: com.android.internal.widget.VerifyCredentialResponse checkCredentialForDualDarDo(com.android.internal.widget.LockscreenCredential,int,int,com.samsung.android.knox.dar.ddar.IDualDarAuthProgressCallback)>
<com.android.internal.widget.ILockSettings: boolean setKnoxGuard(int,com.android.internal.widget.RemoteLockInfo)>
<com.android.internal.widget.ILockSettings: boolean checkAppLockBackupPin(java.lang.String,int)>
<com.android.internal.widget.ILockSettings: boolean haveFMMPassword(int)>
<com.android.internal.widget.ILockSettings: void setAppLockPattern(java.lang.String,int)>
<com.android.internal.widget.ILockSettings: void setAppLockFingerprintPassword(java.lang.String,int)>
<com.android.internal.widget.ILockSettings: boolean checkAppLockPassword(java.lang.String,int)>
<com.android.internal.widget.ILockSettings: boolean haveAppLockBackupPin(int)>
<com.android.internal.widget.ILockSettings: void setShellCommandCallback(android.os.IRemoteCallback)>
<com.android.internal.widget.ILockSettings: boolean setLockCredentialWithIgnoreNotifyIfNeeded(com.android.internal.widget.LockscreenCredential,com.android.internal.widget.LockscreenCredential,int,boolean)>
<com.android.internal.widget.ILockSettings: void registerRemoteLockCallback(int,com.android.internal.widget.IRemoteLockMonitorCallback)>
<com.android.internal.widget.ILockSettings: boolean checkFMMPassword(byte[],int)>
<com.android.internal.widget.ILockSettings: void setSecurityDebugLevel(int)>
<com.android.internal.widget.ILockSettings: void setAppLockPassword(java.lang.String,int)>
<com.android.internal.widget.ILockSettings: boolean checkAppLockPatternWithHash(java.lang.String,int,byte[])>
<com.android.internal.widget.ILockSettings: boolean haveAppLockPassword(int)>
<com.android.internal.widget.ILockSettings: void checkRemoteLockPassword(int,byte[],int,android.os.IRemoteCallback)>
<com.android.internal.widget.ILockSettings: void setCarrierLockEnabled(int)>
<com.android.internal.widget.ILockSettings: void setLockCarrierPassword(byte[],int)>
<com.android.internal.widget.ILockSettings: boolean checkCarrierPassword(byte[],int)>
<com.android.internal.widget.ILockSettings: com.android.internal.widget.VerifyCredentialResponse verifyToken(byte[],long,int)>
<com.android.internal.widget.ILockSettings: boolean getCarrierLock(int)>
<com.android.internal.widget.ILockSettings: void setRemoteLock(int,com.android.internal.widget.RemoteLockInfo)>
<com.android.internal.widget.ILockSettings: boolean haveAppLockPattern(int)>
<com.samsung.android.knox.knoxai.IKnoxAiManagerService: void processTaCommand(int,com.samsung.android.knox.knoxai.TaProcessBuffer[],com.samsung.android.knox.knoxai.TaProcessBuffer[])>
<com.samsung.android.knox.knoxai.IKnoxAiManagerService: int initializeTaSession(com.samsung.android.knox.knoxai.TaLoaderOptions)>
<com.samsung.android.knox.knoxai.IKnoxAiManagerService: int terminateTaSession()>
<com.samsung.android.knox.knoxanalyticsproxy.IKnoxAnalyticsProxy: void log(com.samsung.android.knox.knoxanalyticsproxy.KnoxAnalyticsData)>
<android.permission.IPermissionController: void notifyOneTimePermissionSessionTimeout(java.lang.String)>
<android.permission.IPermissionController: void revokeSelfPermissionsOnKill(java.lang.String,java.util.List,com.android.internal.infra.AndroidFuture)>
<com.samsung.android.edge.IEdgeLightingResponse: void onFinished()>
<com.android.ims.internal.IImsMMTelFeature: void acknowledgeSmsReport(int,int,int,int)>
<com.android.ims.internal.IImsMMTelFeature: java.lang.String getSmsFormat(int)>
<com.android.ims.internal.IImsMMTelFeature: void setSmsListener(int,android.telephony.ims.aidl.IImsSmsListener)>
<com.android.ims.internal.IImsMMTelFeature: void changeAudioPath(int,int)>
<com.android.ims.internal.IImsMMTelFeature: void setRetryCount(int,int,int)>
<com.android.ims.internal.IImsMMTelFeature: void setVideoCrtAudio(int,boolean)>
<com.android.ims.internal.IImsMMTelFeature: boolean isCmcEmergencyCallSupported(int)>
<com.android.ims.internal.IImsMMTelFeature: void setSecImsMmTelEventListener(int,com.android.ims.internal.ISecImsMmTelEventListener)>
<com.android.ims.internal.IImsMMTelFeature: void sendDtmfEvent(int,java.lang.String)>
<com.android.ims.internal.IImsMMTelFeature: void sendSms(int,int,int,java.lang.String,java.lang.String,boolean,byte[])>
<com.android.ims.internal.IImsMMTelFeature: int startLocalRingBackTone(int,int,int)>
<com.android.ims.internal.IImsMMTelFeature: void acknowledgeSms(int,int,int,int)>
<com.android.ims.internal.IImsMMTelFeature: void onMemoryAvailable(int,int)>
<com.android.ims.internal.IImsMMTelFeature: void sendPublishDialog(int,com.android.internal.telephony.PublishDialog)>
<com.android.ims.internal.IImsMMTelFeature: void setSmsc(int,java.lang.String)>
<com.android.ims.internal.IImsMMTelFeature: int stopLocalRingBackTone()>
<com.android.ims.internal.IImsMMTelFeature: void acknowledgeSmsWithPdu(int,int,int,byte[])>
<com.android.ims.internal.IImsMMTelFeature: void onSmsReady(int)>
<com.android.ims.internal.IImsMMTelFeature: java.lang.String getTrn(java.lang.String,java.lang.String)>
<android.hardware.fingerprint.IFingerprintService: void semRegisterAodController(android.os.IBinder,com.samsung.android.bio.fingerprint.ISemFingerprintAodController)>
<android.hardware.fingerprint.IFingerprintService: int semRemoveMaskView(android.os.IBinder,java.lang.String)>
<android.hardware.fingerprint.IFingerprintService: boolean semIsTemplateDbCorrupted()>
<android.hardware.fingerprint.IFingerprintService: void semForceCBGE()>
<android.hardware.fingerprint.IFingerprintService: android.os.IBinder semAddMaskView(android.os.IBinder,java.lang.String)>
<android.hardware.fingerprint.IFingerprintService: boolean semOpenSession()>
<android.hardware.fingerprint.IFingerprintService: boolean semHasFeature(int)>
<android.hardware.fingerprint.IFingerprintService: int semSetScreenStatus(int)>
<android.hardware.fingerprint.IFingerprintService: java.lang.String semGetDaemonVersion()>
<android.hardware.fingerprint.IFingerprintService: boolean semIsEnrollSession()>
<android.hardware.fingerprint.IFingerprintService: long semAuthenticate(android.os.IBinder,long,android.hardware.fingerprint.IFingerprintServiceReceiver,android.hardware.fingerprint.FingerprintAuthenticateOptions,android.os.Bundle)>
<android.hardware.fingerprint.IFingerprintService: void semSetFlagForIFAA(int,java.lang.String)>
<android.hardware.fingerprint.IFingerprintService: void semGetSensorData(android.os.Bundle)>
<android.hardware.fingerprint.IFingerprintService: java.lang.String semGetTrustAppVersion()>
<android.hardware.fingerprint.IFingerprintService: int semRunSensorTest(android.os.IBinder,int,int,com.samsung.android.bio.fingerprint.ISemFingerprintRequestCallback)>
<android.hardware.fingerprint.IFingerprintService: void setUdfpsOverlay(android.hardware.fingerprint.IUdfpsOverlay)>
<android.hardware.fingerprint.IFingerprintService: int semBioSysUiRequest(int,int,long,java.lang.String)>
<android.hardware.fingerprint.IFingerprintService: int semProcessFido(int,byte[],byte[],java.lang.String)>
<android.hardware.fingerprint.IFingerprintService: int semGetIconBottomMargin()>
<android.hardware.fingerprint.IFingerprintService: int semGetSensorTestResult(byte[])>
<android.hardware.fingerprint.IFingerprintService: java.lang.String semGetSensorInfo()>
<android.hardware.fingerprint.IFingerprintService: void semUnregisterDisplayStateCallback()>
<android.hardware.fingerprint.IFingerprintService: void semSetFodStrictMode(boolean)>
<android.hardware.fingerprint.IFingerprintService: int semSetCalibrationMode(android.os.IBinder,int,java.lang.String)>
<android.hardware.fingerprint.IFingerprintService: void semMoveSensorIconInDisplay(int,int)>
<android.hardware.fingerprint.IFingerprintService: void prepareForAuthentication(android.os.IBinder,long,android.hardware.biometrics.IBiometricSensorReceiver,android.hardware.fingerprint.FingerprintAuthenticateOptions,long,int,boolean)>
<android.hardware.fingerprint.IFingerprintService: int semGetSensorStatus()>
<android.hardware.fingerprint.IFingerprintService: boolean semResumeEnroll()>
<android.hardware.fingerprint.IFingerprintService: void semUnregisterAodController(android.os.IBinder)>
<android.hardware.fingerprint.IFingerprintService: int semShowBouncerScreen(int)>
<android.hardware.fingerprint.IFingerprintService: int semGetRemainingLockoutTime(int)>
<android.hardware.fingerprint.IFingerprintService: void onUiReady(long,int)>
<android.hardware.fingerprint.IFingerprintService: boolean semPauseEnroll()>
<android.hardware.fingerprint.IFingerprintService: java.lang.String[] semGetUserIdList()>
<android.hardware.fingerprint.IFingerprintService: int semRequest(android.os.IBinder,int,byte[],byte[],int,int,java.lang.String,com.samsung.android.bio.fingerprint.ISemFingerprintRequestCallback)>
<android.hardware.fingerprint.IFingerprintService: int semGetSecurityLevel()>
<android.hardware.fingerprint.IFingerprintService: void semUpdateTrustApp(java.lang.String,com.samsung.android.bio.fingerprint.ISemFingerprintRequestCallback,java.lang.String)>
<android.hardware.fingerprint.IFingerprintService: int semGetMaxEnrollmentNumber()>
<android.hardware.fingerprint.IFingerprintService: int semRegisterDisplayStateCallback(com.samsung.android.biometrics.ISemBiometricSysUiDisplayStateCallback)>
<android.hardware.fingerprint.IFingerprintService: android.graphics.Rect semGetSensorAreaInDisplay(int,int,android.graphics.Point)>
<com.android.internal.inputmethod.IInputMethod: void minimizeSoftInput(int)>
<com.android.internal.inputmethod.IInputMethod: void undoMinimizeSoftInput()>
<com.samsung.android.mocca.IMoccaEventListener: void onContextUnavailable(java.lang.String)>
<com.samsung.android.mocca.IMoccaEventListener: void onContextChanged(com.samsung.android.mocca.ContextEvent)>
<com.samsung.android.mocca.IMoccaEventListener: void onContextStopped(java.lang.String)>
<com.samsung.android.mocca.IMoccaEventListener: void onContextAvailable(java.lang.String)>
<android.os.INetworkManagementService: void addSocksSkipRuleProto(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>
<android.os.INetworkManagementService: android.net.NetworkStats getNetworkStatsTethering(int)>
<android.os.INetworkManagementService: void clearEbpfMap(int)>
<android.os.INetworkManagementService: void addPortFwdRules(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>
<android.os.INetworkManagementService: void setEpdgInterfaceDropRule(java.lang.String,boolean)>
<android.os.INetworkManagementService: void removeUidSocksRule(java.lang.String,java.lang.String,java.lang.String,int,int,java.lang.String)>
<android.os.INetworkManagementService: void disableMptcp()>
<android.os.INetworkManagementService: int removeRoutesFromLocalNetwork(java.util.List)>
<android.os.INetworkManagementService: void setFirewallRuleMobileData(int,boolean)>
<android.os.INetworkManagementService: long getNetworkStatsVideoCall(java.lang.String,int,int)>
<android.os.INetworkManagementService: void addUidSocksRule(java.lang.String,java.lang.String,java.lang.String,int,int,java.lang.String)>
<android.os.INetworkManagementService: void closeSocketsForUids(int[])>
<android.os.INetworkManagementService: void setUrlFirewallRuleMobileData(int,java.lang.String,boolean)>
<android.os.INetworkManagementService: void closeSocketsForFreecess(int,java.lang.String)>
<android.os.INetworkManagementService: void setKnoxGuardExemptRule(boolean,java.lang.String,int)>
<android.os.INetworkManagementService: void addIpAcceptRule(java.lang.String,java.lang.String,java.lang.String)>
<android.os.INetworkManagementService: void enableMptcp(java.lang.String)>
<android.os.INetworkManagementService: void setBlockListIPs(java.lang.String)>
<android.os.INetworkManagementService: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>
<android.os.INetworkManagementService: void cleanAllBlock()>
<android.os.INetworkManagementService: void disableEpdg(java.lang.String,java.lang.String)>
<android.os.INetworkManagementService: void setDnsForwardersForKnoxVpn(int,java.lang.String[])>
<android.os.INetworkManagementService: void addMptcpLink(java.lang.String)>
<android.os.INetworkManagementService: void buildFirewall()>
<android.os.INetworkManagementService: void createNetworkGuardChain()>
<android.os.INetworkManagementService: void addInterfaceToLocalNetwork(java.lang.String,java.util.List)>
<android.os.INetworkManagementService: void setMptcpMtuValue(java.lang.String,int)>
<android.os.INetworkManagementService: void removeSocksSkipRule(java.lang.String,java.lang.String,java.lang.String)>
<android.os.INetworkManagementService: void setBlockPorts(java.lang.String,int,java.lang.String)>
<android.os.INetworkManagementService: void removeUidFromChain(java.lang.String,java.lang.String,int)>
<android.os.INetworkManagementService: void addSourcePortAcceptRule(java.lang.String,java.lang.String,int)>
<android.os.INetworkManagementService: int replaceApeRule(java.lang.String,int,int)>
<android.os.INetworkManagementService: void setDestinationBasedMarkRule(boolean,java.lang.String,java.lang.String,int,int)>
<android.os.INetworkManagementService: void setUrlFirewallRuleWifi(int,java.lang.String,boolean)>
<android.os.INetworkManagementService: void setNetworkInfo(int,boolean,int)>
<android.os.INetworkManagementService: void setAllowListIPs(java.lang.String)>
<android.os.INetworkManagementService: void removeSocksSkipRuleProto(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>
<android.os.INetworkManagementService: void startInterfaceForwarding(java.lang.String,java.lang.String)>
<android.os.INetworkManagementService: void stopNetworkStatsOnPorts(java.lang.String,int,int)>
<android.os.INetworkManagementService: void addLegacyRoute(int,java.lang.String,java.lang.String,java.lang.String,int)>
<android.os.INetworkManagementService: void enableEpdg(java.lang.String,java.lang.String,boolean)>
<android.os.INetworkManagementService: int addApeRule(boolean,java.lang.String,int)>
<android.os.INetworkManagementService: void setGlobalAlert(long)>
<android.os.INetworkManagementService: void setKnoxVpn(int,boolean)>
<android.os.INetworkManagementService: void enableNetworkGuard(boolean)>
<android.os.INetworkManagementService: void addOrRemoveSystemAppFromDataSaverWhitelist(boolean,int)>
<android.os.INetworkManagementService: void removeSocksRule(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>
<android.os.INetworkManagementService: void addUidToChain(java.lang.String,java.lang.String,int)>
<android.os.INetworkManagementService: void startTetheringWithConfiguration(boolean,java.lang.String[])>
<android.os.INetworkManagementService: void setPrivateIpRoute(boolean,java.lang.String,int)>
<android.os.INetworkManagementService: void startNetworkStatsOnPorts(java.lang.String,int,int)>
<android.os.INetworkManagementService: void tetherLimitReached(android.net.ITetheringStatsProvider)>
<android.os.INetworkManagementService: void closeSocketsForUid(int)>
<android.os.INetworkManagementService: void updateInputFilterUserWideRules(int[],int,int)>
<android.os.INetworkManagementService: void disableNetworkGuard()>
<android.os.INetworkManagementService: void deleteNetworkGuardChain()>
<android.os.INetworkManagementService: void addSourceRoute(java.lang.String,java.lang.String,java.lang.String)>
<android.os.INetworkManagementService: void setAutoConf(java.lang.String,boolean)>
<android.os.INetworkManagementService: void removeChain(java.lang.String,java.lang.String)>
<android.os.INetworkManagementService: java.lang.String[] getDnsForwarders()>
<android.os.INetworkManagementService: void deleteNetworkGuardWhiteListRule()>
<android.os.INetworkManagementService: void unregisterNetdTetherEventListener()>
<android.os.INetworkManagementService: void enableKnoxVpnFlagForTether(boolean)>
<android.os.INetworkManagementService: void setAllowHostAlone(java.lang.String)>
<android.os.INetworkManagementService: void setBlockAllDNSPackets(boolean)>
<android.os.INetworkManagementService: void addSocksSkipRule(java.lang.String,java.lang.String,java.lang.String)>
<android.os.INetworkManagementService: void setBlockHostAlone(java.lang.String)>
<android.os.INetworkManagementService: int prioritizeApp(boolean,int)>
<android.os.INetworkManagementService: void setFirewallRuleWifi(int,boolean)>
<android.os.INetworkManagementService: java.lang.String runKnoxFirewallRulesCommand(int,java.lang.String)>
<android.os.INetworkManagementService: void updateInputFilterExemptRules(int,int)>
<android.os.INetworkManagementService: void disableDAD(java.lang.String)>
<android.os.INetworkManagementService: void setBlockAllPackets()>
<android.os.INetworkManagementService: void removeMptcpLink(java.lang.String)>
<android.os.INetworkManagementService: void cleanBlockPorts()>
<android.os.INetworkManagementService: void setFirewallInterfaceRule(java.lang.String,boolean)>
<android.os.INetworkManagementService: void stopQbox()>
<android.os.INetworkManagementService: void removeInterfaceFromLocalNetwork(java.lang.String)>
<android.os.INetworkManagementService: void delIpAcceptRule(java.lang.String,java.lang.String,java.lang.String)>
<android.os.INetworkManagementService: void stopInterfaceForwarding(java.lang.String,java.lang.String)>
<android.os.INetworkManagementService: void updateSourceRule(boolean,java.lang.String,java.lang.String)>
<android.os.INetworkManagementService: void addChain(java.lang.String,java.lang.String)>
<android.os.INetworkManagementService: void runKnoxRulesCommand(int,java.lang.String[])>
<android.os.INetworkManagementService: void setTcpBufferSize(java.lang.String,java.lang.String)>
<android.os.INetworkManagementService: void setNetworkGuardUidRangeAcceptRule(int,int)>
<android.os.INetworkManagementService: void removeLegacyRoute(int,java.lang.String,java.lang.String,java.lang.String,int)>
<android.os.INetworkManagementService: void registerNetdTetherEventListener()>
<android.os.INetworkManagementService: void removeRoute(int,android.net.RouteInfo)>
<android.os.INetworkManagementService: void spegRestrictNetworkConnection(int,boolean)>
<android.os.INetworkManagementService: void delSourceRoute(java.lang.String,java.lang.String,java.lang.String)>
<android.os.INetworkManagementService: void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider)>
<android.os.INetworkManagementService: void addSocksRule(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>
<android.os.INetworkManagementService: void delSourcePortAcceptRule(java.lang.String,java.lang.String,int)>
<android.os.INetworkManagementService: void setUIDRoute(boolean,java.lang.String,int,java.lang.String,java.lang.String)>
<android.os.INetworkManagementService: void setNetworkGuardProtocolAcceptRule(int)>
<android.os.INetworkManagementService: void updateDefaultGatewayForEpdg(android.net.Network)>
<android.os.INetworkManagementService: void addRoute(int,android.net.RouteInfo)>
<android.os.INetworkManagementService: void setQboxUid(int,boolean)>
<android.os.INetworkManagementService: void startQbox(java.lang.String)>
<android.os.INetworkManagementService: void setNetworkGuardUidRule(int,boolean,boolean)>
<android.os.INetworkManagementService: void updateInputFilterAppWideRules(int[],int,int)>
<com.android.net.IProxyService: int startProxyServerForKnoxProfile(java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String,int)>
<com.android.net.IProxyService: boolean isProxyThreadAlive(java.lang.String)>
<com.android.net.IProxyService: boolean isProxyThreadRunning(java.lang.String)>
<com.android.net.IProxyService: int getProxyPortForProfile(java.lang.String)>
<com.android.net.IProxyService: boolean startPacSystemForKnoxProfile(java.lang.String)>
<com.android.net.IProxyService: void resetInterface(java.lang.String)>
<com.android.net.IProxyService: boolean stopPacSystemForKnoxProfile(java.lang.String)>
<com.android.net.IProxyService: void stopProxyServerForKnoxProfile(java.lang.String)>
<com.android.net.IProxyService: boolean setPacFileForKnoxProfile(java.lang.String,java.lang.String)>
<com.android.net.IProxyService: java.lang.String getProxythreadStatus(java.lang.String)>
<com.android.net.IProxyService: boolean setMiscValueForPacProfile(int,java.lang.String,java.lang.String,int)>
<com.android.net.IProxyService: void handleScreenunlock()>
<com.samsung.android.emergencymode.IEmergencyManager: boolean isModifying()>
<com.samsung.android.emergencymode.IEmergencyManager: boolean isEmergencyMode()>
<com.samsung.android.emergencymode.IEmergencyManager: void setUserPackageBlocked(boolean)>
<com.samsung.android.emergencymode.IEmergencyManager: int getEmergencyState()>
<com.samsung.android.emergencymode.IEmergencyManager: boolean isUserPackageBlocked()>
<com.samsung.android.emergencymode.IEmergencyManager: boolean checkValidIntentAction(java.lang.String,java.lang.String)>
<com.samsung.android.emergencymode.IEmergencyManager: boolean checkInvalidProcess(java.lang.String)>
<com.samsung.android.emergencymode.IEmergencyManager: boolean needMobileDataBlock()>
<com.samsung.android.emergencymode.IEmergencyManager: boolean isScreenOn()>
<com.samsung.android.emergencymode.IEmergencyManager: void setLocationProviderEnabled(boolean)>
<com.samsung.android.emergencymode.IEmergencyManager: boolean addAppToLauncher(java.lang.String,boolean)>
<com.samsung.android.emergencymode.IEmergencyManager: boolean checkValidPackage(java.lang.String,java.lang.String,int)>
<com.samsung.android.emergencymode.IEmergencyManager: boolean checkInvalidBroadcast(java.lang.String,java.lang.String)>
<com.samsung.android.emergencymode.IEmergencyManager: boolean checkModeType(int)>
<android.location.ILocationManager: java.lang.String getExtraLocationControllerPackage()>
<android.location.ILocationManager: void registerLocationPendingIntent(java.lang.String,android.location.LocationRequest,android.app.PendingIntent,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: java.lang.String getGnssHardwareModelName()>
<android.location.ILocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.location.ILocationManager: boolean isAutomotiveGnssSuspended()>
<android.location.ILocationManager: int getGnssYearOfHardware()>
<android.location.ILocationManager: void setAdasGnssLocationEnabledForUser(boolean,int)>
<android.location.ILocationManager: android.os.PackageTagsList getIgnoreSettingsAllowlist()>
<android.location.ILocationManager: void unregisterGnssNmeaCallback(android.location.IGnssNmeaListener)>
<android.location.ILocationManager: android.location.provider.ProviderProperties getProviderProperties(java.lang.String)>
<android.location.ILocationManager: void setExtraLocationControllerPackage(java.lang.String)>
<android.location.ILocationManager: void getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,android.location.IGeocodeListener)>
<android.location.ILocationManager: android.location.GnssCapabilities getGnssCapabilities()>
<android.location.ILocationManager: void onFreezeStateChanged(boolean,int)>
<android.location.ILocationManager: void requestListenerFlush(java.lang.String,android.location.ILocationListener,int)>
<android.location.ILocationManager: boolean isProviderPackage(java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void notifyNSFLP(android.os.Message)>
<android.location.ILocationManager: void unregisterLocationListener(android.location.ILocationListener)>
<android.location.ILocationManager: void unregisterLocationPendingIntent(android.app.PendingIntent)>
<android.location.ILocationManager: boolean geocoderIsPresent()>
<android.location.ILocationManager: void setLocationEnabledForUser(boolean,int)>
<android.location.ILocationManager: boolean isProviderEnabledForUser(java.lang.String,int)>
<android.location.ILocationManager: void removeTestProvider(java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void addProviderRequestListener(android.location.provider.IProviderRequestListener)>
<android.location.ILocationManager: android.os.PackageTagsList getAdasAllowlist()>
<android.location.ILocationManager: void removeGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener)>
<android.location.ILocationManager: void registerLocationListener(java.lang.String,android.location.LocationRequest,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void setTestProviderLocation(java.lang.String,android.location.Location,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void requestPendingIntentFlush(java.lang.String,android.app.PendingIntent,int)>
<android.location.ILocationManager: void startGnssBatch(long,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void flushGnssBatch()>
<android.location.ILocationManager: java.util.List getAllProviders()>
<android.location.ILocationManager: java.util.List getProviderPackages(java.lang.String)>
<android.location.ILocationManager: void injectLocation(android.location.Location)>
<android.location.ILocationManager: boolean hasProvider(java.lang.String)>
<android.location.ILocationManager: void addTestProvider(java.lang.String,android.location.provider.ProviderProperties,java.util.List,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void removeGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener)>
<android.location.ILocationManager: java.util.List getGnssAntennaInfos()>
<android.location.ILocationManager: void injectGnssMeasurementCorrections(android.location.GnssMeasurementCorrections)>
<android.location.ILocationManager: void removeProviderRequestListener(android.location.provider.IProviderRequestListener)>
<android.location.ILocationManager: void unregisterGnssStatusCallback(android.location.IGnssStatusListener)>
<android.location.ILocationManager: android.location.LocationTime getGnssTimeMillis()>
<android.location.ILocationManager: java.util.Map getGPSUsingApps()>
<android.location.ILocationManager: boolean isLocationEnabledForUser(int)>
<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
<android.location.ILocationManager: void getFromLocation(double,double,int,android.location.GeocoderParams,android.location.IGeocodeListener)>
<android.location.ILocationManager: android.location.Location getLastLocation(java.lang.String,android.location.LastLocationRequest,java.lang.String,java.lang.String)>
<android.location.ILocationManager: android.os.ICancellationSignal getCurrentLocation(java.lang.String,android.location.LocationRequest,android.location.ILocationCallback,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void addGnssMeasurementsListener(android.location.GnssMeasurementRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void setTestProviderEnabled(java.lang.String,boolean,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void setAutomotiveGnssSuspended(boolean)>
<android.location.ILocationManager: void requestGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void stopGnssBatch()>
<android.location.ILocationManager: void sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.location.ILocationManager: java.lang.String[] getBackgroundThrottlingWhitelist()>
<android.location.ILocationManager: int getGnssBatchSize()>
<android.location.ILocationManager: void registerGnssNmeaCallback(android.location.IGnssNmeaListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: boolean isAdasGnssLocationEnabledForUser(int)>
<android.location.ILocationManager: void removeGeofence(android.app.PendingIntent)>
<android.location.ILocationManager: void setExtraLocationControllerPackageEnabled(boolean)>
<android.location.ILocationManager: boolean isExtraLocationControllerPackageEnabled()>
<android.location.ILocationManager: void registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void removeGnssMeasurementsListener(android.location.IGnssMeasurementsListener)>
<android.location.provider.IProviderRequestListener: void onProviderRequestChanged(java.lang.String,android.location.provider.ProviderRequest)>
<com.samsung.android.knox.mpos.IMPOSService: boolean loadTa(int,android.os.ParcelFileDescriptor,long,long,com.samsung.android.knox.mpos.MposTZServiceConfig)>
<com.samsung.android.knox.mpos.IMPOSService: com.samsung.android.knox.mpos.TACommandResponse processTACommand(int,com.samsung.android.knox.mpos.TACommandRequest)>
<com.samsung.android.knox.mpos.IMPOSService: boolean unloadTa(int)>
<com.android.internal.carlife.IStatusBarCarLife: void showTransient(int,int,boolean)>
<com.android.internal.carlife.IStatusBarCarLife: void abortTransient(int,int)>
<com.android.internal.carlife.IStatusBarCarLife: void onSystemBarAttributesChanged(int,int,com.android.internal.view.AppearanceRegion[],boolean,int,int,java.lang.String)>
<com.samsung.android.security.IDirEncryptServiceListener: void onEncryptionStatusChanged(java.lang.String,int,java.lang.String,int,int)>
<com.samsung.android.smartface.ISmartFaceService: boolean register(com.samsung.android.smartface.ISmartFaceClient,int)>
<com.samsung.android.smartface.ISmartFaceService: void setValue(com.samsung.android.smartface.ISmartFaceClient,java.lang.String,java.lang.String)>
<com.samsung.android.smartface.ISmartFaceService: int getSupportedServices()>
<com.samsung.android.smartface.ISmartFaceService: void registerAsync(com.samsung.android.smartface.ISmartFaceClient,int)>
<com.samsung.android.smartface.ISmartFaceService: void unregister(com.samsung.android.smartface.ISmartFaceClient)>
<com.samsung.android.smartface.ISmartFaceService: void unregisterAsync(com.samsung.android.smartface.ISmartFaceClient)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: boolean isKeyPressedByKeycode(int)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int setAodEnable(int)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int setSingletapEnable(int)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: java.lang.String getCommandList(com.samsung.android.hardware.secinputdev.SemInputConstants$Device)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: boolean registerListener(android.os.IBinder,int,java.lang.String)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int setAodRect(int,int,int,int)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int setFodEnable(int,int,int)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int setSyncChanged(int)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int setMotionControl(java.lang.String,int,java.lang.String)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int setTspEnabled(int,int,boolean)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int sendRawdataTsp(com.samsung.android.hardware.secinputdev.SemInputConstants$Device,int[])>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int getTspSupportFeature(com.samsung.android.hardware.secinputdev.SemInputConstants$Device)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: java.lang.String getKeyPressStateAll()>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int setSpenEnabled(int,int,boolean)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: boolean unregisterListener(android.os.IBinder,int,java.lang.String)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int getMotionControl(java.lang.String,java.lang.String)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: java.lang.String runCommand(com.samsung.android.hardware.secinputdev.SemInputConstants$Device,java.lang.String)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int getDeviceEnabled(com.samsung.android.hardware.secinputdev.SemInputConstants$Device)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int setFodLpMode(int)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: java.lang.String getProperty(com.samsung.android.hardware.secinputdev.SemInputConstants$Device,com.samsung.android.hardware.secinputdev.SemInputConstants$Property)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: boolean isSupportMotion(java.lang.String)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int enableMotion(java.lang.String,boolean,java.lang.String)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int setFodRect(int,int,int,int)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int setProperty(com.samsung.android.hardware.secinputdev.SemInputConstants$Device,com.samsung.android.hardware.secinputdev.SemInputConstants$Property,java.lang.String)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int activate(com.samsung.android.hardware.secinputdev.SemInputConstants$Device,com.samsung.android.hardware.secinputdev.SemInputConstants$DisplayState,boolean)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int isEnableMotion(java.lang.String,java.lang.String)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int getSupportDevice(com.samsung.android.hardware.secinputdev.SemInputConstants$Device)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int setCommand(com.samsung.android.hardware.secinputdev.SemInputConstants$Device,com.samsung.android.hardware.secinputdev.SemInputConstants$Command,java.lang.String)>
<com.samsung.android.hardware.secinputdev.ISemInputDeviceManager: int setTemperature(int)>
<android.app.usage.IUsageStatsManager: void unregisterUsageStatsWatcher(com.samsung.android.app.usage.IUsageStatsWatcher)>
<android.app.usage.IUsageStatsManager: void deleteUsageStats()>
<android.app.usage.IUsageStatsManager: void registerUsageStatsWatcher(com.samsung.android.app.usage.IUsageStatsWatcher)>
<android.app.usage.IUsageStatsManager: void registerUsageStatsWatcherWithComponent(com.samsung.android.app.usage.IUsageStatsWatcher,java.util.List)>
<android.location.IGeofenceProvider: void setGeofenceHardware(android.hardware.location.IGeofenceHardware)>
<com.samsung.android.knox.app.networkfilter.INetworkFilterProxy: boolean isProxyThreadAlive()>
<com.samsung.android.knox.app.networkfilter.INetworkFilterProxy: int getV6LocalProxyPort()>
<com.samsung.android.knox.app.networkfilter.INetworkFilterProxy: int registerRemoteProxyAddr(java.lang.String,java.lang.String)>
<com.samsung.android.knox.app.networkfilter.INetworkFilterProxy: boolean isV6ProxyThreadRunning()>
<com.samsung.android.knox.app.networkfilter.INetworkFilterProxy: void vpnMessengerForDnsQuery(android.os.IBinder)>
<com.samsung.android.knox.app.networkfilter.INetworkFilterProxy: java.util.List getListener(java.lang.String)>
<com.samsung.android.knox.app.networkfilter.INetworkFilterProxy: int setConfig(java.lang.String,java.lang.String)>
<com.samsung.android.knox.app.networkfilter.INetworkFilterProxy: java.lang.String getProxythreadStatus()>
<com.samsung.android.knox.app.networkfilter.INetworkFilterProxy: int stopV6ProxyServer()>
<com.samsung.android.knox.app.networkfilter.INetworkFilterProxy: java.lang.String getV6LocalProxyAddress()>
<com.samsung.android.knox.app.networkfilter.INetworkFilterProxy: int startV6ProxyServer()>
<com.samsung.android.knox.app.networkfilter.INetworkFilterProxy: java.lang.String getV6ProxythreadStatus()>
<com.samsung.android.knox.app.networkfilter.INetworkFilterProxy: int getLocalProxyPort()>
<com.samsung.android.knox.app.networkfilter.INetworkFilterProxy: int stopProxyServer()>
<com.samsung.android.knox.app.networkfilter.INetworkFilterProxy: boolean isProxyThreadRunning()>
<com.samsung.android.knox.app.networkfilter.INetworkFilterProxy: int startProxyServer()>
<com.samsung.android.knox.app.networkfilter.INetworkFilterProxy: java.lang.String getLocalProxyAddress()>
<com.samsung.android.knox.app.networkfilter.INetworkFilterProxy: boolean isV6ProxyThreadAlive()>
<com.samsung.android.knox.app.networkfilter.INetworkFilterProxy: void updateApplicationInfo(java.lang.String,int,java.lang.String,java.lang.String,int)>
<android.hardware.IDeviceInjectorSession: void stopDeviceInjector()>
<android.hardware.IDeviceInjectorSession: void setDeviceInjectorPending(boolean)>
<android.view.accessibility.IWindowMagnificationConnection: void moveWindowMagnifierToPosition(int,float,float,android.view.accessibility.IRemoteMagnificationAnimationCallback)>
<android.view.accessibility.IWindowMagnificationConnection: void removeMagnificationButton(int)>
<android.view.accessibility.IWindowMagnificationConnection: void showMagnificationButton(int,int)>
<android.view.accessibility.IWindowMagnificationConnection: void enableWindowMagnification(int,float,float,float,float,float,android.view.accessibility.IRemoteMagnificationAnimationCallback)>
<android.view.accessibility.IWindowMagnificationConnection: void setScale(int,float)>
<android.view.accessibility.IWindowMagnificationConnection: void removeMagnificationSettingsPanel(int)>
<android.view.accessibility.IWindowMagnificationConnection: void setConnectionCallback(android.view.accessibility.IWindowMagnificationConnectionCallback)>
<android.view.accessibility.IWindowMagnificationConnection: void disableWindowMagnification(int,android.view.accessibility.IRemoteMagnificationAnimationCallback)>
<android.view.accessibility.IWindowMagnificationConnection: void moveWindowMagnifier(int,float,float)>
<com.samsung.android.ims.ft.SemImsFtListener: void onFtStateChanged(boolean)>
<com.samsung.android.camera.iris.IIrisDaemon: int enroll(byte[],int,int)>
<com.samsung.android.camera.iris.IIrisDaemon: int setActiveGroup(int,byte[])>
<com.samsung.android.camera.iris.IIrisDaemon: void sendIRProperty(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.samsung.android.camera.iris.IIrisDaemon: android.os.IBinder createInputSurface(int,int,int)>
<com.samsung.android.camera.iris.IIrisDaemon: int request(int,byte[],byte[],int)>
<com.samsung.android.camera.iris.IIrisDaemon: long preEnroll()>
<com.samsung.android.camera.iris.IIrisDaemon: long openHal()>
<com.samsung.android.camera.iris.IIrisDaemon: int remove(int,int)>
<com.samsung.android.camera.iris.IIrisDaemon: int cancelEnrollment()>
<com.samsung.android.camera.iris.IIrisDaemon: void processFrontImage(android.os.ParcelFileDescriptor,int,int,int)>
<com.samsung.android.camera.iris.IIrisDaemon: int releasePreviewSurface()>
<com.samsung.android.camera.iris.IIrisDaemon: int authenticate(long,int,byte[])>
<com.samsung.android.camera.iris.IIrisDaemon: int cancelAuthentication()>
<com.samsung.android.camera.iris.IIrisDaemon: void init(com.samsung.android.camera.iris.IIrisDaemonCallback)>
<com.samsung.android.camera.iris.IIrisDaemon: int cancelEnumeration()>
<com.samsung.android.camera.iris.IIrisDaemon: int postEnroll()>
<com.samsung.android.camera.iris.IIrisDaemon: int setPreviewTarget(android.os.IBinder)>
<com.samsung.android.camera.iris.IIrisDaemon: int closeHal()>
<com.samsung.android.camera.iris.IIrisDaemon: int enumerate()>
<com.samsung.android.camera.iris.IIrisDaemon: void processIRImage(android.os.ParcelFileDescriptor,int,int,int)>
<com.samsung.android.camera.iris.IIrisDaemon: int release(int)>
<com.samsung.android.camera.iris.IIrisDaemon: long getAuthenticatorId()>
<android.hardware.display.IExynosDisplaySolutionManager: float[] getRgbGain()>
<android.hardware.display.IExynosDisplaySolutionManager: void setEdgeSharpnessSettingValue(int)>
<android.hardware.display.IExynosDisplaySolutionManager: void setSkinColorSettingOn(int)>
<android.hardware.display.IExynosDisplaySolutionManager: void setEyeTempSettingOn(int)>
<android.hardware.display.IExynosDisplaySolutionManager: void setColorTempSettingValue(int)>
<android.hardware.display.IExynosDisplaySolutionManager: void setColorEnhancementSettingValue(int)>
<android.hardware.display.IExynosDisplaySolutionManager: void setRgbGainSettingValue(int,int,int)>
<android.hardware.display.IExynosDisplaySolutionManager: void setColorTempSettingOn(int)>
<android.hardware.display.IExynosDisplaySolutionManager: void setRgbGain(float,float,float)>
<android.hardware.display.IExynosDisplaySolutionManager: void setHsvGainSettingValue(int,int,int)>
<android.hardware.display.IExynosDisplaySolutionManager: void setEyeTempSettingValue(int)>
<android.hardware.display.IExynosDisplaySolutionManager: void setHsvGainSettingOn(int)>
<android.hardware.display.IExynosDisplaySolutionManager: void setRgbGainSettingOn(int)>
<android.hardware.display.IExynosDisplaySolutionManager: void setWhitePointColorSettingOn(int)>
<android.hardware.display.IExynosDisplaySolutionManager: void setEdgeSharpnessSettingOn(int)>
<android.hardware.display.IExynosDisplaySolutionManager: java.lang.String getColorEnhancementMode()>
<android.hardware.display.IExynosDisplaySolutionManager: void setDisplayFeature(java.lang.String,int,int,java.lang.String)>
<com.samsung.android.game.IGameManagerService: boolean disableVrrControl(java.lang.String)>
<com.samsung.android.game.IGameManagerService: boolean initGameManager(int,java.util.Map)>
<com.samsung.android.game.IGameManagerService: com.samsung.android.game.PkgData getGamePkgDataIncServer(java.lang.String)>
<com.samsung.android.game.IGameManagerService: boolean enableVrrControl(java.lang.String)>
<com.samsung.android.game.IGameManagerService: java.lang.String getSosPolicy(java.lang.String)>
<com.samsung.android.game.IGameManagerService: java.lang.String requestWithJson(java.lang.String,java.lang.String)>
<com.samsung.android.game.IGameManagerService: java.lang.String getForegroundApp()>
<com.samsung.android.game.IGameManagerService: int identifyGamePackage(java.lang.String)>
<com.samsung.android.game.IGameManagerService: boolean setTargetFrameRate(android.os.IBinder,int)>
<com.samsung.android.game.IGameManagerService: boolean unregisterCallback(com.samsung.android.game.IGameManagerCallback)>
<com.samsung.android.game.IGameManagerService: java.util.List getGameList()>
<com.samsung.android.game.IGameManagerService: java.lang.String getVersion()>
<com.samsung.android.game.IGameManagerService: boolean registerCallback(com.samsung.android.game.IGameManagerCallback)>
<com.samsung.android.game.IGameManagerService: void syncGameList(java.util.Map)>
<com.samsung.android.game.IGameManagerService: boolean setPackageConfigurations(java.util.List)>
<com.samsung.android.game.IGameManagerService: int identifyForegroundApp()>
<com.samsung.android.game.IGameManagerService: boolean setPerformanceMode(int,java.lang.String)>
<com.samsung.android.game.IGameManagerService: java.lang.String getTopActivityName()>
<com.samsung.android.sepunion.IGalaxyRegistryService: void registerListener(java.lang.String,android.os.IBinder)>
<com.samsung.android.sepunion.IGalaxyRegistryService: void unRegisterListener(java.lang.String,android.os.IBinder)>
<android.view.accessibility.IAccessibilityManager: boolean semIsAccessibilityServiceEnabled(int)>
<android.view.accessibility.IAccessibilityManager: boolean semDisableMdnieColorFilter()>
<android.view.accessibility.IAccessibilityManager: java.lang.String getScreenReaderName()>
<android.view.accessibility.IAccessibilityManager: void semPerformAccessibilityButtonClick(int,int,java.lang.String)>
<android.view.accessibility.IAccessibilityManager: boolean semSetColorBlind(boolean,float)>
<android.view.accessibility.IAccessibilityManager: void semEnableWindowMagnification(int,int)>
<android.view.accessibility.IAccessibilityManager: void semOpenDeviceOptions()>
<android.view.accessibility.IAccessibilityManager: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)>
<android.view.accessibility.IAccessibilityManager: java.util.List getInstalledAccessibilityServiceList(int)>
<android.view.accessibility.IAccessibilityManager: boolean OnStopGestureWakeup()>
<android.view.accessibility.IAccessibilityManager: int convertPixelToDpi(float)>
<android.view.accessibility.IAccessibilityManager: boolean semEnableMdnieColorFilter(int,int)>
<android.view.accessibility.IAccessibilityManager: void semTurnOnAccessibilityService(int)>
<android.view.accessibility.IAccessibilityManager: boolean semCheckMdnieColorBlind(int[])>
<android.view.accessibility.IAccessibilityManager: boolean isScreenReaderEnabled()>
<android.view.accessibility.IAccessibilityManager: void semLockNow()>
<android.view.accessibility.IAccessibilityManager: void setTalkbackMode()>
<android.view.accessibility.IAccessibilityManager: void semMoveWindowMagnification(float,float)>
<android.view.accessibility.IAccessibilityManager: boolean OnStartGestureWakeup()>
<android.view.accessibility.IAccessibilityManager: boolean semSetMdnieAccessibilityMode(int,boolean)>
<android.view.accessibility.IAccessibilityManager: void semRegisterAssistantMenu(android.os.IBinder)>
<android.view.accessibility.IAccessibilityManager: boolean semIsAccessibilityButtonShown()>
<android.view.accessibility.IAccessibilityManager: void semDisableWindowMagnification()>
<android.view.accessibility.IAccessibilityManager: void semTurnOffAccessibilityService(int)>
<android.view.accessibility.IAccessibilityManager: void semToggleDarkScreenMode()>
<android.view.accessibility.IAccessibilityManager: void setScreenReaderEnabled(boolean)>
<android.view.accessibility.IAccessibilityManager: void performAccessibilityDirectAccess(java.lang.String)>
<android.view.accessibility.IAccessibilityManager: boolean semIsWindowMagnificationEnabled()>
<android.view.accessibility.IAccessibilityManager: void semSetTwoFingerGestureRecognitionEnabled(boolean)>
<android.view.accessibility.IAccessibilityManager: boolean isTwoFingerGestureRecognitionEnabled()>
<android.view.accessibility.IAccessibilityManager: void setMagnificationDisactivate()>
<android.view.accessibility.IAccessibilityManager: android.graphics.Rect semGetWindowMagnificationBounds()>
<android.view.accessibility.IAccessibilityManager: float semGetWindowMagnificationScale()>
<android.view.accessibility.IAccessibilityManager: void semDumpCallStack(java.lang.String)>
<android.view.accessibility.IAccessibilityManager: boolean isActivatedMagnification()>
<android.view.accessibility.IAccessibilityManager: void semUpdateAssitantMenu(android.os.Bundle)>
<android.view.accessibility.IAccessibilityManager: boolean semIsDarkScreenMode()>
<android.view.selectiontoolbar.ISelectionToolbarManager: void hideToolbar(long,int)>
<android.view.selectiontoolbar.ISelectionToolbarManager: void showToolbar(android.view.selectiontoolbar.ShowInfo,android.view.selectiontoolbar.ISelectionToolbarCallback,int)>
<android.view.selectiontoolbar.ISelectionToolbarManager: void dismissToolbar(long,int)>
<android.service.selectiontoolbar.ISelectionToolbarRenderService: void onHide(long)>
<android.service.selectiontoolbar.ISelectionToolbarRenderService: void onShow(int,android.view.selectiontoolbar.ShowInfo,android.view.selectiontoolbar.ISelectionToolbarCallback)>
<android.service.selectiontoolbar.ISelectionToolbarRenderService: void onDismiss(int,long)>
<android.service.selectiontoolbar.ISelectionToolbarRenderService: void onConnected(android.os.IBinder)>
<com.samsung.android.multiwindow.IDragAndDropControllerProxy: void show(int)>
<android.hardware.biometrics.IBiometricServiceReceiver: void onSemAuthenticationSucceeded(int,int,byte[])>
<android.app.IUiModeManager: void setPackageNightMode(java.lang.String,int,int)>
<android.app.IUiModeManager: void addNightPriorityAllowedPackageFromShell(java.lang.String)>
<android.app.IUiModeManager: void setDesktopMode(boolean)>
<android.app.IUiModeManager: void removeCallback(android.app.IUiModeManagerCallback)>
<android.app.IUiModeManager: void resetNightPriorityAppliedPackages(int)>
<android.app.IUiModeManager: int getPackageNightMode(java.lang.String,int)>
<android.app.IUiModeManager: java.util.List getNightPriorityAllowedPackagesFromScpm()>
<android.app.IUiModeManager: void setNightPriorityAllowedPackagesFromScpm(java.util.List)>
<android.os.ILazyService: android.os.IBinder getService(java.lang.String)>
<com.samsung.android.biometrics.ISemBiometricSysUiService: void setBiometricTheme(int,java.lang.String,byte[],java.io.FileDescriptor)>
<com.samsung.android.biometrics.ISemBiometricSysUiService: void hideBiometricDialog(int,int,int)>
<com.samsung.android.biometrics.ISemBiometricSysUiService: void onBiometricHelp(int,int,int,int,java.lang.String)>
<com.samsung.android.biometrics.ISemBiometricSysUiService: void onBiometricError(int,int,int,int,java.lang.String)>
<com.samsung.android.biometrics.ISemBiometricSysUiService: void showBiometricDialog(int,int,android.os.Bundle,com.samsung.android.biometrics.ISemBiometricSysUiCallback,boolean,int,java.lang.String,long,android.hardware.biometrics.PromptInfo)>
<com.samsung.android.biometrics.ISemBiometricSysUiService: void sendCommand(int,int,int,android.os.Bundle)>
<com.samsung.android.biometrics.ISemBiometricSysUiService: void onBiometricAuthenticated(int,int,boolean,java.lang.String)>
<android.os.ISpegHelperService: boolean storePrimaryProf(java.lang.String,java.lang.String,int)>
<android.os.ISpegHelperService: boolean createOrDeleteMarkerFiles(java.lang.String,boolean,int)>
<com.samsung.android.view.IRemoteAnimationMergeCallback: void onAnimationMerged()>
<com.samsung.android.wifi.ai.ISemWifiAiService: void serviceTypeQuery(float[][],java.lang.String[],int[],int)>
<com.samsung.android.wifi.ai.ISemWifiAiService: void toggleDebugMode(boolean)>
<android.service.controls.IControlsProviderInfoSubscriber: void onNext(android.os.IBinder,android.service.controls.ControlsProviderInfo)>
<android.hardware.fingerprint.IUdfpsOverlay: void show(long,int,int)>
<android.hardware.fingerprint.IUdfpsOverlay: void hide(int)>
<com.samsung.android.cocktailbar.ICocktailBarService: boolean bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.app.IApplicationThread,android.os.IBinder,android.app.IServiceConnection,int)>
<com.samsung.android.cocktailbar.ICocktailBarService: int[] getCocktailIds(java.lang.String,android.content.ComponentName)>
<com.samsung.android.cocktailbar.ICocktailBarService: void partiallyUpdateCocktail(java.lang.String,android.widget.RemoteViews,int)>
<com.samsung.android.cocktailbar.ICocktailBarService: java.lang.String getCategoryFilterStr()>
<com.samsung.android.cocktailbar.ICocktailBarService: void updateWakeupGesture(int,boolean)>
<com.samsung.android.cocktailbar.ICocktailBarService: int getCocktailBarVisibility()>
<com.samsung.android.cocktailbar.ICocktailBarService: int getWindowType()>
<com.samsung.android.cocktailbar.ICocktailBarService: void setCocktailBarWakeUpState(boolean)>
<com.samsung.android.cocktailbar.ICocktailBarService: void activateCocktailBar()>
<com.samsung.android.cocktailbar.ICocktailBarService: void removeCocktailUIService()>
<com.samsung.android.cocktailbar.ICocktailBarService: int getCocktailId(java.lang.String,android.content.ComponentName)>
<com.samsung.android.cocktailbar.ICocktailBarService: void closeCocktail(java.lang.String,int,int)>
<com.samsung.android.cocktailbar.ICocktailBarService: int getConfigVersion()>
<com.samsung.android.cocktailbar.ICocktailBarService: boolean isEnabledCocktail(java.lang.String,android.content.ComponentName)>
<com.samsung.android.cocktailbar.ICocktailBarService: void updateCocktail(java.lang.String,com.samsung.android.cocktailbar.CocktailInfo,int)>
<com.samsung.android.cocktailbar.ICocktailBarService: void startListening(com.samsung.android.cocktailbar.ICocktailHost,java.lang.String,int)>
<com.samsung.android.cocktailbar.ICocktailBarService: void registerCocktailBarStateListenerCallback(android.os.IBinder,android.content.ComponentName)>
<com.samsung.android.cocktailbar.ICocktailBarService: void setEnabledCocktailIds(int[])>
<com.samsung.android.cocktailbar.ICocktailBarService: void partiallyUpdateHelpView(java.lang.String,android.widget.RemoteViews,int)>
<com.samsung.android.cocktailbar.ICocktailBarService: boolean getCocktaiBarWakeUpState()>
<com.samsung.android.cocktailbar.ICocktailBarService: void updateCocktailBarVisibility(int)>
<com.samsung.android.cocktailbar.ICocktailBarService: void notifyCocktailVisibiltyChanged(int,int)>
<com.samsung.android.cocktailbar.ICocktailBarService: void notifyKeyguardState(boolean)>
<com.samsung.android.cocktailbar.ICocktailBarService: com.samsung.android.cocktailbar.CocktailBarStateInfo getCocktailBarStateInfo()>
<com.samsung.android.cocktailbar.ICocktailBarService: void unbindRemoteViewsService(java.lang.String,int,android.content.Intent)>
<com.samsung.android.cocktailbar.ICocktailBarService: boolean requestToDisableCocktail(int)>
<com.samsung.android.cocktailbar.ICocktailBarService: int getPreferWidth()>
<com.samsung.android.cocktailbar.ICocktailBarService: boolean isCocktailEnabled(java.lang.String,android.content.ComponentName)>
<com.samsung.android.cocktailbar.ICocktailBarService: void setCocktailHostCallbacks(com.samsung.android.cocktailbar.ICocktailHost,java.lang.String,int)>
<com.samsung.android.cocktailbar.ICocktailBarService: void registerSystemUiVisibilityListenerCallback(android.os.IBinder,android.content.ComponentName)>
<com.samsung.android.cocktailbar.ICocktailBarService: void disableCocktail(java.lang.String,android.content.ComponentName)>
<com.samsung.android.cocktailbar.ICocktailBarService: void notifyCocktailViewDataChanged(java.lang.String,int,int)>
<com.samsung.android.cocktailbar.ICocktailBarService: void stopListening(java.lang.String)>
<com.samsung.android.cocktailbar.ICocktailBarService: int getSystemBarAppearance()>
<com.samsung.android.cocktailbar.ICocktailBarService: void setOnPullPendingIntent(java.lang.String,int,int,android.app.PendingIntent)>
<com.samsung.android.cocktailbar.ICocktailBarService: void unregisterCocktailBarStateListenerCallback(android.os.IBinder)>
<com.samsung.android.cocktailbar.ICocktailBarService: void updateWakeupArea(int)>
<com.samsung.android.cocktailbar.ICocktailBarService: int[] getAllCocktailIds()>
<com.samsung.android.cocktailbar.ICocktailBarService: int[] getEnabledCocktailIds()>
<com.samsung.android.cocktailbar.ICocktailBarService: void updateCocktailBarWindowType(java.lang.String,int)>
<com.samsung.android.cocktailbar.ICocktailBarService: boolean requestToUpdateCocktailByCategory(int)>
<com.samsung.android.cocktailbar.ICocktailBarService: boolean requestToUpdateCocktail(int)>
<com.samsung.android.cocktailbar.ICocktailBarService: void deactivateCocktailBar()>
<com.samsung.android.cocktailbar.ICocktailBarService: void showCocktail(java.lang.String,int)>
<com.samsung.android.cocktailbar.ICocktailBarService: java.lang.String getHideEdgeListStr()>
<com.samsung.android.cocktailbar.ICocktailBarService: boolean isBoundCocktailPackage(java.lang.String,int)>
<com.samsung.android.cocktailbar.ICocktailBarService: void updateCocktailBarPosition(int)>
<com.samsung.android.cocktailbar.ICocktailBarService: com.samsung.android.cocktailbar.Cocktail getCocktail(int)>
<com.samsung.android.cocktailbar.ICocktailBarService: boolean requestToDisableCocktailByCategory(int)>
<com.samsung.android.cocktailbar.ICocktailBarService: void sendExtraDataToCocktailBar(android.os.Bundle)>
<com.samsung.android.cocktailbar.ICocktailBarService: void unregisterSystemUiVisibilityListenerCallback(android.os.IBinder)>
<android.view.selectiontoolbar.ISelectionToolbarCallback: void onShown(android.view.selectiontoolbar.WidgetInfo)>
<android.view.selectiontoolbar.ISelectionToolbarCallback: void onError(int)>
<android.view.selectiontoolbar.ISelectionToolbarCallback: void onToolbarShowTimeout()>
<android.view.selectiontoolbar.ISelectionToolbarCallback: void onWidgetUpdated(android.view.selectiontoolbar.WidgetInfo)>
<android.view.selectiontoolbar.ISelectionToolbarCallback: void onMenuItemClicked(android.view.selectiontoolbar.ToolbarMenuItem)>
<android.hardware.input.IWirelessKeyboardShareChangedListener: void onWirelessKeyboardShareChanged(long,int,java.lang.String)>
<com.samsung.android.location.ISLocationListener: void onLocationChanged(android.location.Location,android.location.Address)>
<com.samsung.android.location.ISLocationListener: void onLocationAvailable(android.location.Location[])>
<android.location.ICountryDetector: void removeCountryListener(android.location.ICountryListener)>
<android.location.ICountryDetector: android.location.Country detectCountry()>
<android.location.ICountryDetector: void addCountryListener(android.location.ICountryListener)>
<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionCancelTransferred()>
<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionCancelTransferFailed(android.telephony.ims.ImsReasonInfo)>
<android.telephony.ims.aidl.IImsCallSessionListener: void callSessionImsCallEvent(java.lang.String,android.os.Bundle)>
<com.android.net.IProxyCallback: void setEnterpriseProxy(boolean)>
<com.android.net.IProxyCallback: void onCredentialsReceived(android.os.Bundle,android.sec.enterprise.proxy.IProxyCredentialsCallback)>
<com.android.net.IProxyCallback: void clearProxyServerCache()>
<com.samsung.android.cocktailbar.ICocktailHost: void noteResumeComponent(android.content.ComponentName)>
<com.samsung.android.cocktailbar.ICocktailHost: void showCocktail(int,int)>
<com.samsung.android.cocktailbar.ICocktailHost: void notifyKeyguardState(boolean,int)>
<com.samsung.android.cocktailbar.ICocktailHost: void sendExtraData(int,android.os.Bundle)>
<com.samsung.android.cocktailbar.ICocktailHost: void partiallyUpdateCocktail(int,android.widget.RemoteViews,int)>
<com.samsung.android.cocktailbar.ICocktailHost: void setPullToRefresh(int,int,android.app.PendingIntent,int)>
<com.samsung.android.cocktailbar.ICocktailHost: void updateToolLauncher(int)>
<com.samsung.android.cocktailbar.ICocktailHost: void viewDataChanged(int,int,int)>
<com.samsung.android.cocktailbar.ICocktailHost: void changeVisibleEdgeService(boolean,int)>
<com.samsung.android.cocktailbar.ICocktailHost: void closeCocktail(int,int,int)>
<com.samsung.android.cocktailbar.ICocktailHost: void partiallyUpdateHelpView(int,android.widget.RemoteViews,int)>
<com.samsung.android.cocktailbar.ICocktailHost: void switchDefaultCocktail(int)>
<com.samsung.android.cocktailbar.ICocktailHost: void notifyWakeUpState(boolean,int,int)>
<com.samsung.android.cocktailbar.ICocktailHost: void removeCocktail(int,int)>
<com.samsung.android.cocktailbar.ICocktailHost: void notePauseComponent(android.content.ComponentName)>
<com.samsung.android.cocktailbar.ICocktailHost: void setDisableTickerView(int,int)>
<com.samsung.android.cocktailbar.ICocktailHost: void updateCocktail(int,com.samsung.android.cocktailbar.Cocktail,int)>
<android.apex.IApexService: android.apex.ApexInfo installAndActivatePackage(java.lang.String)>
<com.samsung.android.knox.util.ISemKeyStoreService: void grantAccessForAKS(int,java.lang.String)>
<com.samsung.android.knox.util.ISemKeyStoreService: int isAliasExists(java.lang.String)>
<com.samsung.android.knox.util.ISemKeyStoreService: int installCACert(com.samsung.android.knox.util.SemCertAndroidKeyStore)>
<com.samsung.android.knox.util.ISemKeyStoreService: int installCertificateInAndroidKeyStore(com.samsung.android.knox.util.SemCertByte,java.lang.String,char[],int)>
<com.samsung.android.knox.util.ISemKeyStoreService: int getKeystoreStatus()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean exitMultiWindow(android.os.IBinder,boolean)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void saveFreeformBounds(int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void setCornerGestureEnabledWithSettings(boolean)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: android.content.pm.StringParceledListSlice getMultiWindowBlockListApp()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void setBoostFreeformTaskLayer(int,boolean)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean removeFocusedTask(int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean startNaturalSwitching()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean getEmbedActivityPackageEnabled(java.lang.String,int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void setCandidateTask(int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void setEmbedActivityPackageEnabled(java.lang.String,boolean,int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void finishNaturalSwitching()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: android.graphics.PointF getFreeformContainerPoint()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void reportFreeformContainerPoint(android.graphics.PointF)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: java.util.List getAllowedMultiWindowPackageList()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void setMultiWindowEnabledForUser(java.lang.String,java.lang.String,boolean,int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean hasMinimizedToggleTasks()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean isSplitImmersiveModeEnabled()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: android.content.pm.StringParceledListSlice getMWDisableRequesters()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean isVisibleTaskByTaskIdInDexDisplay(int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean isAllowedMultiWindowPackage(java.lang.String)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void registerFreeformCallback(com.samsung.android.multiwindow.IFreeformCallback)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void unregisterFreeformCallback(com.samsung.android.multiwindow.IFreeformCallback)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void unregisterRemoteAppTransitionListener(com.samsung.android.multiwindow.IRemoteAppTransitionListener)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: android.content.pm.ParceledListSlice getMinimizedFreeformTasksForCurrentUser()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void initDockingBounds(android.graphics.Rect,android.graphics.Rect,int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void registerDexSnappingCallback(com.samsung.android.multiwindow.IDexSnappingCallback)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void setMaxVisibleFreeformCountForDex(int,int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: java.util.List getSupportEmbedActivityPackages()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean isMultiWindowBlockListApp(java.lang.String)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void clearAllDockingTasks(java.lang.String)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean isDismissedFlexPanelMode()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: java.util.List getSplitActivityAllowPackages()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean isAllTasksResizable(int,int,int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean toggleFreeformWindowingMode()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean isVisibleTaskInDexDisplay(android.app.PendingIntent)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: int getSplitActivityPackageEnabled(java.lang.String,int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void scheduleNotifyDexSnappingCallback(int,android.graphics.Rect)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void setSplitImmersiveMode(boolean)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean minimizeTaskById(int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void unregisterDexSnappingCallback(com.samsung.android.multiwindow.IDexSnappingCallback)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean preventNaturalSwitching()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: android.content.pm.ParceledListSlice getVisibleTasks()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean isFlexPanelRunning()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean minimizeAllTasksByRecents(int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void notifyFreeformMinimizeAnimationEnd(int,android.graphics.PointF)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void toggleFreeformForDexCompatApp(int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void setNaviStarSplitImmersiveMode(boolean)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: int getDexTaskInfoFlags(android.os.IBinder)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void setStayFocusActivityEnabled(boolean)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: int getResizeMode(android.content.pm.ActivityInfo)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void dismissSplitTask(android.os.IBinder,boolean)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void setBlockedMinimizeFreeformEnable(boolean)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void hideInputMethod(int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: com.samsung.android.multiwindow.SurfaceFreezerSnapshot getSurfaceFreezerSnapshot(int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void registerRemoteAppTransitionListener(com.samsung.android.multiwindow.IRemoteAppTransitionListener)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean minimizeTaskToSpecificPosition(int,boolean,int,int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean isValidCornerGesture(android.view.MotionEvent)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void toggleFreeformWindowingModeForDex(android.window.WindowContainerToken)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void notifyDragSplitAppIconHasDrawable(boolean)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void setCustomDensityEnabled(int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean supportsMultiWindow(android.os.IBinder)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void resizeOtherTaskIfNeeded(int,android.graphics.Rect)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: int calculateMaxWidth(int,int,int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: int getMultiSplitFlags()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: android.content.pm.ParceledListSlice getTaskInfoFromPackageName(java.lang.String)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void rotateDexCompatTask(android.os.IBinder)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean supportMultiSplitAppMinimumSize()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: boolean minimizeAllTasks(int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void updateMultiSplitAppMinimumSize()>
<com.samsung.android.multiwindow.IMultiTaskingBinder: int getMultiWindowModeStates(int)>
<com.samsung.android.multiwindow.IMultiTaskingBinder: void setSplitActivityPackageEnabled(java.lang.String,int,int)>
<com.samsung.android.iccc.IIntegrityControlCheckCenter: byte[] getDeviceStatus(int,byte[])>
<com.samsung.android.iccc.IIntegrityControlCheckCenter: byte[] setAttestationData(byte[])>
<com.samsung.android.iccc.IIntegrityControlCheckCenter: byte[] getDeviceInfo(byte[])>
<com.samsung.android.iccc.IIntegrityControlCheckCenter: int setSecureData(int,int)>
<com.samsung.android.iccc.IIntegrityControlCheckCenter: int getTrustedBootData()>
<com.samsung.android.iccc.IIntegrityControlCheckCenter: int getSecureData(int)>
<com.samsung.android.service.SemService.ISemService: void start_SLOG()>
<com.samsung.android.service.SemService.ISemService: void check_Network(int)>
<com.samsung.android.service.SemService.ISemService: int deactivate_CardsAID(int,int,java.lang.String[],int[],int)>
<com.samsung.android.service.SemService.ISemService: int grdm_request_key(int,byte[])>
<com.samsung.android.service.SemService.ISemService: int send_Data(byte[],int,byte[],int)>
<com.samsung.android.service.SemService.ISemService: int openSpiDriver()>
<com.samsung.android.service.SemService.ISemService: java.lang.String getCPLC14mode()>
<com.samsung.android.service.SemService.ISemService: void secureLog(java.lang.String)>
<com.samsung.android.service.SemService.ISemService: void sem_factory()>
<com.samsung.android.service.SemService.ISemService: int eSE_LowFactoryReset()>
<com.samsung.android.service.SemService.ISemService: java.lang.String grdm_check_restricted_mode()>
<com.samsung.android.service.SemService.ISemService: void stop_SLOG()>
<com.samsung.android.service.SemService.ISemService: int esek_certificate_check()>
<com.samsung.android.service.SemService.ISemService: int start_attestation(byte[],int,byte[],int)>
<com.samsung.android.service.SemService.ISemService: java.lang.String[] handle_CCMCB(byte[],int,byte[],int)>
<com.samsung.android.service.SemService.ISemService: int get_HQMMemory(byte[])>
<com.samsung.android.service.SemService.ISemService: int inject_esesm_keyset()>
<com.samsung.android.service.SemService.ISemService: int open_Spi(int)>
<com.samsung.android.service.SemService.ISemService: int grdm_release_session()>
<com.samsung.android.service.SemService.ISemService: int eSE_FullFactoryReset()>
<com.samsung.android.service.SemService.ISemService: int grdm_get_session()>
<com.samsung.android.service.SemService.ISemService: java.lang.String[] handle_CCM(byte[],int)>
<com.samsung.android.service.SemService.ISemService: int verify_esesm_keyset()>
<com.samsung.android.service.SemService.ISemService: int closeSpiDriver()>
<com.samsung.android.service.SemService.ISemService: int resetForCOSU()>
<com.samsung.android.service.SemService.ISemService: int deactivate_Cards(int,java.lang.String[],int[],int)>
<com.samsung.android.service.SemService.ISemService: int scp11_certificate_check()>
<com.samsung.android.service.SemService.ISemService: int eSE_FactoryReset()>
<com.samsung.android.service.SemService.ISemService: int getAtr_Spi()>
<com.samsung.android.service.SemService.ISemService: int continue_attestation(java.lang.String,int,byte[])>
<com.samsung.android.service.SemService.ISemService: int isLccmSwp()>
<com.samsung.android.service.SemService.ISemService: void stop_request_credentials()>
<com.samsung.android.service.SemService.ISemService: int close_Spi(int)>
<com.samsung.android.service.SemService.ISemService: int grdm_get_attes_cert(int,byte[])>
<com.samsung.android.service.SemService.ISemService: int ICD()>
<com.samsung.android.service.SemService.ISemService: java.lang.String get_ESEA()>
<com.samsung.android.service.SemService.ISemService: int grdm_Check_Status()>
<com.samsung.android.service.SemService.ISemService: int start_request_credentials(byte[],byte[],java.lang.String,byte[])>
<com.samsung.android.service.SemService.ISemService: int check_SeState(byte[],byte[])>
<android.app.IBackupAgent: void doFullBackupPath(android.os.ParcelFileDescriptor,long,int,android.app.backup.IBackupManager,int,java.lang.String[])>
<android.view.accessibility.IAccessibilityInteractionConnection: void attachAccessibilityOverlayToWindow(android.view.SurfaceControl)>
<com.android.internal.telephony.ITelephonyRegistry: void clearPreciseDataConnectionStates(int)>
<com.android.internal.telephony.ITelephonyRegistry: void notifyDataActivity(int)>
<com.samsung.android.desktopmode.IDesktopModeBlocker: java.lang.String onBlocked()>
<android.location.ILocationCallback: void onLocation(android.location.Location)>
<com.samsung.android.remoteappmode.IVirtualDisplayAliveChecker: void onVirtualDisplayCreated(int)>
<com.samsung.android.remoteappmode.IVirtualDisplayAliveChecker: void onVirtualDisplayReleased(int)>
<com.samsung.android.cover.INfcLedCoverTouchListenerCallback: void onCoverTapLeft()>
<com.samsung.android.cover.INfcLedCoverTouchListenerCallback: void onCoverTapRight()>
<com.samsung.android.cover.INfcLedCoverTouchListenerCallback: void onCoverTouchReject()>
<com.samsung.android.cover.INfcLedCoverTouchListenerCallback: void onCoverTapMid()>
<com.samsung.android.cover.INfcLedCoverTouchListenerCallback: void onCoverTouchAccept()>
<com.samsung.android.cover.INfcLedCoverTouchListenerCallback: void onSystemCoverEvent(int,android.os.Bundle)>
<android.telephony.data.IQualifiedNetworksServiceCallback: void onHandoverEnabledChanged(int)>
<com.samsung.android.knoxguard.IKnoxGuardManager: int verifyHOTPPin(java.lang.String)>
<com.samsung.android.knoxguard.IKnoxGuardManager: java.lang.String verifyRegistrationInfo(java.lang.String,java.lang.String)>
<com.samsung.android.knoxguard.IKnoxGuardManager: java.lang.String getHotpChallenge()>
<com.samsung.android.knoxguard.IKnoxGuardManager: java.lang.String verifyPolicy(java.lang.String,java.lang.String)>
<com.samsung.android.knoxguard.IKnoxGuardManager: void revokeRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)>
<com.samsung.android.knoxguard.IKnoxGuardManager: int getKGServiceVersion()>
<com.samsung.android.knoxguard.IKnoxGuardManager: int verifyHOTPsecret(java.lang.String)>
<com.samsung.android.knoxguard.IKnoxGuardManager: java.lang.String getNonce(java.lang.String,java.lang.String)>
<com.samsung.android.knoxguard.IKnoxGuardManager: boolean isVpnExceptionRequired()>
<com.samsung.android.knoxguard.IKnoxGuardManager: void removeActiveAdmin(android.content.ComponentName)>
<com.samsung.android.knoxguard.IKnoxGuardManager: int lockScreen(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,android.os.Bundle)>
<com.samsung.android.knoxguard.IKnoxGuardManager: boolean shouldBlockCustomRom()>
<com.samsung.android.knoxguard.IKnoxGuardManager: boolean setAdminRemovable(boolean)>
<com.samsung.android.knoxguard.IKnoxGuardManager: void setClientHealthOK()>
<com.samsung.android.knoxguard.IKnoxGuardManager: boolean isSkipSupportContainerSupported()>
<com.samsung.android.knoxguard.IKnoxGuardManager: android.os.Bundle getKGServiceInfo()>
<com.samsung.android.knoxguard.IKnoxGuardManager: void setRemoteLockToLockscreen(int,boolean,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String,int,long,int,boolean,android.os.Bundle)>
<com.samsung.android.knoxguard.IKnoxGuardManager: boolean showInstallmentStatus()>
<com.samsung.android.knoxguard.IKnoxGuardManager: int getTAError()>
<com.samsung.android.knoxguard.IKnoxGuardManager: java.lang.String generateHotpDHRequest()>
<com.samsung.android.knoxguard.IKnoxGuardManager: int getTAState()>
<com.samsung.android.knoxguard.IKnoxGuardManager: boolean allowFirmwareRecovery(boolean)>
<com.samsung.android.knoxguard.IKnoxGuardManager: java.lang.String getTAInfo(int)>
<com.samsung.android.knoxguard.IKnoxGuardManager: void setKnoxGuardExemptRule(boolean)>
<com.samsung.android.knoxguard.IKnoxGuardManager: boolean addPackagesToClearCacheBlockList(java.util.List)>
<com.samsung.android.knoxguard.IKnoxGuardManager: java.lang.String getKGID()>
<com.samsung.android.knoxguard.IKnoxGuardManager: boolean setApplicationUninstallationDisabled(java.lang.String)>
<com.samsung.android.knoxguard.IKnoxGuardManager: boolean allowSafeMode(boolean)>
<com.samsung.android.knoxguard.IKnoxGuardManager: int setClientData(java.lang.String)>
<com.samsung.android.knoxguard.IKnoxGuardManager: void registerIntent(java.lang.String,java.util.List)>
<com.samsung.android.knoxguard.IKnoxGuardManager: void setAirplaneMode(boolean)>
<com.samsung.android.knoxguard.IKnoxGuardManager: java.lang.String getClientData()>
<com.samsung.android.knoxguard.IKnoxGuardManager: int setCheckingState()>
<com.samsung.android.knoxguard.IKnoxGuardManager: int getTAStateSetError(boolean)>
<com.samsung.android.knoxguard.IKnoxGuardManager: int resetRPMB()>
<com.samsung.android.knoxguard.IKnoxGuardManager: boolean allowOTAUpgrade(boolean)>
<com.samsung.android.knoxguard.IKnoxGuardManager: java.lang.String getStringSystemProperty(java.lang.String,java.lang.String)>
<com.samsung.android.knoxguard.IKnoxGuardManager: void setRuntimePermission(java.lang.String,java.lang.String,android.os.UserHandle)>
<com.samsung.android.knoxguard.IKnoxGuardManager: void callKGsv()>
<com.samsung.android.knoxguard.IKnoxGuardManager: int unlockScreen()>
<com.samsung.android.knoxguard.IKnoxGuardManager: java.lang.String getPBAUniqueNumber()>
<com.samsung.android.knoxguard.IKnoxGuardManager: void unRegisterIntent()>
<com.samsung.android.knoxguard.IKnoxGuardManager: int verifyCompleteToken(java.lang.String)>
<com.samsung.android.knoxguard.IKnoxGuardManager: void bindToLockScreen()>
<com.samsung.android.knoxguard.IKnoxGuardManager: void setRemoteLockToLockscreenWithSkipSupport(int,boolean,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String,int,long,int,boolean,android.os.Bundle,boolean)>
<com.samsung.android.knoxguard.IKnoxGuardManager: int resetRPMB2(java.lang.String)>
<com.samsung.android.knoxguard.IKnoxGuardManager: java.lang.String getKGPolicy()>
<com.samsung.android.knoxguard.IKnoxGuardManager: void setActiveAdmin(android.content.ComponentName)>
<com.samsung.android.knoxguard.IKnoxGuardManager: java.lang.String verifyKgRot()>
<com.samsung.android.knoxguard.IKnoxGuardManager: int verifyHOTPDHChallenge(java.lang.String,java.lang.String,java.lang.String)>
<com.samsung.android.knoxguard.IKnoxGuardManager: boolean addPackagesToForceStopBlockList(java.util.List)>
<com.samsung.android.knoxguard.IKnoxGuardManager: java.lang.String getLockAction()>
<com.samsung.android.knoxguard.IKnoxGuardManager: int provisionCert(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.hardware.display.IDisplayManager: void setWifiDisplayParam(java.lang.String,java.lang.String)>
<android.hardware.display.IDisplayManager: long getPrimaryPhysicalDisplayId()>
<android.hardware.display.IDisplayManager: void startWifiDisplayChannelScanAndInterval(int,int)>
<android.hardware.display.IDisplayManager: android.hardware.display.SemDlnaDevice getDlnaDevice()>
<android.hardware.display.IDisplayManager: java.lang.String getPresentationOwner(int)>
<android.hardware.display.IDisplayManager: void fitToActiveDisplay(boolean)>
<android.hardware.display.IDisplayManager: int getDeviceMaxVolume()>
<android.hardware.display.IDisplayManager: com.samsung.android.hardware.display.IRefreshRateToken acquireRefreshRateMaxLimitToken(android.os.IBinder,int,java.lang.String)>
<android.hardware.display.IDisplayManager: boolean isDeviceVolumeMuted()>
<android.hardware.display.IDisplayManager: void resetBrightnessConfigurationForUser(int,java.lang.String)>
<android.hardware.display.IDisplayManager: void setTemporaryBrightnessForSlowChange(int,float,boolean)>
<android.hardware.display.IDisplayManager: boolean isWifiDisplayWithPinSupported(java.lang.String)>
<android.hardware.display.IDisplayManager: void setDlnaDevice(android.hardware.display.SemDlnaDevice,android.os.IBinder)>
<android.hardware.display.IDisplayManager: int getScreenSharingStatus()>
<android.hardware.display.IDisplayManager: void setDisplayStateLimit(android.os.IBinder,int)>
<android.hardware.display.IDisplayManager: void startWifiDisplayChannelScan(int)>
<android.hardware.display.IDisplayManager: boolean requestSetWifiDisplayParameters(java.util.List)>
<android.hardware.display.IDisplayManager: com.samsung.android.hardware.display.IRefreshRateToken acquirePassiveModeToken(android.os.IBinder,java.lang.String)>
<android.hardware.display.IDisplayManager: void setDeviceVolumeMuted(boolean)>
<android.hardware.display.IDisplayManager: com.samsung.android.hardware.display.IRefreshRateToken acquireRefreshRateMinLimitToken(android.os.IBinder,int,java.lang.String)>
<android.hardware.display.IDisplayManager: int convertToBrightness(float)>
<android.hardware.display.IDisplayManager: void setDeviceVolume(int)>
<android.hardware.display.IDisplayManager: void setScreenSharingStatus(int)>
<android.hardware.display.IDisplayManager: void rotateVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,int)>
<android.hardware.display.IDisplayManager: boolean isFitToActiveDisplay()>
<android.hardware.display.IDisplayManager: boolean requestWifiDisplayParameter(java.lang.String,android.hardware.display.SemWifiDisplayParameter)>
<android.hardware.display.IDisplayManager: int getDeviceMinVolume()>
<android.hardware.display.IDisplayManager: void setVolumeKeyEvent(int)>
<android.hardware.display.IDisplayManager: void connectWifiDisplayWithConfig(android.hardware.display.SemWifiDisplayConfig,android.hardware.display.IWifiDisplayConnectionCallback)>
<android.hardware.display.IDisplayManager: android.hardware.display.BrightnessConfiguration getBackupBrightnessConfiguration(int)>
<android.hardware.display.IDisplayManager: com.samsung.android.hardware.display.IRefreshRateToken acquireLowRefreshRateToken(android.os.IBinder,java.lang.String)>
<android.hardware.display.IDisplayManager: void setBackupBrightnessConfiguration(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>
<android.hardware.display.IDisplayManager: void setBrightnessConfigurationForUserWithStats(android.hardware.display.BrightnessConfiguration,int,java.lang.String,java.util.List,java.util.List,java.util.List)>
<com.samsung.android.wifi.ISemMobileWipsFramework: void partialScanStart(android.os.Message)>
<com.samsung.android.wifi.ISemMobileWipsFramework: java.lang.String invokeMethodStr(int)>
<com.samsung.android.wifi.ISemMobileWipsFramework: void sendHWParamToHQMwithAppId(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.samsung.android.wifi.ISemMobileWipsFramework: java.util.List getScanResults()>
<com.samsung.android.wifi.ISemMobileWipsFramework: boolean invokeMethodBool(int)>
<com.samsung.android.desktopmode.IDesktopMode: void registerDesktopLauncher(com.samsung.android.desktopmode.IDesktopModeLauncher)>
<com.samsung.android.desktopmode.IDesktopMode: boolean registerDesktopModeListener(com.samsung.android.desktopmode.IDesktopModeListener,java.lang.String)>
<com.samsung.android.desktopmode.IDesktopMode: boolean isDesktopDockConnected()>
<com.samsung.android.desktopmode.IDesktopMode: boolean isDeviceConnected()>
<com.samsung.android.desktopmode.IDesktopMode: void onSecuredAppLaunched(android.os.IBinder,java.lang.String)>
<com.samsung.android.desktopmode.IDesktopMode: boolean isDesktopMode()>
<com.samsung.android.desktopmode.IDesktopMode: boolean unregisterBlocker(com.samsung.android.desktopmode.IDesktopModeBlocker)>
<com.samsung.android.desktopmode.IDesktopMode: android.os.Bundle sendMessage(android.os.Bundle)>
<com.samsung.android.desktopmode.IDesktopMode: boolean unregisterDesktopModeListener(com.samsung.android.desktopmode.IDesktopModeListener)>
<com.samsung.android.desktopmode.IDesktopMode: boolean isAllowed()>
<com.samsung.android.desktopmode.IDesktopMode: com.samsung.android.desktopmode.SemDesktopModeState getDesktopModeState()>
<com.samsung.android.desktopmode.IDesktopMode: android.os.Bundle getDesktopModeKillPolicy()>
<com.samsung.android.desktopmode.IDesktopMode: void scheduleUpdateDesktopMode(boolean)>
<com.samsung.android.desktopmode.IDesktopMode: boolean registerBlocker(com.samsung.android.desktopmode.IDesktopModeBlocker,java.lang.String)>
<com.samsung.android.internal.telecom.ISamsungTelecomService: void acceptRingingCallWithVideoState(int,int,android.os.Bundle,java.lang.String,java.lang.String)>
<com.samsung.android.internal.telecom.ISamsungTelecomService: void silenceRinger(int,android.os.Bundle,java.lang.String,java.lang.String)>
<com.samsung.android.internal.telecom.ISamsungTelecomService: void acceptRingingCall(int,android.os.Bundle,java.lang.String,java.lang.String)>
<com.samsung.android.internal.telecom.ISamsungTelecomService: android.content.pm.ParceledListSlice getAllowedPhoneAccounts(boolean,boolean,java.lang.String,java.lang.String)>
<com.samsung.android.internal.telecom.ISamsungTelecomService: boolean isInCall(int,boolean,java.lang.String,java.lang.String)>
<com.samsung.android.internal.telecom.ISamsungTelecomService: void showInCallScreen(boolean,android.os.UserHandle,java.lang.String,java.lang.String)>
<com.samsung.android.internal.telecom.ISamsungTelecomService: boolean endCall(int,android.os.Bundle,java.lang.String,java.lang.String)>
<android.hardware.display.IWifiDisplayConnectionCallback: void onFailure(int)>
<android.hardware.display.IWifiDisplayConnectionCallback: void onSuccess(java.util.List)>
<android.location.INetInitiatedListener: boolean sendNiResponse(int,int)>
<com.samsung.android.security.IDirEncryptService: int isStorageCardEncryptionPoliciesApplied()>
<com.samsung.android.security.IDirEncryptService: int setSdCardEncryptionPolicy(int,int,java.lang.String)>
<com.samsung.android.security.IDirEncryptService: int encryptStorage(java.lang.String)>
<com.samsung.android.security.IDirEncryptService: boolean isSdCardEncryped()>
<com.samsung.android.security.IDirEncryptService: int setPassword(java.lang.String)>
<com.samsung.android.security.IDirEncryptService: android.os.IVoldTaskListener getListener()>
<com.samsung.android.security.IDirEncryptService: void unregisterListener(com.samsung.android.security.IDirEncryptServiceListener)>
<com.samsung.android.security.IDirEncryptService: int getAdditionalSpaceRequired()>
<com.samsung.android.security.IDirEncryptService: int setStorageCardEncryptionPolicy(int,int,int)>
<com.samsung.android.security.IDirEncryptService: void unmountSDCardByAdmin()>
<com.samsung.android.security.IDirEncryptService: void setNeedToCreateKey(boolean)>
<com.samsung.android.security.IDirEncryptService: int getCurrentStatus()>
<com.samsung.android.security.IDirEncryptService: void registerListener(com.samsung.android.security.IDirEncryptServiceListener)>
<com.samsung.android.security.IDirEncryptService: int getLastError()>
<com.samsung.android.security.IDirEncryptService: void setMountSDcardToHelper(boolean)>
<android.location.IGnssNmeaListener: void onNmeaReceived(long,java.lang.String)>
<com.samsung.android.camera.iris.IIrisDaemonCallback: void onEnrollResult(long,int,int,int)>
<com.samsung.android.camera.iris.IIrisDaemonCallback: void onRemoved(long,int,int)>
<com.samsung.android.camera.iris.IIrisDaemonCallback: void onIRPropertyChanged(long,java.lang.String,java.lang.String)>
<com.samsung.android.camera.iris.IIrisDaemonCallback: void onAcquired(long,com.samsung.android.camera.iris.EyeInfo)>
<com.samsung.android.camera.iris.IIrisDaemonCallback: void onEnumerate(long,int[],int[])>
<com.samsung.android.camera.iris.IIrisDaemonCallback: void onImageProcessed(long,int,byte[],int,int)>
<com.samsung.android.camera.iris.IIrisDaemonCallback: void onError(long,int)>
<com.samsung.android.camera.iris.IIrisDaemonCallback: void onGeneralParameterChanged(long,java.lang.String,java.lang.String)>
<com.samsung.android.camera.iris.IIrisDaemonCallback: void onAuthenticated(long,int,int,byte[],byte[])>
<com.samsung.android.location.ISCurrentLocListener: void onCurrentLocation(android.location.Location)>
<com.samsung.android.wifi.ISemSharedPasswordCallback: void onAvailable(boolean)>
<com.samsung.android.wifi.ISemSharedPasswordCallback: void onAccepted(java.lang.String,java.lang.String)>
<com.samsung.android.wifi.ISemSharedPasswordCallback: void onRejected(java.lang.String)>
<android.nfc.INfcCardEmulation: int unregisterOtherService(int,android.content.ComponentName)>
<android.nfc.INfcCardEmulation: int registerService(int,android.content.ComponentName,java.lang.String,int)>
<android.nfc.INfcCardEmulation: boolean disableAutoRouting()>
<android.nfc.INfcCardEmulation: android.content.ComponentName getPaymentPriority(int)>
<android.nfc.INfcCardEmulation: int getAidSizeForServiceInPercent(int,android.content.ComponentName)>
<android.nfc.INfcCardEmulation: int getUsedAidTableSizeInPercent(int,java.lang.String)>
<android.nfc.INfcCardEmulation: android.nfc.cardemulation.ApduServiceInfo getPaymentDefaultServiceInfo(int)>
<android.nfc.INfcCardEmulation: boolean supportsAutoRouting()>
<android.nfc.INfcCardEmulation: boolean isRegisteredService(int,android.content.ComponentName,java.lang.String)>
<android.nfc.INfcCardEmulation: boolean setOtherService(int,android.content.ComponentName)>
<android.nfc.INfcCardEmulation: boolean unsetOtherService(int,android.content.ComponentName)>
<android.nfc.INfcCardEmulation: boolean enableAutoRouting()>
<android.nfc.INfcCardEmulation: void initializePaymentDefault(int,int)>
<android.nfc.INfcCardEmulation: boolean setLockPassword(java.lang.String)>
<android.view.IWindowManager: com.samsung.android.view.SemWindowManager$KeyCustomizationInfo getKeyCustomizationInfo(int,int,int)>
<android.view.IWindowManager: void removeKeyCustomizationInfoByPackage(java.lang.String,int,int)>
<android.view.IWindowManager: int getSupportsFlexPanel(int,java.lang.String)>
<android.view.IWindowManager: void setDragSurfaceToOverlay(boolean)>
<android.view.IWindowManager: void setTableModeEnabled(boolean)>
<android.view.IWindowManager: void removeKeyCustomizationInfo(int,int,int)>
<android.view.IWindowManager: void dispatchSmartClipRemoteRequest(int,int,com.samsung.android.content.smartclip.SmartClipRemoteRequestInfo,android.os.IBinder)>
<android.view.IWindowManager: void startSurfaceAnimation(android.os.IBinder,java.lang.String)>
<android.view.IWindowManager: boolean isKeyguardShowingAndNotOccluded()>
<android.view.IWindowManager: int getTopFocusedDisplayId()>
<android.view.IWindowManager: void freezeDisplayRotation(int,int)>
<android.view.IWindowManager: android.content.res.Configuration attachWindowContextToDisplayArea(android.os.IBinder,int,int,android.os.Bundle)>
<android.view.IWindowManager: boolean destroyInputConsumer(java.lang.String,int)>
<android.view.IWindowManager: void setForcedDisplaySizeDensityWithInfo(com.samsung.android.view.MultiResolutionChangeRequestInfo)>
<android.view.IWindowManager: java.util.List getBackupKeyCustomizationInfoList()>
<android.view.IWindowManager: void setForcedDisplaySizeDensity(int,int,int,int,boolean,int)>
<android.view.IWindowManager: void moveDisplayToTop(int,java.lang.String)>
<android.view.IWindowManager: void setDeadzoneHole(android.os.Bundle)>
<android.view.IWindowManager: java.util.List getVisibleWindowInfoList()>
<android.view.IWindowManager: int getRotationLockOrientation(int)>
<android.view.IWindowManager: boolean isMetaKeyEventRequested(android.content.ComponentName)>
<android.view.IWindowManager: void startLockscreenFingerprintAuth()>
<android.view.IWindowManager: void setPendingIntentAfterUnlock(android.app.PendingIntent,android.content.Intent)>
<android.view.IWindowManager: void requestMetaKeyEvent(android.content.ComponentName,boolean)>
<android.view.IWindowManager: boolean isTableMode()>
<android.view.IWindowManager: void thawRotation()>
<android.view.IWindowManager: void dispatchSPenGestureEvent(int,int,android.view.InputEvent[],android.os.IBinder)>
<android.view.IWindowManager: void changeDisplayScale(android.view.MagnificationSpec,boolean,android.view.IInputFilter)>
<android.view.IWindowManager: void registerSystemKeyEvent(int,android.content.ComponentName,int)>
<android.view.IWindowManager: com.samsung.android.view.ScreenshotResult takeScreenshotToTargetWindow(int,int,boolean,android.graphics.Rect,int,int,boolean,boolean)>
<android.view.IWindowManager: void attachWindowContextToWindowToken(android.os.IBinder,android.os.IBinder)>
<android.view.IWindowManager: boolean useBLAST()>
<android.view.IWindowManager: void clearKeyCustomizationInfoByAction(int,int,int)>
<android.view.IWindowManager: void setSupportsFlexPanel(int,java.lang.String,boolean)>
<android.view.IWindowManager: void setDisplayColorToSystemProperties(int)>
<android.view.IWindowManager: void putKeyCustomizationInfo(com.samsung.android.view.SemWindowManager$KeyCustomizationInfo)>
<android.view.IWindowManager: void unregisterOneHandOpWatcher(com.samsung.android.onehandop.IOneHandOpWatcher)>
<android.view.IWindowManager: void setMaxAspectRatioPolicy(java.lang.String,int,boolean,int)>
<android.view.IWindowManager: void unregisterSystemKeyEvent(int,android.content.ComponentName)>
<android.view.IWindowManager: com.samsung.android.view.SemWindowManager$KeyCustomizationInfo getKeyCustomizationInfoByPackage(java.lang.String,int,int)>
<android.view.IWindowManager: int getAppContinuityMode(int,java.lang.String,android.content.pm.ActivityInfo)>
<android.view.IWindowManager: boolean requestSystemKeyEvent(int,android.content.ComponentName,boolean)>
<android.view.IWindowManager: int getMaxAspectRatioPolicyByComponent(android.content.ComponentName,int)>
<android.view.IWindowManager: void clearForcedDisplaySizeDensity(int)>
<android.view.IWindowManager: void freezeRotation(int)>
<android.view.IWindowManager: com.samsung.android.view.SemWindowManager$KeyCustomizationInfo getLastKeyCustomizationInfo(int,int)>
<android.view.IWindowManager: void clearKeyCustomizationInfoByKeyCode(int,int)>
<android.view.IWindowManager: boolean isSystemKeyEventRequested(int,android.content.ComponentName)>
<android.view.IWindowManager: int getMaxAspectRatioPolicy(java.lang.String,int)>
<android.view.IWindowManager: boolean isFolded()>
<android.view.IWindowManager: void restoreKeyCustomizationInfo(java.util.List)>
<android.view.IWindowManager: int getFullScreenAppsSupportMode()>
<android.view.IWindowManager: void getUserDisplaySize(android.graphics.Point)>
<android.view.IWindowManager: void detachWindowContextFromWindowContainer(android.os.IBinder)>
<android.view.IWindowManager: int getUserDisplayDensity()>
<android.view.IWindowManager: android.content.res.Configuration attachToDisplayContent(android.os.IBinder,int)>
<android.view.IWindowManager: void thawDisplayRotation(int)>
<android.view.IWindowManager: void setAppContinuityMode(int,java.lang.String,boolean)>
<android.view.IWindowManager: void closeSystemDialogsInDisplay(java.lang.String,int)>
<android.view.IWindowManager: void registerOneHandOpWatcher(com.samsung.android.onehandop.IOneHandOpWatcher)>
<com.sec.android.smartfpsadjuster.IIntelligentDynamicFpsService: int cameraPolicyChange(int)>
<com.sec.android.smartfpsadjuster.IIntelligentDynamicFpsService: void cameraPolicyStart()>
<com.sec.android.smartfpsadjuster.IIntelligentDynamicFpsService: void cameraPolicyStop()>
<android.app.IWallpaperManager: void semSetDLSWallpaperColors(android.app.SemWallpaperColors,int)>
<android.app.IWallpaperManager: java.lang.String semGetUri(int,java.lang.String)>
<android.app.IWallpaperManager: java.lang.String getLegacyDeviceColor()>
<android.app.IWallpaperManager: void setMotionWallpaper(java.lang.String,java.lang.String,int,boolean)>
<android.app.IWallpaperManager: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int,int,boolean,android.os.Bundle)>
<android.app.IWallpaperManager: android.graphics.Rect semGetSmartCropRect(int)>
<android.app.IWallpaperManager: boolean isDefaultWallpaperState(int)>
<android.app.IWallpaperManager: void semSetSmartCropRect(int,android.graphics.Rect,android.graphics.Rect)>
<android.app.IWallpaperManager: boolean isWallpaperBackupAllowed(int,int)>
<android.app.IWallpaperManager: int getHighlightFilterState(int)>
<android.app.IWallpaperManager: boolean setCoverWallpaperCallback(android.app.IWallpaperManagerCallback)>
<android.app.IWallpaperManager: java.lang.String getVideoFilePath(int)>
<android.app.IWallpaperManager: int getLockWallpaperType()>
<android.app.IWallpaperManager: boolean isDesktopStandAloneMode()>
<android.app.IWallpaperManager: boolean isSystemAndLockPaired(int)>
<android.app.IWallpaperManager: java.lang.String getLastCallingPackage(int)>
<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaperThumbnailFileDescriptor(int,int,int,int)>
<android.app.IWallpaperManager: void forceRebindWallpaper(int,int)>
<android.app.IWallpaperManager: android.app.SemWallpaperColors semGetPrimaryWallpaperColors(int)>
<android.app.IWallpaperManager: android.content.ComponentName semGetWallpaperComponent(int,int)>
<android.app.IWallpaperManager: java.lang.String getMotionWallpaperPkgName(int)>
<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getLockWallpaper(android.app.IWallpaperManagerCallback,android.os.Bundle,int,int)>
<android.app.IWallpaperManager: int getLidState()>
<android.app.IWallpaperManager: android.graphics.Rect semGetWallpaperCropHint(int)>
<android.app.IWallpaperManager: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int,int,android.os.Bundle)>
<android.app.IWallpaperManager: boolean hasVideoWallpaper()>
<android.app.IWallpaperManager: void semSendWallpaperCommand(int,java.lang.String,android.os.Bundle)>
<android.app.IWallpaperManager: java.lang.String getVideoFileName(int)>
<android.app.IWallpaperManager: android.os.Bundle getWallpaperComponentExtras(int,int)>
<android.app.IWallpaperManager: int makeSnapshot(int,int)>
<android.app.IWallpaperManager: void setKWPTypeLiveWallpaper(int)>
<android.app.IWallpaperManager: boolean restoreSnapshot(int,java.lang.String)>
<android.app.IWallpaperManager: void copyFileToWallpaperFile(int,java.lang.String)>
<android.app.IWallpaperManager: int getDesktopMode()>
<android.app.IWallpaperManager: java.lang.String getVideoPackage(int)>
<android.app.IWallpaperManager: android.app.SemWallpaperColors semGetWallpaperColors(int)>
<android.app.IWallpaperManager: boolean setSnapshotSource(int,java.lang.String)>
<android.app.IWallpaperManager: boolean isWallpaperDataExists(int,int)>
<android.app.IWallpaperManager: boolean isDesktopModeEnabled(int)>
<android.app.IWallpaperManager: void semRequestWallpaperColorsAnalysis(int,java.lang.String)>
<android.app.IWallpaperManager: void notifyPid(int,int,java.lang.String,boolean)>
<android.app.IWallpaperManager: void removeSnapshotByKey(int)>
<android.app.IWallpaperManager: boolean isVirtualWallpaperDisplay(int)>
<android.app.IWallpaperManager: boolean isValidSnapshot(int)>
<android.app.IWallpaperManager: java.lang.String getDeviceColor()>
<android.app.IWallpaperManager: android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String,java.lang.String,android.app.IWallpaperManagerCallback,int,android.os.Bundle,int,boolean,int)>
<android.app.IWallpaperManager: void removeSnapshotByWhich(int)>
<android.app.IWallpaperManager: boolean isDesktopMode()>
<android.app.IWallpaperManager: int semGetWallpaperType(int)>
<android.app.IWallpaperManager: void removeSnapshotBySource(java.lang.String)>
<android.app.IWallpaperManager: int getWallpaperOrientation(int,int)>
<android.app.IWallpaperManager: void setVideoWallpaper(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,boolean,android.os.Bundle)>
<android.app.IWallpaperManager: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>
<android.app.IWallpaperManager: int getSnapshotCount(int)>
<android.app.IWallpaperManager: void copyPreloadedFileToWallpaperFile(int,java.lang.String)>
<android.app.IWallpaperManager: android.os.Bundle getWallpaperExtras(int,int)>
<android.app.IWallpaperManager: void setSnapshotTestMode(boolean)>
<android.app.IWallpaperManager: void setAnimatedWallpaper(java.lang.String,java.lang.String,int,boolean)>
<android.app.IWallpaperManager: void setKWPTypeLiveWallpaperWithMode(int,int)>
<android.app.IWallpaperManager: java.lang.String getAnimatedPkgName(int)>
<android.app.IWallpaperManager: boolean isLockscreenLiveWallpaperEnabled()>
<android.app.IWallpaperManager: boolean isWaitingForUnlockUser(int,int)>
<android.app.IWallpaperManager: int getDisplayId(int)>
<android.app.IWallpaperManager: boolean isVideoWallpaper()>
<android.app.IWallpaperManager: void semSetUri(java.lang.String,boolean,int,int,java.lang.String,int,android.os.Bundle)>
<android.app.IWallpaperManager: boolean isSnapshotTestMode()>
<android.content.om.IOverlayManager: void applyWallpaperColor(java.util.List,java.util.List,boolean)>
<android.content.om.IOverlayManager: void applyWallpaperColors(java.util.List,int,int)>
<android.content.om.IOverlayManager: java.util.List readLastPalette()>
<android.content.om.IOverlayManager: boolean getLastPalette(java.util.List,java.util.List)>
<android.content.om.IOverlayManager: java.util.List getThemeParkOverlayNames(java.lang.String)>
<android.content.om.IOverlayManager: java.util.List getWallpaperColors()>
<android.content.om.IOverlayManager: void applyThemeParkWallpaperColor(android.net.Uri)>
<android.content.om.IOverlayManager: void removeOverlays(java.util.List,android.content.om.ISamsungOverlayCallback,int)>
<android.content.om.IOverlayManager: android.content.om.OverlayInfoExt[] getAllOverlaysInCategory(int,int)>
<android.content.om.IOverlayManager: boolean changeOverlayState(java.lang.String,int,boolean)>
<android.content.om.IOverlayManager: android.content.om.OverlayInfoExt[] getOverlaysForTarget(java.lang.String,int,int)>
<android.content.om.IOverlayManager: void addOverlays(java.util.List,android.content.om.ISamsungOverlayCallback,int)>
<android.content.om.IOverlayManager: void replaceOverlays(java.util.List,java.util.List,android.content.om.ISamsungOverlayCallback,int)>
<android.content.om.IOverlayManager: android.content.om.OverlayInfoExt getOverlayForPath(java.lang.String,int)>
<com.samsung.cmfa.AuthTouch.IAuthTouchEventListener: void onPointerEvent(android.view.MotionEvent)>
<android.view.IRecentsAnimationRunner: void onAnimationStart(android.view.IRecentsAnimationController,android.view.RemoteAnimationTarget[],android.view.RemoteAnimationTarget[],android.graphics.Rect,android.graphics.Rect)>
<com.samsung.android.aod.IAODDozeCallback: void onAODToastRequested(com.samsung.android.aod.AODToast)>
<com.samsung.android.aod.IAODDozeCallback: void onDozeAcquired()>
<com.samsung.android.aod.IAODDozeCallback: void onDozeReleased()>
<vendor.samsung.hardware.radio.data.ISehRadioDataIndication: int getInterfaceVersion()>
<vendor.samsung.hardware.radio.data.ISehRadioDataIndication: vendor.samsung.hardware.radio.data.SehApnProfile needApnProfileIndication(java.lang.String)>
<vendor.samsung.hardware.radio.data.ISehRadioDataIndication: java.lang.String getInterfaceHash()>
<vendor.samsung.hardware.radio.data.ISehRadioDataIndication: void timerStatusChangedInd(int,int[])>
<vendor.samsung.hardware.radio.data.ISehRadioDataIndication: vendor.samsung.hardware.radio.data.SehPacketUsage needPacketUsage(java.lang.String)>
<vendor.samsung.hardware.radio.data.ISehRadioDataIndication: void rrcStateChanged(int,vendor.samsung.hardware.radio.data.SehRrcStateInfo)>
<vendor.samsung.hardware.radio.data.ISehRadioDataIndication: int needSettingValueIndication(java.lang.String,java.lang.String)>
<android.os.ISemHcmManager: boolean getHcmEnable()>
<android.telephony.satellite.stub.ISatellite: void provisionSatelliteService(java.lang.String,byte[],com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void requestIsSatelliteProvisioned(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>
<android.telephony.satellite.stub.ISatellite: void requestSatelliteListeningEnabled(boolean,int,com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void stopSendingSatellitePointingInfo(com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void requestIsSatelliteCommunicationAllowedForCurrentLocation(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>
<android.telephony.satellite.stub.ISatellite: void requestSatelliteModemState(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void requestTimeForNextSatelliteVisibility(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void sendSatelliteDatagram(android.telephony.satellite.stub.SatelliteDatagram,boolean,com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void deprovisionSatelliteService(java.lang.String,com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void requestIsSatelliteEnabled(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>
<android.telephony.satellite.stub.ISatellite: void requestSatelliteEnabled(boolean,boolean,com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void requestIsSatelliteSupported(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>
<android.telephony.satellite.stub.ISatellite: void requestSatelliteCapabilities(com.android.internal.telephony.IIntegerConsumer,android.telephony.satellite.stub.ISatelliteCapabilitiesConsumer)>
<android.telephony.satellite.stub.ISatellite: void enableCellularModemWhileSatelliteModeIsOn(boolean,com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void startSendingSatellitePointingInfo(com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void pollPendingSatelliteDatagrams(com.android.internal.telephony.IIntegerConsumer)>
<android.os.ISemHqmManager: boolean getDVServerEnable()>
<android.os.ISemHqmManager: boolean sendHWParamServer(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.os.ISemHqmManager: boolean sendHWParamToHQMwithAppId(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.os.ISemHqmManager: boolean getCFServerEnable()>
<android.os.ISemHqmManager: boolean getHqmEnable()>
<android.os.ISemHqmManager: boolean sendHWParamToHQM(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.os.ISemHqmManager: boolean sendHWParamToHQMwithFile(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.os.ISemHqmManager: void sendSystemInfoToHQM(int,java.lang.String,java.lang.String)>
<android.window.ITaskOrganizerController: boolean togglePinTaskState(int)>
<android.window.ITaskOrganizerController: boolean isKeepScreenOn(int)>
<android.window.ITaskOrganizerController: void createStageRootTask(int,int,int,android.os.IBinder)>
<android.window.ITaskOrganizerController: void setOrientationRequestPolicy(boolean,int[],int[])>
<android.window.ITaskOrganizerController: float getFreeformTaskOpacity(int)>
<android.window.ITaskOrganizerController: void setFreeformTaskSurfaceOverlappedWithNavi(android.window.WindowContainerToken,boolean)>
<android.window.ITaskOrganizerController: void setFreeformTaskOpacity(int,float)>
<android.window.ITaskOrganizerController: boolean isPinStateChangeable(int)>
<android.os.ISpqrService: boolean createInvariantProfile(java.lang.String,java.lang.String,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.telephony.ims.aidl.IImsMmTelListener: void onCdpnReceived(java.lang.String,int)>
<android.sec.clipboard.IClipboardService: void updateFilter(int,android.sec.clipboard.IClipboardDataPasteEvent)>
<android.sec.clipboard.IClipboardService: void removeClipboardEventListener(com.samsung.android.content.clipboard.IOnClipboardEventListener)>
<android.sec.clipboard.IClipboardService: void setPrimaryClip(android.content.ClipData,int)>
<android.sec.clipboard.IClipboardService: boolean isEnabled(int)>
<android.sec.clipboard.IClipboardService: void setPrimarySemClip(com.samsung.android.content.clipboard.data.SemClipData,java.lang.String,int)>
<android.sec.clipboard.IClipboardService: com.samsung.android.content.clipboard.data.SemClipData getPrimarySemClip(java.lang.String,int)>
<android.sec.clipboard.IClipboardService: void addClipboardEventListener(com.samsung.android.content.clipboard.IOnClipboardEventListener,java.lang.String)>
<android.sec.clipboard.IClipboardService: int getFilter()>
<android.sec.clipboard.IClipboardService: boolean hasPrimaryClip(java.lang.String,int)>
<android.sec.clipboard.IClipboardService: boolean pasteClipData(android.content.ClipData,java.lang.String,int)>
<vendor.samsung.hardware.radio.sim.ISehRadioSim: void getPhonebookStorageInfo(int,int)>
<vendor.samsung.hardware.radio.sim.ISehRadioSim: java.lang.String getInterfaceHash()>
<vendor.samsung.hardware.radio.sim.ISehRadioSim: void setSimInitEvent(int)>
<vendor.samsung.hardware.radio.sim.ISehRadioSim: void setResponseFunctions(vendor.samsung.hardware.radio.sim.ISehRadioSimResponse,vendor.samsung.hardware.radio.sim.ISehRadioSimIndication)>
<vendor.samsung.hardware.radio.sim.ISehRadioSim: void getPhonebookEntry(int,int,int)>
<vendor.samsung.hardware.radio.sim.ISehRadioSim: void getAtr(int)>
<vendor.samsung.hardware.radio.sim.ISehRadioSim: void getIccCardStatus(int)>
<vendor.samsung.hardware.radio.sim.ISehRadioSim: int getInterfaceVersion()>
<vendor.samsung.hardware.radio.sim.ISehRadioSim: void setSimOnOff(int,int)>
<vendor.samsung.hardware.radio.sim.ISehRadioSim: void supplyIccPersonalization(int,java.lang.String)>
<vendor.samsung.hardware.radio.sim.ISehRadioSim: void changeIccPersonalization(int,java.lang.String,java.lang.String)>
<vendor.samsung.hardware.radio.sim.ISehRadioSim: void getUsimPhonebookCapability(int)>
<vendor.samsung.hardware.radio.sim.ISehRadioSim: void getSimLockInfo(int,int,int)>
<vendor.samsung.hardware.radio.sim.ISehRadioSim: void accessPhonebookEntry(int,int,int,int,vendor.samsung.hardware.radio.sim.SehAdnRecord,java.lang.String)>
<vendor.samsung.hardware.radio.sim.ISehRadioSim: void supplyNetworkDepersonalization(int,java.lang.String,int)>
<com.samsung.android.cocktailbar.ISystemUiVisibilityCallback: void onSystemUiVisibilityChanged(int)>
<com.samsung.android.wifi.p2p.ISemWifiP2pCallback: void onSuccess()>
<com.samsung.android.wifi.p2p.ISemWifiP2pCallback: void onFailure(int)>
<com.samsung.android.remoteappmode.IRemoteAppMode: void enableSendingUserPresentIntent(java.lang.String)>
<com.samsung.android.remoteappmode.IRemoteAppMode: boolean registerRemoteAppModeListener(com.samsung.android.remoteappmode.IRemoteAppModeListener,java.lang.String)>
<com.samsung.android.remoteappmode.IRemoteAppMode: boolean registerSecureAppChangedListener(com.samsung.android.remoteappmode.ISecureAppChangedListener,java.lang.String)>
<com.samsung.android.remoteappmode.IRemoteAppMode: void startRFCommService()>
<com.samsung.android.remoteappmode.IRemoteAppMode: void launchApplication(int,java.lang.String,android.content.Intent,android.os.Bundle)>
<com.samsung.android.remoteappmode.IRemoteAppMode: void setSendingUserPresentExpiredTime(long)>
<com.samsung.android.remoteappmode.IRemoteAppMode: void transferTaskWithoutIntercept(int,int,android.os.Bundle)>
<com.samsung.android.remoteappmode.IRemoteAppMode: boolean unregisterSecureAppChangedListener(com.samsung.android.remoteappmode.ISecureAppChangedListener)>
<com.samsung.android.remoteappmode.IRemoteAppMode: void resizeVirtualDisplay(int,int,int,int,android.view.Surface)>
<com.samsung.android.remoteappmode.IRemoteAppMode: boolean registerStartActivityInterceptListener(com.samsung.android.remoteappmode.IStartActivityInterceptListener,java.lang.String)>
<com.samsung.android.remoteappmode.IRemoteAppMode: void clearAll()>
<com.samsung.android.remoteappmode.IRemoteAppMode: boolean isSendingUserPresentEnabled()>
<com.samsung.android.remoteappmode.IRemoteAppMode: void getLastAnr(java.lang.String,android.os.ParcelFileDescriptor)>
<com.samsung.android.remoteappmode.IRemoteAppMode: boolean unregisterStartActivityInterceptListener(com.samsung.android.remoteappmode.IStartActivityInterceptListener)>
<com.samsung.android.remoteappmode.IRemoteAppMode: boolean registerRotationChangeListener(com.samsung.android.remoteappmode.IRotationChangeListener,java.lang.String,int)>
<com.samsung.android.remoteappmode.IRemoteAppMode: void releaseVirtualDisplay(int)>
<com.samsung.android.remoteappmode.IRemoteAppMode: int getProtocolVersion()>
<com.samsung.android.remoteappmode.IRemoteAppMode: boolean unregisterRemoteAppModeListener(com.samsung.android.remoteappmode.IRemoteAppModeListener)>
<com.samsung.android.remoteappmode.IRemoteAppMode: void moveDisplayToTop(int)>
<com.samsung.android.remoteappmode.IRemoteAppMode: long getSendingUserPresentExpiredTime()>
<com.samsung.android.remoteappmode.IRemoteAppMode: boolean registerTaskChangeListener(com.samsung.android.remoteappmode.ITaskChangeListener,java.lang.String)>
<com.samsung.android.remoteappmode.IRemoteAppMode: int createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,com.samsung.android.remoteappmode.IVirtualDisplayAliveChecker)>
<com.samsung.android.remoteappmode.IRemoteAppMode: boolean sendNotificationContent(android.service.notification.StatusBarNotification)>
<com.samsung.android.remoteappmode.IRemoteAppMode: boolean unregisterTaskChangeListener(com.samsung.android.remoteappmode.ITaskChangeListener)>
<com.samsung.android.remoteappmode.IRemoteAppMode: boolean isAllowed()>
<com.samsung.android.remoteappmode.IRemoteAppMode: void setLTWProtocolVersion(int)>
<com.samsung.android.remoteappmode.IRemoteAppMode: boolean unregisterRotationChangeListener(com.samsung.android.remoteappmode.IRotationChangeListener)>
<com.samsung.android.remoteappmode.IRemoteAppMode: void forceStopPackage(java.lang.String)>
<com.samsung.android.remoteappmode.IRemoteAppMode: void stopRFCommService()>
<com.samsung.android.remoteappmode.IRemoteAppMode: void disableSendingUserPresentIntent()>
<com.samsung.android.remoteappmode.IRemoteAppMode: boolean sendNotificationAction(android.service.notification.StatusBarNotification,int,android.content.Intent)>
<com.samsung.android.remoteappmode.IRemoteAppMode: void sendPendingIntent(android.app.PendingIntent)>
<vendor.samsung.hardware.radio.channel.ISehRadioChannelCallback: int getInterfaceVersion()>
<vendor.samsung.hardware.radio.channel.ISehRadioChannelCallback: void receive(byte[])>
<vendor.samsung.hardware.radio.channel.ISehRadioChannelCallback: java.lang.String getInterfaceHash()>
<com.samsung.android.multicontrol.IMultiControlManager: void setCursorPosition(int,int,int)>
<com.samsung.android.multicontrol.IMultiControlManager: void setInteractive(boolean)>
<com.samsung.android.multicontrol.IMultiControlManager: void setProtocolVersion(int)>
<com.samsung.android.multicontrol.IMultiControlManager: void enableTriggerDetection(boolean)>
<com.samsung.android.multicontrol.IMultiControlManager: boolean isAllowed()>
<com.samsung.android.multicontrol.IMultiControlManager: void stopDeathChecker()>
<com.samsung.android.multicontrol.IMultiControlManager: void forceHideCursor(boolean)>
<com.samsung.android.multicontrol.IMultiControlManager: void setMultiControlOutOfFocus(boolean)>
<com.samsung.android.multicontrol.IMultiControlManager: int getProtocolVersion()>
<com.samsung.android.multicontrol.IMultiControlManager: void setTriggerThreshold(int)>
<com.samsung.android.multicontrol.IMultiControlManager: void resetInputFilter()>
<com.samsung.android.multicontrol.IMultiControlManager: void startDeathChecker(com.samsung.android.multicontrol.IMultiControlDeathChecker)>
<com.samsung.android.multicontrol.IMultiControlManager: void setInputFilter(android.view.IInputFilter,com.samsung.android.multicontrol.IInputFilterInstallListener)>
<android.location.INSLocationManager: void setCallback(android.location.INSLocationCallback)>
<android.location.INSLocationManager: java.util.Map getGPSUsingApps()>
<android.location.INSLocationManager: void onGnssEventUpdated(java.lang.String)>
<android.location.INSLocationManager: void onGnssEngineStatusUpdated(boolean)>
<android.location.INSLocationManager: void onPassiveLocationReported(android.location.Location)>
<android.location.INSLocationManager: void onMessageUpdated(android.os.Message)>
<android.location.INSLocationManager: void onSatelliteStatusUpdated(android.location.GnssStatus)>
<android.location.INSLocationManager: void onStateUpdated(android.location.LocationConstants$STATE_TYPE,android.os.Bundle)>
<android.hardware.ICameraService: boolean applyExtraRequestsToRequestInjector(android.os.PersistableBundle[])>
<android.hardware.ICameraService: void startRemoteDeviceInjector(java.lang.String[],java.lang.String[],android.hardware.IRemoteDevice,android.hardware.IDeviceInjectorCallback)>
<android.hardware.ICameraService: void notifyPkgListParamChange(java.lang.String[],java.lang.String[])>
<android.hardware.ICameraService: void updateRequestInjectorAllowedList(java.lang.String[])>
<android.hardware.ICameraService: void startDeviceInjector(java.lang.String[],java.lang.String[],java.lang.String,android.hardware.IDeviceInjectorCallback)>
<android.hardware.ICameraService: void setDeviceInjectorPending(boolean)>
<android.hardware.ICameraService: boolean isHiddenIdPermittedPackage(java.lang.String)>
<android.hardware.ICameraService: void notifyDeviceInjectorOrientationChange()>
<android.hardware.ICameraService: void stopDeviceInjector()>
<android.hardware.ICameraService: void notifyDeviceStateChangeSync(long)>
<com.samsung.android.content.smartclip.IInputMethodInfoChangeListener: void onKeyboardClosed()>
<com.samsung.android.content.smartclip.IInputMethodInfoChangeListener: void onInputInfoChanged(com.android.internal.inputmethod.IRemoteInputConnection,android.view.inputmethod.EditorInfo)>
<com.samsung.android.sepunion.IGoodCatchDispatcher: void onStop(java.lang.String)>
<com.samsung.android.sepunion.IGoodCatchDispatcher: void onStart(java.lang.String)>
<com.samsung.android.knox.ISemPersonaManager: int getSecureFolderId()>
<com.samsung.android.knox.ISemPersonaManager: boolean clearAttributes(int,int)>
<com.samsung.android.knox.ISemPersonaManager: java.lang.String getPersonaCacheValue(java.lang.String)>
<com.samsung.android.knox.ISemPersonaManager: boolean isContainerCorePackageUID(int)>
<com.samsung.android.knox.ISemPersonaManager: boolean isExternalStorageEnabled(int)>
<com.samsung.android.knox.ISemPersonaManager: int getFocusedUser()>
<com.samsung.android.knox.ISemPersonaManager: java.lang.String getRCPDataPolicyForUser(int,java.lang.String,java.lang.String)>
<com.samsung.android.knox.ISemPersonaManager: void setFocusedLauncherId(int)>
<com.samsung.android.knox.ISemPersonaManager: boolean setRCPDataPolicy(java.lang.String,java.lang.String,java.lang.String)>
<com.samsung.android.knox.ISemPersonaManager: boolean bindCoreServiceAsUser(android.content.ComponentName,android.app.IApplicationThread,android.os.IBinder,android.content.Intent,android.app.IServiceConnection,int,int)>
<com.samsung.android.knox.ISemPersonaManager: java.lang.String getCustomResource(int,java.lang.String)>
<com.samsung.android.knox.ISemPersonaManager: void startTermsActivity()>
<com.samsung.android.knox.ISemPersonaManager: android.os.Bundle getDualDARProfile()>
<com.samsung.android.knox.ISemPersonaManager: java.util.List getUpdatedListWithAppSeparation(java.util.List)>
<com.samsung.android.knox.ISemPersonaManager: boolean setPackageSettingInstalled(java.lang.String,boolean,int)>
<com.samsung.android.knox.ISemPersonaManager: boolean isPossibleAddAppsToContainer(java.lang.String,int)>
<com.samsung.android.knox.ISemPersonaManager: java.lang.String getRCPDataPolicy(java.lang.String,java.lang.String)>
<com.samsung.android.knox.ISemPersonaManager: android.os.Bundle getSeparationConfigfromCache()>
<com.samsung.android.knox.ISemPersonaManager: int getFocusedLauncherId()>
<com.samsung.android.knox.ISemPersonaManager: boolean isShareClipboardDataToOwnerAllowed(int)>
<com.samsung.android.knox.ISemPersonaManager: java.lang.String getECName(int)>
<com.samsung.android.knox.ISemPersonaManager: void sendRequestKeyStatus(int)>
<com.samsung.android.knox.ISemPersonaManager: java.util.List getSeparatedAppsList()>
<com.samsung.android.knox.ISemPersonaManager: boolean isFOTAUpgrade()>
<com.samsung.android.knox.ISemPersonaManager: android.content.ComponentName getAdminComponentName(int)>
<com.samsung.android.knox.ISemPersonaManager: boolean isInSeparatedAppsOnly(java.lang.String)>
<com.samsung.android.knox.ISemPersonaManager: void CMFAUnLock(int)>
<com.samsung.android.knox.ISemPersonaManager: android.os.Bundle sendProxyMessage(java.lang.String,java.lang.String,android.os.Bundle)>
<com.samsung.android.knox.ISemPersonaManager: boolean broadcastIntentThroughPersona(android.content.Intent,int)>
<com.samsung.android.knox.ISemPersonaManager: com.samsung.android.knox.IBasicCommand getKnoxForesightService()>
<com.samsung.android.knox.ISemPersonaManager: boolean isMoveFilesToOwnerAllowed(int)>
<com.samsung.android.knox.ISemPersonaManager: boolean updatePersonaCache(java.lang.String,java.lang.String)>
<com.samsung.android.knox.ISemPersonaManager: int getFotaVersion()>
<com.samsung.android.knox.ISemPersonaManager: void logDpmsKA(android.os.Bundle)>
<com.samsung.android.knox.ISemPersonaManager: boolean sendKnoxForesightBroadcast(android.content.Intent)>
<com.samsung.android.knox.ISemPersonaManager: void refreshLockTimer(int)>
<com.samsung.android.knox.ISemPersonaManager: boolean registerSystemPersonaObserver(android.content.pm.ISystemPersonaObserver)>
<com.samsung.android.knox.ISemPersonaManager: boolean getPersonaUserHasBeenShutdownBefore(int)>
<com.samsung.android.knox.ISemPersonaManager: void setAppSeparationDefaultPolicy(int)>
<com.samsung.android.knox.ISemPersonaManager: boolean setSecureFolderPolicy(java.lang.String,java.util.List,int)>
<com.samsung.android.knox.ISemPersonaManager: boolean isKnoxWindowExist(int,int,int)>
<com.samsung.android.knox.ISemPersonaManager: boolean isAppSeparationPresent()>
<com.samsung.android.knox.ISemPersonaManager: boolean setPersonalModeName(int,java.lang.String)>
<com.samsung.android.knox.ISemPersonaManager: byte[] getKnoxIcon(java.lang.String,java.lang.String,int)>
<com.samsung.android.knox.ISemPersonaManager: void hideMultiWindows(int)>
<com.samsung.android.knox.ISemPersonaManager: int getContainerOrder(int)>
<com.samsung.android.knox.ISemPersonaManager: boolean isFotaUpgradeVersionChanged()>
<com.samsung.android.knox.ISemPersonaManager: int setDualDARProfile(android.os.Bundle)>
<com.samsung.android.knox.ISemPersonaManager: boolean hasLicensePermission(int,java.lang.String)>
<com.samsung.android.knox.ISemPersonaManager: boolean setProfileName(int,java.lang.String)>
<com.samsung.android.knox.ISemPersonaManager: boolean isKnoxProfileActivePasswordSufficientForParent(int)>
<com.samsung.android.knox.ISemPersonaManager: java.lang.String getSecureFolderName()>
<com.samsung.android.knox.ISemPersonaManager: boolean isMoveFilesToContainerAllowed(int)>
<com.samsung.android.knox.ISemPersonaManager: java.lang.String getProfileName(int)>
<com.samsung.android.knox.ISemPersonaManager: boolean setAttributes(int,int)>
<com.samsung.android.knox.ISemPersonaManager: java.util.List getMoveToKnoxMenuList(int)>
<com.samsung.android.knox.ISemPersonaManager: boolean isPasswordSufficientAfterKnoxProfileUnification(int)>
<com.samsung.android.knox.ISemPersonaManager: boolean isShareClipboardDataToContainerAllowed(int)>
<com.samsung.android.knox.ISemPersonaManager: boolean appliedPasswordPolicy(int)>
<com.samsung.android.knox.ISemPersonaManager: void CMFALock(int)>
<com.samsung.android.knox.ISemPersonaManager: int getAttributes(int)>
<com.samsung.android.knox.ISemPersonaManager: java.util.List getSecureFolderPolicy(java.lang.String,int)>
<com.samsung.android.knox.ISemPersonaManager: void startCountrySelectionActivity(boolean)>
<com.samsung.android.knox.ISemPersonaManager: java.lang.String getContainerName(int)>
<com.samsung.android.knox.ISemPersonaManager: java.lang.String getPersonalModeName(int)>
<com.samsung.android.knox.ISemPersonaManager: void updateProfileActivityTimeFromKnox(int,long)>
<com.samsung.android.knox.ISemPersonaManager: java.util.List getProfiles(int,boolean)>
<com.samsung.android.knox.ISemPersonaManager: java.lang.String getWorkspaceName(android.content.pm.UserInfo,boolean)>
<com.samsung.android.knox.ISemPersonaManager: void postPwdChangeNotificationForDeviceOwner(int)>
<com.samsung.android.knox.ISemPersonaManager: boolean isContainerService(int)>
<com.samsung.android.knox.ISemPersonaManager: void addAppPackageNameToAllowList(int,java.util.List)>
<com.samsung.android.knox.ISemPersonaManager: boolean startActivityThroughPersona(android.content.Intent)>
<com.samsung.android.biometrics.ISemBiometricSysUiCallback: void onError(int,int,int)>
<com.samsung.android.biometrics.ISemBiometricSysUiCallback: void onEvent(int,int,int)>
<com.samsung.android.biometrics.ISemBiometricSysUiCallback: void onTouchEvent(int,int)>
<com.samsung.android.biometrics.ISemBiometricSysUiCallback: void onSysUiDismissed(int,int,byte[])>
<com.samsung.android.service.vaultkeeper.IVaultKeeperService: int write(java.lang.String,int,byte[],byte[],byte[])>
<com.samsung.android.service.vaultkeeper.IVaultKeeperService: int checkDataWritable(java.lang.String)>
<com.samsung.android.service.vaultkeeper.IVaultKeeperService: boolean migrationStorage(java.lang.String)>
<com.samsung.android.service.vaultkeeper.IVaultKeeperService: byte[] sensitiveBox(java.lang.String,int,int[])>
<com.samsung.android.service.vaultkeeper.IVaultKeeperService: int destroy(java.lang.String,byte[],byte[],byte[])>
<com.samsung.android.service.vaultkeeper.IVaultKeeperService: int generateHotpCode(java.lang.String)>
<com.samsung.android.service.vaultkeeper.IVaultKeeperService: boolean verifyCertificate(java.lang.String,byte[])>
<com.samsung.android.service.vaultkeeper.IVaultKeeperService: byte[] encryptMessage(java.lang.String,byte[])>
<com.samsung.android.service.vaultkeeper.IVaultKeeperService: boolean isInitialized(java.lang.String)>
<com.samsung.android.service.vaultkeeper.IVaultKeeperService: byte[] read(java.lang.String,int,int[])>
<com.samsung.android.service.vaultkeeper.IVaultKeeperService: int initialize(java.lang.String,byte[],byte[],byte[],byte[])>
<android.os.IPowerManager: void updateCoverState(boolean)>
<android.os.IPowerManager: void setLCDFlashMode(boolean,android.os.IBinder)>
<android.os.IPowerManager: void setScreenCurtainEnabled(android.os.IBinder,boolean,int)>
<android.os.IPowerManager: java.lang.String[] getWakeLockPackageList()>
<android.os.IPowerManager: void setScreenBrightnessScaleFactor(float,android.os.IBinder)>
<android.os.IPowerManager: void setProximityDebounceTime(android.os.IBinder,int,int)>
<android.os.IPowerManager: java.lang.String getPackageNameOnScreenCurtain()>
<android.os.IPowerManager: void setFreezingScreenBrightness(boolean)>
<android.os.IPowerManager: boolean isScreenCurtainEntryAvailable()>
<android.os.IPowerManager: long getLastUserActivityTime(int)>
<android.os.IPowerManager: void setAutoBrightnessLimit(int,int,boolean)>
<android.os.IPowerManager: void setMasterBrightnessLimit(int,int,int)>
<android.os.IPowerManager: float getCurrentBrightness(boolean)>
<android.os.IPowerManager: void systemReboot(java.lang.String)>
<android.os.IPowerManager: boolean isInteractiveForDisplay(int)>
<android.os.IPowerManager: void switchForceLcdBacklightOffState()>
<android.os.IPowerManager: void setEarlyWakeUp(boolean)>
<android.os.IPowerManager: void setCoverType(int)>
<android.os.IPowerManager: boolean isScreenCurtainEnabled()>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean afpcDataApply()>
<com.samsung.android.hardware.display.ISemMdnieManager: int getScreenMode()>
<com.samsung.android.hardware.display.ISemMdnieManager: int[] getSupportedContentMode()>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean setContentMode(int)>
<com.samsung.android.hardware.display.ISemMdnieManager: void updateAlwaysOnDisplay(boolean,int)>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean disableNightMode()>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean setmDNIeScreenCurtain(boolean)>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean setColorVision(boolean,int,int)>
<com.samsung.android.hardware.display.ISemMdnieManager: int[] getSupportedScreenMode()>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean isContentModeSupported()>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean enableNightMode(int)>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean setLightNotificationMode(boolean)>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean setNightModeBlock(boolean)>
<com.samsung.android.hardware.display.ISemMdnieManager: int getNightModeStep()>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean isScreenModeSupported()>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean setWhiteRGB(int,int,int)>
<com.samsung.android.hardware.display.ISemMdnieManager: int getContentMode()>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean setColorFadeNightDim(boolean)>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean afpcDataOff()>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean afpcDataWrite()>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean setmDNIeColorBlind(boolean,int[])>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean setNightModeStep(int)>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean setNightMode(boolean,int)>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean afpcWorkOff()>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean setmDNIeNegative(boolean)>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean setmDNIeAccessibilityMode(int,boolean)>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean afpcDataVerify()>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean isNightModeSupported()>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean setAmoledACL(int)>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean getNightModeBlock()>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean setScreenMode(int)>
<com.samsung.android.hardware.display.ISemMdnieManager: boolean setmDNIeEmergencyMode(boolean)>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessaging: void setResponseFunctions(vendor.samsung.hardware.radio.messaging.ISehRadioMessagingResponse,vendor.samsung.hardware.radio.messaging.ISehRadioMessagingIndication)>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessaging: void sendSms(int,vendor.samsung.hardware.radio.messaging.SehGsmSmsMessage)>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessaging: void writeSmsToSim(int,vendor.samsung.hardware.radio.messaging.SehSimMsgArgs)>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessaging: int getInterfaceVersion()>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessaging: void sendCdmaSms(int,vendor.samsung.hardware.radio.messaging.SehCdmaSmsMessage)>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessaging: java.lang.String getInterfaceHash()>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessaging: void sendSMSExpectMore(int,vendor.samsung.hardware.radio.messaging.SehGsmSmsMessage)>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessaging: void getImsRegistrationState(int)>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessaging: void getStoredMsgCountFromSim(int)>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessaging: void sendCdmaSmsExpectMore(int,vendor.samsung.hardware.radio.messaging.SehCdmaSmsMessage)>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessaging: void getCellBroadcastConfig(int)>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessaging: void readSmsFromSim(int,int)>
<android.app.IApplicationThread: void bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,java.lang.String,android.content.pm.ProviderInfoList,android.content.ComponentName,android.app.ProfilerInfo,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,boolean,boolean,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle,float,java.lang.String,android.content.AutofillOptions,android.content.ContentCaptureOptions,long[],android.os.SharedMemory,long,long,int,boolean)>
<android.app.IApplicationThread: void stopBinderTrackingAndDumpSystemServer(android.os.ParcelFileDescriptor,java.lang.String,java.lang.String,int,int)>
<android.app.IApplicationThread: void setHttpProxyInfo(android.net.ProxyInfoWrapper)>
<android.app.IApplicationThread: void setFlingerFlag(java.lang.String)>
<android.app.IApplicationThread: void forceGc()>
<android.app.IApplicationThread: void dumpMemInfo(android.os.ParcelFileDescriptor,android.os.Debug$MemoryInfo,boolean,boolean,boolean,boolean,boolean,java.lang.String[])>
<android.app.IApplicationThread: void getProfileLength(java.lang.String)>
<android.app.IApplicationThread: void clearIdsTrainingData(boolean)>
<com.samsung.android.security.mdf.MdfService.IMdfService: int initCCMode()>
<android.service.controls.IControlsProvider: void loadControlsProviderInfo(android.service.controls.IControlsProviderInfoSubscriber)>
<android.blockchain.IBlockchainManager: byte[] getMeasurementFile()>
<android.blockchain.IBlockchainManager: int sspExit()>
<android.blockchain.IBlockchainManager: byte[] getCredential(int)>
<android.blockchain.IBlockchainManager: boolean putCredential(int,byte[])>
<android.blockchain.IBlockchainManager: int sspInit()>
<android.blockchain.IBlockchainManager: android.blockchain.BlockchainTZServiceCommnInfo registerBlockchainFW(android.blockchain.BlockchainTZServiceConfig)>
<android.accessibilityservice.IAccessibilityServiceConnection: void attachAccessibilityOverlayToWindow(int,android.view.SurfaceControl)>
<android.accessibilityservice.IAccessibilityServiceConnection: void attachAccessibilityOverlayToDisplay(int,android.view.SurfaceControl)>
<android.accessibilityservice.IAccessibilityServiceConnection: java.util.List getWindowsMainDisplay(int)>
<android.location.provider.ILocationProvider: void setRequest(android.location.provider.ProviderRequest)>
<android.location.provider.ILocationProvider: void sendExtraCommand(java.lang.String,android.os.Bundle)>
<android.location.provider.ILocationProvider: void setLocationProviderManager(android.location.provider.ILocationProviderManager)>
<android.location.provider.ILocationProvider: void flush()>
<android.app.IAlarmManager: void setAutoPowerUp(java.lang.String)>
<android.app.IAlarmManager: java.util.List getNextAlarmClocks(int)>
<android.content.pm.ISystemPersonaObserver: void onStateChange(int,com.samsung.android.knox.SemPersonaState,com.samsung.android.knox.SemPersonaState)>
<android.content.pm.ISystemPersonaObserver: void onKnoxContainerLaunch(int)>
<android.content.pm.ISystemPersonaObserver: void onRemovePersona(int)>
<android.content.pm.ISystemPersonaObserver: void onPersonaActive(int)>
<android.content.pm.ISystemPersonaObserver: void onResetPersona(int)>
<vendor.samsung.hardware.authfw.ISehAuthenticationFramework: boolean load(int,byte[])>
<vendor.samsung.hardware.authfw.ISehAuthenticationFramework: vendor.samsung.hardware.authfw.SehResult execute(int,byte[])>
<vendor.samsung.hardware.authfw.ISehAuthenticationFramework: java.lang.String getInterfaceHash()>
<vendor.samsung.hardware.authfw.ISehAuthenticationFramework: int getInterfaceVersion()>
<vendor.samsung.hardware.authfw.ISehAuthenticationFramework: boolean terminate(int)>
<android.os.IRunnableCallback: android.os.Bundle run(android.os.Bundle)>
<android.os.IIntelligentBatterySaverService: java.util.List dexoptPackages(java.util.List)>
<android.os.IIntelligentBatterySaverService: java.util.Map getSqdBlockList()>
<android.os.IIntelligentBatterySaverService: boolean isEnableSerive()>
<android.os.IIntelligentBatterySaverService: void setSarrUiControlEnable(boolean)>
<android.os.IIntelligentBatterySaverService: android.os.Bundle getOperationHistory()>
<android.os.IIntelligentBatterySaverService: void setSqdUiControlEnabled(boolean)>
<android.os.IIntelligentBatterySaverService: boolean addSqdBlockList(int,java.lang.String)>
<android.os.IIntelligentBatterySaverService: void setSleepModeEnabled(boolean)>
<android.os.IIntelligentBatterySaverService: void setSleepTime(long,long)>
<android.os.IIntelligentBatterySaverService: boolean removeSqdBlockList(int,java.lang.String)>
<android.os.IIntelligentBatterySaverService: boolean isSqdUiControlEnabled()>
<android.os.IIntelligentBatterySaverService: void setRubinEvent(java.lang.String)>
<android.os.IIntelligentBatterySaverService: long[] getGain()>
<android.os.IIntelligentBatterySaverService: int dexoptPackage(java.lang.String)>
<android.os.IIntelligentBatterySaverService: android.os.Bundle getSleepTime()>
<com.samsung.android.wifi.p2p.ISemWifiP2pManager: void discoverPeers(int,com.samsung.android.wifi.p2p.ISemWifiP2pCallback)>
<com.samsung.android.wifi.p2p.ISemWifiP2pManager: void setInUsePackage(java.lang.String,java.lang.String,java.lang.String,boolean)>
<com.samsung.android.wifi.p2p.ISemWifiP2pManager: int[] getChannelsMhzForBand(int)>
<com.samsung.android.wifi.p2p.ISemWifiP2pManager: java.util.List getInUsePackageList(java.lang.String)>
<com.samsung.android.wifi.p2p.ISemWifiP2pManager: void setMsMiceInfo(int,java.lang.String,java.lang.String)>
<com.samsung.android.wifi.p2p.ISemWifiP2pManager: void removeClient(java.lang.String,com.samsung.android.wifi.p2p.ISemWifiP2pCallback)>
<com.samsung.android.wifi.p2p.ISemWifiP2pManager: com.samsung.android.wifi.p2p.SemWifiP2pDevice getSemWifiP2pDevice(java.lang.String)>
<com.samsung.android.wifi.p2p.ISemWifiP2pManager: void unsetAllInUsePackage(java.lang.String)>
<com.samsung.android.wifi.p2p.ISemWifiP2pManager: void setPreparedAccountPin(java.lang.String,java.lang.String,java.lang.String)>
<com.samsung.android.wifi.p2p.ISemWifiP2pManager: int getWifiP2pState()>
<com.samsung.android.wifi.p2p.ISemWifiP2pManager: void controlOpenWifiScanTimer(int)>
<com.samsung.android.wifi.p2p.ISemWifiP2pManager: android.net.MacAddress getP2pFactoryMacAddress()>
<com.samsung.android.wifi.p2p.ISemWifiP2pManager: void setListenOffloading(int,int,int,int)>
<com.samsung.android.wifi.p2p.ISemWifiP2pManager: boolean isP2pSoftApConcurrencySupported()>
<com.samsung.android.wifi.p2p.ISemWifiP2pManager: boolean disconnectApBlockAutojoin(boolean)>
<com.samsung.android.wifi.p2p.ISemWifiP2pManager: void unsetInUsePackage(java.lang.String,java.lang.String,java.lang.String,boolean)>
<com.samsung.android.wifi.p2p.ISemWifiP2pManager: void setScreenSharing(boolean)>
<android.hardware.IRemoteDeviceCallback: void onCaptureResult(android.hardware.camera2.impl.CameraMetadataNative)>
<android.hardware.IRemoteDeviceCallback: void onError(int)>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessagingIndication: java.lang.String getInterfaceHash()>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessagingIndication: int getInterfaceVersion()>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessagingIndication: void stkSmsSendResultIndication(int,int)>
<vendor.samsung.hardware.radio.messaging.ISehRadioMessagingIndication: void deviceReadyNoti(int)>
<android.content.pm.IPackageInstaller: void setUnknownSourceConfirmResult(int,boolean)>
<com.samsung.android.aod.IAODCallback: void onScreenTurningOn()>
<com.samsung.android.ims.SemImsService: boolean isSimMobilityActivated(int)>
<com.samsung.android.ims.SemImsService: void sendIidToken(java.lang.String,int)>
<com.samsung.android.ims.SemImsService: boolean isCmcEmergencyCallSupported()>
<com.samsung.android.ims.SemImsService: boolean isCmcEmergencyNumber(java.lang.String,int)>
<com.samsung.android.ims.SemImsService: void unregisterAutoConfigurationListener(java.lang.String,int)>
<com.samsung.android.ims.SemImsService: void registerDmValueListener(com.samsung.android.ims.SemImsDmConfigListener)>
<com.samsung.android.ims.SemImsService: void unregisterImsRegistrationListenerForSlot(java.lang.String,int)>
<com.samsung.android.ims.SemImsService: void sendTryRegisterByPhoneId(int)>
<com.samsung.android.ims.SemImsService: void unregisterImsOngoingFtEventListener(java.lang.String)>
<com.samsung.android.ims.SemImsService: java.lang.String registerSimMobilityStatusListener(com.samsung.android.ims.SemSimMobStatusListener,int)>
<com.samsung.android.ims.SemImsService: void unRegisterEpdgListener(java.lang.String)>
<com.samsung.android.ims.SemImsService: com.samsung.android.ims.settings.SemImsProfile[] getCurrentProfileForSlot(int)>
<com.samsung.android.ims.SemImsService: void sendVerificationCode(java.lang.String,int)>
<com.samsung.android.ims.SemImsService: boolean isForbiddenByPhoneId(int)>
<com.samsung.android.ims.SemImsService: boolean isServiceAvailable(java.lang.String,int,int)>
<com.samsung.android.ims.SemImsService: java.lang.String getRcsProfileType(int)>
<com.samsung.android.ims.SemImsService: boolean isVoLteAvailable(int)>
<com.samsung.android.ims.SemImsService: void sendMsisdnNumber(java.lang.String,int)>
<com.samsung.android.ims.SemImsService: boolean isCmcPotentialEmergencyNumber(java.lang.String,int)>
<com.samsung.android.ims.SemImsService: void sendSemCmcRecordingEvent(com.samsung.android.ims.cmc.SemCmcRecordingInfo,int,int)>
<com.samsung.android.ims.SemImsService: boolean isCrossSimCallingRegistered(int)>
<com.samsung.android.ims.SemImsService: void unregisterSimMobilityStatusListener(java.lang.String,int)>
<com.samsung.android.ims.SemImsService: java.lang.String registerEpdgListener(com.samsung.android.ims.ISemEpdgListener)>
<com.samsung.android.ims.SemImsService: com.samsung.android.ims.SemImsRegistration getRegistrationInfoByServiceType(java.lang.String,int)>
<com.samsung.android.ims.SemImsService: com.samsung.android.ims.SemImsRegistration[] getRegistrationInfoByPhoneId(int)>
<com.samsung.android.ims.SemImsService: java.lang.String registerImsOngoingFtEventListener(com.samsung.android.ims.ft.SemImsFtListener)>
<com.samsung.android.ims.SemImsService: java.lang.String registerImsRegistrationListenerForSlot(com.samsung.android.ims.SemImsRegiListener,int)>
<com.samsung.android.ims.SemImsService: boolean getBooleanConfig(java.lang.String,int)>
<com.samsung.android.ims.SemImsService: boolean hasCrossSimCallingSupport(int)>
<com.samsung.android.ims.SemImsService: java.lang.String registerAutoConfigurationListener(com.samsung.android.ims.SemAutoConfigListener,int)>
<com.samsung.android.ims.SemImsService: void setRttMode(int,int)>
<com.samsung.android.ims.SemImsService: void registerSemCmcRecordingListener(com.samsung.android.ims.cmc.ISemCmcRecordingListener,int)>
<com.samsung.android.ims.SemImsService: void unregisterDmValueListener(com.samsung.android.ims.SemImsDmConfigListener)>
<com.samsung.android.ims.SemImsService: void enableRcsByPhoneId(boolean,int)>
<com.samsung.android.ims.SemImsService: android.content.ContentValues getConfigValues(java.lang.String[],int)>
<com.samsung.android.ims.SemImsService: boolean isRcsEnabled(boolean,int)>
<com.samsung.android.desktopmode.IDesktopModeLauncher: android.os.Bundle sendMessage(android.os.Bundle)>
<android.location.IGeocodeProvider: void getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,android.location.IGeocodeListener)>
<android.location.IGeocodeProvider: void getFromLocation(double,double,int,android.location.GeocoderParams,android.location.IGeocodeListener)>
<android.service.wallpaper.IWallpaperService: void setCurrentUserId(int)>
<android.service.wallpaper.IWallpaperService: void attach(android.service.wallpaper.IWallpaperConnection,android.os.IBinder,int,boolean,int,int,android.graphics.Rect,int,int)>
<com.samsung.android.mhs.ai.ISemMhsAiService: void serviceTypeQuery(float[][],java.lang.String[],int[],int)>
<com.samsung.android.mhs.ai.ISemMhsAiService: void toggleDebugMode(boolean)>
<com.samsung.android.content.smartclip.IAirGestureListener: void onGesture(java.lang.String)>
<com.samsung.android.aod.IAODManager: boolean isSViewCoverBrightnessHigh()>
<com.samsung.android.aod.IAODManager: void unregisterAODListener(android.os.IBinder)>
<com.samsung.android.aod.IAODManager: void updateAODTspRect(int,int,int,int,java.lang.String)>
<com.samsung.android.aod.IAODManager: int setLiveClockImage(int,int,byte[],java.lang.String)>
<com.samsung.android.aod.IAODManager: void registerAODDozeCallback(android.os.IBinder)>
<com.samsung.android.aod.IAODManager: void releaseDoze(android.os.IBinder)>
<com.samsung.android.aod.IAODManager: void requestAODToast(java.lang.String,com.samsung.android.aod.AODToast)>
<com.samsung.android.aod.IAODManager: java.lang.String getAodActiveArea(boolean)>
<com.samsung.android.aod.IAODManager: void writeAODCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.samsung.android.aod.IAODManager: void registerAODListener(android.os.IBinder)>
<com.samsung.android.aod.IAODManager: void acquireDoze(android.os.IBinder,java.lang.String,java.lang.String)>
<com.samsung.android.aod.IAODManager: int setLiveClockCommand(int,int,int,int[])>
<com.samsung.android.aod.IAODManager: int setLiveClockInfo(int,long,long,long,long,long,long,long,long)>
<com.samsung.android.aod.IAODManager: void setLiveClockNeedle(byte[])>
<com.samsung.android.aod.IAODManager: void addLogText(java.util.List)>
<com.samsung.android.aod.IAODManager: java.lang.String getActiveImageInfo()>
<com.samsung.android.aod.IAODManager: void readyToScreenTurningOn()>
<com.samsung.android.aod.IAODManager: boolean isAODState()>
<com.samsung.android.aod.IAODManager: void unregisterAODDozeCallback(android.os.IBinder)>
<com.android.internal.app.IAppOpsService: void requestPermissionAccessInformation()>
<android.hardware.biometrics.IBiometricService: android.hardware.biometrics.PromptInfo semGetPromptInfo(int)>
<android.location.IGeocodeListener: void onResults(java.lang.String,java.util.List)>
<android.media.IMediaRouterService: android.media.RoutingSessionInfo getSystemSessionInfoForPackage(android.media.IMediaRouter2Manager,java.lang.String)>
<android.media.IMediaRouterService: boolean verifyPackageExists(java.lang.String)>
<com.samsung.android.multiwindow.IFreeformCallback: void onMinimized(android.content.ComponentName,int,int,int,int,boolean)>
<com.samsung.android.multiwindow.IFreeformCallback: void onTaskMoveEnded(int,android.os.IRemoteCallback)>
<com.samsung.android.multiwindow.IFreeformCallback: void onMinimizeAnimationEnd(int)>
<com.samsung.android.multiwindow.IFreeformCallback: void onTaskMoveStarted(int,android.graphics.Point)>
<com.samsung.android.multiwindow.IFreeformCallback: void onUnminimized(int)>
<android.nfc.cardemulation.ISeSettingsService: void setSeacActive(android.content.ComponentName,boolean)>
<com.samsung.android.remoteappmode.IRemoteAppModeListener: void onRemoteAppModeStateChanged(boolean)>
<com.samsung.android.content.clipboard.IOnClipboardEventListener: void onClipboardEvent(int,com.samsung.android.content.clipboard.data.SemClipData)>
<com.samsung.android.content.clipboard.IOnClipboardEventListener: void onUpdateFilter(int)>
<com.samsung.android.sepunion.IUnionManager: void setDumpEnabled(java.lang.String,java.lang.String)>
<com.samsung.android.sepunion.IUnionManager: android.os.IBinder getSemSystemService(java.lang.String,android.os.Bundle)>
<android.service.dreams.IDreamManager: void semStartDozing(android.os.IBinder,int,int,int,boolean)>
<android.hardware.ISensorPrivacyManager: void setToggleSensorPrivacyForProfileGroupWithConfirmPopup(int,int,int,boolean)>
<android.spay.ITAController: boolean clearDeviceCertificates(java.lang.String)>
<android.spay.ITAController: android.spay.TACommandResponse processTACommand(android.spay.TACommandRequest)>
<android.spay.ITAController: void unloadTA()>
<android.spay.ITAController: boolean loadTA(android.os.ParcelFileDescriptor,long,long)>
<android.spay.ITAController: android.spay.CertInfo checkCertInfo(java.util.List)>
<android.spay.ITAController: boolean makeSystemCall(int)>
<com.samsung.android.core.IFoldStarManager: void setFrontScreenOnWhenAppContinuityMode(boolean)>
<com.samsung.android.core.IFoldStarManager: java.util.Map getDisplayCompatPackages(int,int,java.util.Map)>
<com.samsung.android.core.IFoldStarManager: void initAppContinuityValueWhenReset(boolean,boolean)>
<com.samsung.android.core.IFoldStarManager: void unregisterFoldStarCallback(com.samsung.android.core.IFoldStarCallback)>
<com.samsung.android.core.IFoldStarManager: void setFixedAspectRatioPackages(int,java.util.Map,boolean)>
<com.samsung.android.core.IFoldStarManager: void setDisplayCompatPackages(int,java.util.Map,boolean)>
<com.samsung.android.core.IFoldStarManager: void registerFoldStarCallback(com.samsung.android.core.IFoldStarCallback)>
<com.samsung.android.core.IFoldStarManager: void setAppContinuityMode(java.lang.String,int,boolean)>
<com.samsung.android.core.IFoldStarManager: java.util.Map getFixedAspectRatioPackages(int,int,java.util.Map)>
<com.samsung.android.core.IFoldStarManager: void setAllAppContinuityMode(int,boolean)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: int getInterfaceVersion()>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void emergencyControlResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void emergencySearchResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void setRoamingNetworkInfoViaBLEResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void getNrIconTypeResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void sendRequestStringsResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,java.lang.String[])>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void getDisable2gResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void setScanResultViaBLEResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void getCnapResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void setDisable2gResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void sendEncodedUssdResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void setCurrentNetworkInfoViaBLEResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void sendRequestRawResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,byte[])>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void getVendorSpecificConfigurationResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,vendor.samsung.hardware.radio.network.SehVendorConfiguration[])>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: java.lang.String getInterfaceHash()>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void setNrModeResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void setImsCallListResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void getCsgListResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,vendor.samsung.hardware.radio.network.SehCsgInfo[])>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void selectCsgManualResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void setVendorSpecificConfigurationResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void getPreferredNetworkListResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,vendor.samsung.hardware.radio.network.SehPreferredNetworkInfo[])>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void setPreferredNetworkListResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void getNrModeResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void getAvailableNetworksResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,vendor.samsung.hardware.radio.network.SehOperatorInfo[])>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse: void getRoamingNetworkInfoViaBLEResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,vendor.samsung.hardware.radio.network.SehRoamingNetworkInfo[])>
<android.os.IZtd: int startMonitoringFiles(int,int[],java.util.List,java.util.List,android.os.IZtdListener)>
<android.os.IZtd: void startTracing(int,int,long,android.os.IZtdListener)>
<android.os.IZtd: int startMonitoringDomains(int,int[],java.util.List,android.os.IZtdListener)>
<android.os.IZtd: int stopMonitoringDomains(int)>
<android.os.IZtd: void stopTracing(int,int)>
<android.os.IZtd: int stopMonitoringFiles(int)>
<com.samsung.android.multicontrol.IInputFilterInstallListener: void onInstalled()>
<com.samsung.android.multicontrol.IInputFilterInstallListener: void onUninstalled()>
<android.sec.clipboard.data.IClipboardDataList: int size()>
<android.sec.clipboard.data.IClipboardDataList: boolean updateData(int,com.samsung.android.content.clipboard.data.SemClipData)>
<android.sec.clipboard.data.IClipboardDataList: com.samsung.android.content.clipboard.data.SemClipData getClipByID(java.lang.String)>
<android.sec.clipboard.data.IClipboardDataList: com.samsung.android.content.clipboard.data.SemClipData getItem(int)>
<android.sec.clipboard.data.IClipboardDataList: boolean removeData(int)>
<com.samsung.android.ims.SemImsDmConfigListener: void onChangeDmValue(java.lang.String,boolean)>
<com.samsung.android.wifi.ISemMobileWipsPacketSender: boolean sendTcp(int,byte[],byte[],java.lang.String)>
<com.samsung.android.wifi.ISemMobileWipsPacketSender: int sendDhcp(int,byte[],int,java.lang.String)>
<com.samsung.android.wifi.ISemMobileWipsPacketSender: java.util.List sendIcmp(int,byte[],byte[],java.lang.String)>
<com.samsung.android.wifi.ISemMobileWipsPacketSender: byte[] sendDns(long[],byte[],byte[],byte[],java.lang.String,boolean)>
<com.samsung.android.wifi.ISemMobileWipsPacketSender: java.util.List sendArp(int,byte[],byte[],java.lang.String)>
<com.samsung.android.wifi.ISemMobileWipsPacketSender: boolean pingTcp(byte[],byte[],int,int,int)>
<com.samsung.android.wifi.ISemMobileWipsPacketSender: java.util.List sendArpToSniffing(int,byte[],byte[],java.lang.String)>
<com.samsung.android.wifi.ISemMobileWipsPacketSender: boolean sendDnsQueries(long[],byte[],byte[],java.lang.String,java.util.List,int)>
<android.location.INSLocationCallback: void sendLogToHqm(java.lang.String,java.lang.String,java.lang.String)>
<android.location.INSLocationCallback: android.os.Bundle getActiveRequests(java.lang.String)>
<android.location.INSLocationCallback: android.os.Bundle getUidState(int,int)>
<android.location.INSLocationCallback: void updateBackgroundThrottlingAllowlist(java.util.List)>
<android.location.INSLocationCallback: void registerDeviceActivityDetector(int,int,boolean)>
<android.location.INSLocationCallback: void setMotionPowerSaveMode(boolean)>
<android.location.INSLocationCallback: void unregisterDeviceActivityDetector()>
<android.location.INSLocationCallback: void requestToUpdateDeviceActivityDetector()>
<android.location.INSLocationCallback: void writeUtLog(int,java.lang.String,java.lang.String)>
<android.location.INSLocationCallback: void noteGpsOp(int,int)>
<android.location.INSLocationCallback: boolean isProviderEnabled(java.lang.String,int)>
<android.location.INSLocationCallback: boolean setFeatureDeviceActivity(boolean)>
<android.location.INSLocationCallback: boolean isLocationEnabled(int)>
<android.os.IExternalVibratorService: boolean shouldIgnoreExternalVibrationLocked(int,int,int,int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkIndication: void imsPreferenceChanged(int,int[])>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkIndication: void roamingNetworkScanIsRequested(int,byte[])>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkIndication: void execute(int,java.lang.String)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkIndication: void nrNetworkTypeAdded(int,int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkIndication: void callDetailsChanged(int,vendor.samsung.hardware.radio.network.SehCallDetails[])>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkIndication: int getInterfaceVersion()>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkIndication: void signalLevelInfoChanged(int,vendor.samsung.hardware.radio.network.SehSignalBar)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkIndication: java.lang.String getInterfaceHash()>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkIndication: void csFallback(int,int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkIndication: void eriInfoReceived(int,vendor.samsung.hardware.radio.network.SehEriInfo)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkIndication: void vendorConfigurationChanged(int,vendor.samsung.hardware.radio.network.SehVendorConfiguration[])>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkIndication: void needTurnOnRadioIndication(int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkIndication: void acbInfoChanged(int,int[])>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkIndication: void nrBearerAllocationChanged(int,int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkIndication: void nrIconTypeChanged(int,int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkIndication: void currentNetworkScanIsRequested(int,byte)>
<vendor.samsung.hardware.radio.network.ISehRadioNetworkIndication: void extendedRegistrationState(int,vendor.samsung.hardware.radio.network.SehExtendedRegStateResult)>
<android.app.IWindowToken: void onConfigurationChanged(android.content.res.Configuration,int)>
<android.app.IWindowToken: void onWindowTokenRemoved()>
<android.os.epic.IEpicObject: boolean acquire_lock()>
<android.os.epic.IEpicObject: boolean hint_release(java.lang.String)>
<android.os.epic.IEpicObject: boolean release_lock()>
<android.os.epic.IEpicObject: boolean acquire_lock_conditional(java.lang.String)>
<android.os.epic.IEpicObject: boolean acquire_lock_option_multi(int[],int[])>
<android.os.epic.IEpicObject: boolean acquire_lock_option(int,int)>
<android.os.epic.IEpicObject: boolean release_lock_conditional(java.lang.String)>
<android.os.epic.IEpicObject: boolean perf_hint(java.lang.String)>
<android.content.pm.IMemorySaverPackageMoveObserver: void onStatusChanged(int,int,long)>
<android.content.pm.IMemorySaverPackageMoveObserver: void onCreated(java.lang.String)>
<com.sec.android.allshare.iface.ISubscriber: java.lang.String getServiceVersion()>
<com.sec.android.allshare.iface.ISubscriber: boolean requestCVAsync(java.lang.String,com.sec.android.allshare.iface.CVMessage)>
<com.sec.android.allshare.iface.ISubscriber: boolean subscribeEvent(java.lang.String,com.sec.android.allshare.iface.CVMessage)>
<com.sec.android.allshare.iface.ISubscriber: com.sec.android.allshare.iface.CVMessage requestCVSync(java.lang.String,com.sec.android.allshare.iface.CVMessage)>
<com.sec.android.allshare.iface.ISubscriber: void unsubscribeEvent(java.lang.String,com.sec.android.allshare.iface.CVMessage)>
<com.sec.android.allshare.iface.ISubscriber: java.lang.String getCaptionFilePathFromURI(java.lang.String)>
<com.samsung.android.core.IFoldStarCallback: void onBoundsCompatPackageAppeared(int,java.lang.String)>
<com.samsung.android.desktopmode.IBleAdvertiserService: boolean needToKeepBinding()>
<com.android.internal.statusbar.IStatusBar: void sendThreeFingerGestureKeyEvent(android.view.KeyEvent)>
<com.android.internal.statusbar.IStatusBar: void resetScheduleAutoHide()>
<com.android.internal.statusbar.IStatusBar: void onFocusedDisplayChanged(int)>
<com.android.internal.statusbar.IStatusBar: void requestWindowMagnificationConnection(boolean)>
<com.android.internal.statusbar.IStatusBar: void requestAddTile(android.content.ComponentName,java.lang.CharSequence,java.lang.CharSequence,android.graphics.drawable.Icon,com.android.internal.statusbar.IAddTileResultCallback)>
<com.android.internal.statusbar.IStatusBar: void notifySamsungPayInfo(int,boolean,android.graphics.Rect)>
<com.android.internal.statusbar.IStatusBar: void sendKeyEventToDesktopTaskbar(android.view.KeyEvent)>
<com.android.internal.statusbar.IStatusBar: void setBlueLightFilter(boolean,int)>
<com.android.internal.statusbar.IStatusBar: void setNavigationBarShortcut(java.lang.String,android.widget.RemoteViews,int,int)>
<com.android.internal.statusbar.IStatusBar: void showGlobalActionsMenu(int)>
<com.android.internal.statusbar.IStatusBar: void notifyRequestedGameToolsWin(boolean)>
<com.android.internal.statusbar.IStatusBar: void notifyRequestedSystemKey(boolean,boolean)>
<android.hardware.IRemoteDevice: android.hardware.camera2.impl.CameraMetadataNative getCameraCharacteristic()>
<android.hardware.IRemoteDevice: void setCallback(android.hardware.IRemoteDeviceCallback)>
<android.hardware.IRemoteDevice: android.hardware.camera2.impl.CameraMetadataNative createDefaultRequest()>
<android.hardware.IRemoteDevice: void deleteStream(int)>
<android.hardware.IRemoteDevice: void submitRequest(android.hardware.camera2.impl.CameraMetadataNative,int[],boolean)>
<android.hardware.IRemoteDevice: void close()>
<android.hardware.IRemoteDevice: int createStream(android.hardware.camera2.params.OutputConfiguration)>
<android.hardware.IRemoteDevice: java.lang.String open(java.lang.String,int)>
<android.hardware.IRemoteDevice: void clearRequest()>
<com.android.internal.app.IBatteryStats: void noteResetGps()>
<com.android.internal.app.IBatteryStats: boolean registerBatteryStatsCallback(com.android.internal.app.IBatteryStatsCallback)>
<com.android.internal.app.IBatteryStats: void noteDualScreenBrightness(int,int,int)>
<com.android.internal.app.IBatteryStats: void setDeviceBatteryInfo(java.lang.String,com.samsung.android.os.SemCompanionDeviceBatteryInfo)>
<com.android.internal.app.IBatteryStats: void registerDeviceBatteryInfoChanged(java.lang.String)>
<com.android.internal.app.IBatteryStats: void noteStopGps(int)>
<com.android.internal.app.IBatteryStats: void noteStopTxPowerSharing()>
<com.android.internal.app.IBatteryStats: void noteDualScreenState(int,int,int)>
<com.android.internal.app.IBatteryStats: android.os.SemBatterySipper getSemBatteryUsageStats()>
<com.android.internal.app.IBatteryStats: com.samsung.android.os.SemCompanionDeviceBatteryInfo getDeviceBatteryInfo(java.lang.String)>
<com.android.internal.app.IBatteryStats: void notePhoneDataConnectionState(int,boolean,int,int)>
<com.android.internal.app.IBatteryStats: boolean unregisterBatteryStatsCallback(com.android.internal.app.IBatteryStatsCallback)>
<com.android.internal.app.IBatteryStats: void setTemperatureNCurrent(int,int,int,int,int)>
<com.android.internal.app.IBatteryStats: void noteBleDutyScanStarted(android.os.WorkSource,boolean,int)>
<com.android.internal.app.IBatteryStats: void updateSpeakerOutEnergyInfo(android.os.SpeakerOutEnergyInfo)>
<com.android.internal.app.IBatteryStats: void noteStartGps(int)>
<com.android.internal.app.IBatteryStats: void updateSemModemActivityInfo(android.os.SemModemActivityInfo)>
<com.android.internal.app.IBatteryStats: void updateForegroundAppEnergyInfo(java.util.List)>
<com.android.internal.app.IBatteryStats: boolean isCpuClusterAvailable()>
<com.android.internal.app.IBatteryStats: boolean isCpuFrequencyAvailable()>
<com.android.internal.app.IBatteryStats: void unsetDeviceBatteryInfo(java.lang.String)>
<com.android.internal.app.IBatteryStats: void setBatteryState(int,int,int,int,int,int,int,int,long,int,int,int,int,boolean)>
<com.android.internal.app.IBatteryStats: void noteBleDutyScanStopped(android.os.WorkSource,boolean,int)>
<com.android.internal.app.IBatteryStats: void noteStartTxPowerSharing()>
<com.android.internal.app.IBatteryStats: void unRegisterDeviceBatteryInfoChanged(java.lang.String)>
<com.android.internal.app.IBatteryStats: void noteUpdateNetworkStats(java.lang.String)>
<com.android.internal.app.IBatteryStats: com.samsung.android.os.SemCompanionDeviceBatteryInfo[] getDeviceBatteryInfos()>
<android.location.IGnssStatusListener: void onSvStatusChanged(android.location.GnssStatus)>
<android.location.IGnssStatusListener: void onGnssStarted()>
<android.location.IGnssStatusListener: void onFirstFix(int)>
<android.location.IGnssStatusListener: void onGnssStopped()>
<android.window.ITaskOrganizer: void resetStashedFreeform(int,boolean)>
<android.window.ITaskOrganizer: void onKeepScreenOnChanged(int,boolean)>
<android.window.ITaskOrganizer: void preloadSplashScreenAppIcon(android.content.pm.ActivityInfo,int,android.content.res.Configuration)>
<android.window.ITaskOrganizer: void onNewDexImmersiveModeChanged(int,boolean)>
<android.window.ITaskOrganizer: void onImmersiveModeChanged(int,boolean)>
<android.window.ITaskOrganizer: void onSplitLayoutChangeRequested(android.app.ActivityManager$RunningTaskInfo,android.os.Bundle)>
<com.android.internal.telephony.ISemPhoneSubInfo: int getDataServiceState()>
<com.android.internal.telephony.ISemPhoneSubInfo: boolean setUwbTimers(int[])>
<com.android.internal.telephony.ISemPhoneSubInfo: boolean setDrxMode(int)>
<com.android.internal.telephony.ISemPhoneSubInfo: int getDefaultCycleForKodiak()>
<com.android.internal.telephony.ISemPhoneSubInfo: int[] getSupportedModesForKodiak()>
<com.android.internal.telephony.ISemPhoneSubInfo: int getCurrentModeForKodiak()>
<com.android.internal.telephony.ISemPhoneSubInfo: int getCurrentCycle(int)>
<com.android.internal.telephony.ISemPhoneSubInfo: int[] getUwbTimers()>
<com.android.internal.telephony.ISemPhoneSubInfo: boolean changeDRXForKodiak(int,int)>
<com.android.internal.telephony.ISemPhoneSubInfo: int getDrxMode()>
<com.android.internal.telephony.ISemPhoneSubInfo: int[] getSupportedCycles(int)>
<com.android.internal.telephony.ISemPhoneSubInfo: boolean changeDRX(int,int,int)>
<com.android.internal.telephony.ISemPhoneSubInfo: int getDefaultCycle(int)>
<com.android.internal.telephony.ISemPhoneSubInfo: boolean hasCall(java.lang.String)>
<com.android.internal.telephony.ISemPhoneSubInfo: int getDataServiceStateUsingSubId(int)>
<com.samsung.android.knox.tima.attestation.IEnhancedAttestation: void enhancedAttestation(java.lang.String,java.lang.String,com.samsung.android.knox.tima.attestation.IEnhancedAttestationPolicyCallback,boolean)>
<android.net.ITetheringStatsProvider: void setInterfaceQuota(java.lang.String,long)>
<android.net.ITetheringStatsProvider: android.net.NetworkStats getTetherStats(int)>
<android.media.IAudioService: int getStreamVolumeForDevice(int,int)>
<android.media.IAudioService: void setAppMute(int,boolean,java.lang.String)>
<android.media.IAudioService: void setMultiSoundOn(boolean,boolean)>
<android.media.IAudioService: java.lang.String[] getSelectedAppList()>
<android.media.IAudioService: boolean isForceSpeakerOn()>
<android.media.IAudioService: int getPrevRingerMode()>
<android.media.IAudioService: void setAppDevice(int,int,boolean)>
<android.media.IAudioService: java.lang.String getCurrentAudioFocusPackageName()>
<android.media.IAudioService: void setForceSpeakerOn(boolean)>
<android.media.IAudioService: int secGetActiveStreamType(int)>
<android.media.IAudioService: void removePackageForName(java.lang.String)>
<android.media.IAudioService: int getAppDevice(int)>
<android.media.IAudioService: void registerPlaybackCallbackWithPackage(android.media.IPlaybackConfigDispatcher,java.lang.String)>
<android.media.IAudioService: int[] getMediaVolumeSteps()>
<android.media.IAudioService: void dismissVolumePanel()>
<android.media.IAudioService: java.util.List getExcludedRingtoneTitles(int)>
<android.media.IAudioService: int getMuteInterval()>
<android.media.IAudioService: void notifySafetyVolumeDialogVisible(android.media.IVolumeController,boolean)>
<android.media.IAudioService: void setA2dpDeviceVolume(android.bluetooth.BluetoothDevice,int,int,int,java.lang.String)>
<android.media.IAudioService: float[] getFloatVolumeTable()>
<android.media.IAudioService: int setDeviceToForceByUser(int,java.lang.String,boolean)>
<android.media.IAudioService: void setRadioOutputPath(int)>
<android.media.IAudioService: boolean shouldShowRingtoneVolume()>
<android.media.IAudioService: void setStreamVolumeForDeviceWithAttribution(int,int,int,java.lang.String,java.lang.String,int)>
<android.media.IAudioService: boolean setMediaVolumeSteps(int[])>
<android.media.IAudioService: void addPackage(int,java.lang.String)>
<android.media.IAudioService: int getA2dpDeviceVolume(android.bluetooth.BluetoothDevice,int)>
<android.media.IAudioService: boolean isAlreadyInDB(java.lang.String)>
<android.media.IAudioService: void setAudioServiceConfig(java.lang.String)>
<android.media.IAudioService: void setSoundSettingEventBroadcastIntent(int,android.app.PendingIntent)>
<android.media.IAudioService: boolean isSafeMediaVolumeStateActive()>
<android.media.IAudioService: java.lang.String getAudioServiceConfig(java.lang.String)>
<android.media.IAudioService: int getUidForDevice(int)>
<android.media.IAudioService: void nativeEvent(java.lang.String,java.lang.String,int)>
<android.media.IAudioService: boolean isInAllowedList(java.lang.String)>
<android.media.IAudioService: int getFineVolume(int,int)>
<android.media.IAudioService: int getRadioOutputPath()>
<android.media.IAudioService: boolean isMultiSoundOn()>
<android.media.IAudioService: void setMuteInterval(int,java.lang.String)>
<android.media.IAudioService: void setRemoteMic(boolean)>
<android.media.IAudioService: boolean isUsingAudio(int)>
<android.media.IAudioService: void setFineVolume(int,int,int,int,java.lang.String)>
<android.media.IAudioService: int getRemainingMuteIntervalMs()>
<android.media.IAudioService: boolean isAppMute(int)>
<android.media.IAudioService: int getAppVolume(int)>
<android.media.IAudioService: java.lang.String getPinAppInfo(int)>
<android.media.IAudioService: void recordRingtoneChanger(java.lang.String)>
<android.media.IAudioService: void setBtOffloadEnable(int)>
<android.media.IAudioService: int getModeInternal()>
<android.media.IAudioService: void setAppVolume(int,int,java.lang.String)>
<android.media.IAudioService: int getPinDevice()>
<com.samsung.android.hardware.display.IRefreshRateToken: void release()>
<android.hardware.ICameraServiceListener: void onCameraDeviceStateChanged(java.lang.String,int,int,java.lang.String,int,int)>
<android.permission.IPermissionManager: void grantRuntimePermission(java.lang.String,java.lang.String,int)>
<android.permission.IPermissionManager: void updatePermissionFlags(java.lang.String,java.lang.String,int,int,boolean,int)>
<android.permission.IPermissionManager: boolean shouldShowRequestPermissionRationale(java.lang.String,java.lang.String,int)>
<android.permission.IPermissionManager: int getPermissionFlags(java.lang.String,java.lang.String,int)>
<android.permission.IPermissionManager: void startOneTimePermissionSession(java.lang.String,int,long,long)>
<android.permission.IPermissionManager: void revokeRuntimePermission(java.lang.String,java.lang.String,int,java.lang.String)>
<android.permission.IPermissionManager: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String,int)>
<com.samsung.android.media.codec.IVideoTranscodingServiceCallback: void onStarted()>
<com.samsung.android.media.codec.IVideoTranscodingServiceCallback: void onError()>
<com.samsung.android.media.codec.IVideoTranscodingServiceCallback: void onReady()>
<com.samsung.android.media.codec.IVideoTranscodingServiceCallback: void onProgressChanged(int)>
<com.samsung.android.media.codec.IVideoTranscodingServiceCallback: void onCompleted()>
<com.samsung.android.edge.IEdgeManager: void bindEdgeLightingService(android.os.IBinder,int,android.content.ComponentName)>
<com.samsung.android.edge.IEdgeManager: void startEdgeLighting(java.lang.String,com.samsung.android.edge.SemEdgeLightingInfo,android.os.IBinder)>
<com.samsung.android.edge.IEdgeManager: void updateEdgeLightingPolicy(java.lang.String,com.samsung.android.edge.EdgeLightingPolicy)>
<com.samsung.android.edge.IEdgeManager: void cancelNotification(java.lang.String,java.lang.String,int,int,java.lang.String)>
<com.samsung.android.edge.IEdgeManager: int getEdgeLightingState()>
<com.samsung.android.edge.IEdgeManager: void disable(int,java.lang.String,android.os.IBinder)>
<com.samsung.android.edge.IEdgeManager: void cancelNotificationByGroupKey(java.lang.String,java.lang.String,int,int,java.lang.String,java.lang.String)>
<com.samsung.android.edge.IEdgeManager: boolean isPackageEnabled(java.lang.String,int)>
<com.samsung.android.edge.IEdgeManager: void unbindEdgeLightingService(android.os.IBinder,java.lang.String)>
<com.samsung.android.edge.IEdgeManager: void unregisterEdgeLightingListener(android.os.IBinder,java.lang.String)>
<com.samsung.android.edge.IEdgeManager: void updateEdgeLightingPackageList(java.lang.String,java.util.List)>
<com.samsung.android.edge.IEdgeManager: boolean isEdgeLightingNotificationAllowed(java.lang.String)>
<com.samsung.android.edge.IEdgeManager: void disableEdgeLightingNotification(java.lang.String,boolean)>
<com.samsung.android.edge.IEdgeManager: void registerEdgeLightingListener(android.os.IBinder,android.content.ComponentName)>
<com.samsung.android.edge.IEdgeManager: void stopEdgeLighting(java.lang.String,android.os.IBinder)>
<android.content.IRCPInterfaceCallback: void onDone(java.lang.String,int)>
<android.content.IRCPInterfaceCallback: void onProgress(java.lang.String,int,int)>
<android.content.IRCPInterfaceCallback: void onComplete(java.util.List,int,int)>
<android.content.IRCPInterfaceCallback: void onFail(java.lang.String,int,int)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getWifiVersions()>
<com.samsung.android.wifi.ISemWifiManager: void clearAutoHotspotLists()>
<com.samsung.android.wifi.ISemWifiManager: java.util.Map getCtlFeatureState()>
<com.samsung.android.wifi.ISemWifiManager: boolean setWesModeEnabled(boolean)>
<com.samsung.android.wifi.ISemWifiManager: void setWifiApGuestPassword(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: boolean setFactoryMacAddress(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: int getWifiIconVisibility()>
<com.samsung.android.wifi.ISemWifiManager: boolean setOptimizerForceControlMode(int)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getAutoShareDump()>
<com.samsung.android.wifi.ISemWifiManager: java.util.Map getConfiguredNetworkLocations()>
<com.samsung.android.wifi.ISemWifiManager: void startIssueMonitoring(android.os.Bundle)>
<com.samsung.android.wifi.ISemWifiManager: boolean setRoamScanChannels(java.lang.String[])>
<com.samsung.android.wifi.ISemWifiManager: void setWifiApIsolate(boolean)>
<com.samsung.android.wifi.ISemWifiManager: int setWifiUwbCoexEnabled(int,boolean)>
<com.samsung.android.wifi.ISemWifiManager: void startTimerForWifiOffload()>
<com.samsung.android.wifi.ISemWifiManager: int startMcfClientMHSDiscovery(boolean)>
<com.samsung.android.wifi.ISemWifiManager: boolean saveFwDump()>
<com.samsung.android.wifi.ISemWifiManager: void set5GmmWaveSarBackoffEnabled(boolean)>
<com.samsung.android.wifi.ISemWifiManager: void enableHotspotTsfInfo(boolean)>
<com.samsung.android.wifi.ISemWifiManager: boolean setWifiApEnabled(android.net.wifi.SoftApConfiguration,boolean)>
<com.samsung.android.wifi.ISemWifiManager: void unregisterWifiApSmartCallback(int)>
<com.samsung.android.wifi.ISemWifiManager: boolean isGripSensorMonitorEnabled()>
<com.samsung.android.wifi.ISemWifiManager: void setWifiApClientDataPaused(java.lang.String,boolean)>
<com.samsung.android.wifi.ISemWifiManager: void setVerboseLoggingEnabled(boolean)>
<com.samsung.android.wifi.ISemWifiManager: void registerClientDataUsageCallback(android.os.IBinder,com.samsung.android.wifi.ISemWifiApClientUpdateCallback,int,java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: int getMcfConnectedStatus(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: void setTestSettings(int,android.os.Bundle)>
<com.samsung.android.wifi.ISemWifiManager: void setWifiApConfigurationToDefault()>
<com.samsung.android.wifi.ISemWifiManager: void setImsCallEstablished(boolean)>
<com.samsung.android.wifi.ISemWifiManager: void triggerBackoffRoutine(boolean)>
<com.samsung.android.wifi.ISemWifiManager: java.util.Map getQoSScores(java.util.List)>
<com.samsung.android.wifi.ISemWifiManager: boolean disconnectApBlockAutojoin(boolean)>
<com.samsung.android.wifi.ISemWifiManager: int getIndoorStatus()>
<com.samsung.android.wifi.ISemWifiManager: boolean canAutoHotspotBeEnabled()>
<com.samsung.android.wifi.ISemWifiManager: void registerPasswordCallback(java.lang.String,com.samsung.android.wifi.ISemSharedPasswordCallback)>
<com.samsung.android.wifi.ISemWifiManager: void setLoopbackTestSettings(android.os.Bundle)>
<com.samsung.android.wifi.ISemWifiManager: boolean setProvisionSuccess(boolean)>
<com.samsung.android.wifi.ISemWifiManager: int getWifiApState()>
<com.samsung.android.wifi.ISemWifiManager: void setWifiSettingsForegroundState(int)>
<com.samsung.android.wifi.ISemWifiManager: void setAdvancedAutohotspotConnectSettings(int)>
<com.samsung.android.wifi.ISemWifiManager: void setConnectionAttemptInfo(int,boolean,java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getFrameburstInfo()>
<com.samsung.android.wifi.ISemWifiManager: boolean wifiApBleD2DMhsRole(boolean)>
<com.samsung.android.wifi.ISemWifiManager: boolean isWifiSharingLiteSupported()>
<com.samsung.android.wifi.ISemWifiManager: void wifiApRestoreClientDataUsageSettingsInfo(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: void unRegisterWifiApDataUsageCallback(int)>
<com.samsung.android.wifi.ISemWifiManager: boolean setTdlsEnabled(boolean)>
<com.samsung.android.wifi.ISemWifiManager: java.util.Map getNetworkLastUpdatedTimeMap()>
<com.samsung.android.wifi.ISemWifiManager: int getRoamScanPeriod()>
<com.samsung.android.wifi.ISemWifiManager: void setMaxDtimInSuspendMode(boolean)>
<com.samsung.android.wifi.ISemWifiManager: void restoreSemConfigurationsBackupData(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getStationInfo(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: boolean isWifiApGuestModeIsolationEnabled()>
<com.samsung.android.wifi.ISemWifiManager: int getAdvancedAutohotspotConnectSettings()>
<com.samsung.android.wifi.ISemWifiManager: void setWifiApClientTimeLimit(java.lang.String,long)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getTcpMonitorSocketForegroundHistory(int)>
<com.samsung.android.wifi.ISemWifiManager: boolean isOverAllMhsDataLimitReached()>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getCountryCode()>
<com.samsung.android.wifi.ISemWifiManager: android.os.Bundle getWifiRouterInfo(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: boolean wifiApBleClientRole(boolean)>
<com.samsung.android.wifi.ISemWifiManager: int getWcmEverQualityTested()>
<com.samsung.android.wifi.ISemWifiManager: void reportIssue(int,android.os.Bundle)>
<com.samsung.android.wifi.ISemWifiManager: int getValidState()>
<com.samsung.android.wifi.ISemWifiManager: int getNumOfWifiAnt()>
<com.samsung.android.wifi.ISemWifiManager: void externalTwtInterface(int,java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: int[] getSoftApBands()>
<com.samsung.android.wifi.ISemWifiManager: boolean isWifiApGuestClient(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: java.util.Map setTasPolicy(int,int)>
<com.samsung.android.wifi.ISemWifiManager: boolean connectToSmartD2DClient(java.lang.String,java.lang.String,com.samsung.android.wifi.ISemWifiApSmartCallback)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getPsmInfo()>
<com.samsung.android.wifi.ISemWifiManager: boolean setUploadModeEnabled(boolean)>
<com.samsung.android.wifi.ISemWifiManager: boolean setLocalOnlyHotspotEnabled(boolean,java.lang.String,java.lang.String,int)>
<com.samsung.android.wifi.ISemWifiManager: void setWifiApMacAclMode(int)>
<com.samsung.android.wifi.ISemWifiManager: int getProvisionSuccess()>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getWifiStaInfo()>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getCountryRev()>
<com.samsung.android.wifi.ISemWifiManager: int getSmartMHSLockStatus()>
<com.samsung.android.wifi.ISemWifiManager: boolean setPktlogFilter(java.lang.String,java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: int getOptimizerForceControlMode()>
<com.samsung.android.wifi.ISemWifiManager: void reportHotspotDumpLogs(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: void setAutohotspotToastMessage(int)>
<com.samsung.android.wifi.ISemWifiManager: void setWifiApGuestModeIsolationEnabled(boolean)>
<com.samsung.android.wifi.ISemWifiManager: android.os.Bundle getCurrentWifiRouterInfo()>
<com.samsung.android.wifi.ISemWifiManager: int getWifiApLOHSState()>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getWifiSupportedFeatureSet()>
<com.samsung.android.wifi.ISemWifiManager: int[] getOptimizerState()>
<com.samsung.android.wifi.ISemWifiManager: int getChannelUtilization()>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getConnectivityLog(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: void setWifiApDailyDataLimit(long)>
<com.samsung.android.wifi.ISemWifiManager: void setPowerSavingTime(int)>
<com.samsung.android.wifi.ISemWifiManager: boolean setDcxoCalibrationData(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: void registerWifiApSmartCallback(android.os.IBinder,com.samsung.android.wifi.ISemWifiApSmartCallback,int)>
<com.samsung.android.wifi.ISemWifiManager: void wifiApRestoreDailyHotspotDataLimit(long)>
<com.samsung.android.wifi.ISemWifiManager: void blockFccChannelBackoff(boolean)>
<com.samsung.android.wifi.ISemWifiManager: int getWifiApWarningActivityRunningState()>
<com.samsung.android.wifi.ISemWifiManager: java.util.List getWifiApBleD2DScanDetail()>
<com.samsung.android.wifi.ISemWifiManager: boolean connectToSmartMHS(java.lang.String,int,int,int,java.lang.String,java.lang.String,int,boolean)>
<com.samsung.android.wifi.ISemWifiManager: java.util.List getWifiApBleScanDetail()>
<com.samsung.android.wifi.ISemWifiManager: void runAutoShareForCurrent(java.util.List)>
<com.samsung.android.wifi.ISemWifiManager: void setSoftApConfiguration(android.net.wifi.SoftApConfiguration)>
<com.samsung.android.wifi.ISemWifiManager: void setWifiAiServiceNsdResult(int[],int[],int[],java.lang.String[])>
<com.samsung.android.wifi.ISemWifiManager: void setWifiAiServiceState(boolean,int[],int[])>
<com.samsung.android.wifi.ISemWifiManager: void setConnectivityCheckDisabled(boolean)>
<com.samsung.android.wifi.ISemWifiManager: boolean wifiApBleD2DClientRole(boolean)>
<com.samsung.android.wifi.ISemWifiManager: boolean isWifiSharingEnabled()>
<com.samsung.android.wifi.ISemWifiManager: void resetTotalPriorityDataConsumedValues()>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String setMHSConfig(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: long getWifiApDailyDataLimit()>
<com.samsung.android.wifi.ISemWifiManager: void setRVFmodeStatus(int)>
<com.samsung.android.wifi.ISemWifiManager: void setDtimInSuspendMode(int)>
<com.samsung.android.wifi.ISemWifiManager: long[] getNetworkUsageInfo(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: int getCurrentStatusMode()>
<com.samsung.android.wifi.ISemWifiManager: int getMaxTdlsSession()>
<com.samsung.android.wifi.ISemWifiManager: boolean supportWifiAp6GBasedOnCountry()>
<com.samsung.android.wifi.ISemWifiManager: boolean setRoamDelta(int)>
<com.samsung.android.wifi.ISemWifiManager: java.util.List getTotalAndTop3ClientsDataUsageBetweenGivenDates(long,long)>
<com.samsung.android.wifi.ISemWifiManager: java.util.List getMHSClientTrafficDetails()>
<com.samsung.android.wifi.ISemWifiManager: boolean isWifiApWpa3Supported()>
<com.samsung.android.wifi.ISemWifiManager: boolean wifiApBleMhsRole(boolean)>
<com.samsung.android.wifi.ISemWifiManager: java.util.Map getTasAverage()>
<com.samsung.android.wifi.ISemWifiManager: boolean isOverAllMhsDataLimitSet()>
<com.samsung.android.wifi.ISemWifiManager: boolean isWifiApEnabled()>
<com.samsung.android.wifi.ISemWifiManager: boolean setRoamScanEnabled(boolean)>
<com.samsung.android.wifi.ISemWifiManager: void allowAutojoinPasspoint(java.lang.String,boolean)>
<com.samsung.android.wifi.ISemWifiManager: java.util.List getTopHotspotClientsToday(int,int)>
<com.samsung.android.wifi.ISemWifiManager: void removeExcludedNetwork(int)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getFactoryMacAddress()>
<com.samsung.android.wifi.ISemWifiManager: java.util.List readWifiApMacAclList(int)>
<com.samsung.android.wifi.ISemWifiManager: int getMcfConnectedStatusFromScanResult(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: void setGripSensorMonitorEnabled(boolean)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getWifiUsabilityStatsEntry(int)>
<com.samsung.android.wifi.ISemWifiManager: void setWifiApWarningActivityRunning(int)>
<com.samsung.android.wifi.ISemWifiManager: boolean sendVendorSpecificActionFrame(java.lang.String,int,int,java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: int getWifiApMaxClientFromFramework()>
<com.samsung.android.wifi.ISemWifiManager: boolean setPsmInfo(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: void unregisterTasPolicyChangedListener(com.samsung.android.wifi.SemTasPolicyListener)>
<com.samsung.android.wifi.ISemWifiManager: boolean isSupportedAutoWifi()>
<com.samsung.android.wifi.ISemWifiManager: long[] getDataConsumedValues()>
<com.samsung.android.wifi.ISemWifiManager: void setIWCQTables(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: void setMhsAiServiceState(boolean,int[],int[])>
<com.samsung.android.wifi.ISemWifiManager: int connectToMcfMHS(java.lang.String,int,int,int,java.lang.String,java.lang.String,int)>
<com.samsung.android.wifi.ISemWifiManager: int getAdvancedAutohotspotLCDSettings()>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getWifiApGuestPassword()>
<com.samsung.android.wifi.ISemWifiManager: void setKeepConnection(boolean,boolean)>
<com.samsung.android.wifi.ISemWifiManager: boolean hasConfiguredNetworkLocations(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: void setWifiApGuestModeEnabled(boolean)>
<com.samsung.android.wifi.ISemWifiManager: boolean addOrUpdateNetwork(com.samsung.android.wifi.SemWifiConfiguration)>
<com.samsung.android.wifi.ISemWifiManager: void setUserConfirmForSharingPassword(boolean,java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: void setKeepConnectionBigData(int)>
<com.samsung.android.wifi.ISemWifiManager: void setWifiApMaxClient(int)>
<com.samsung.android.wifi.ISemWifiManager: void setAdvancedAutohotspotLCDSettings(int)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getProfileShareDump()>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getSilentRoamingDump(int)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getWifiRouterInfoBestEffort(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: void setWifiApMaxClientToFramework(int)>
<com.samsung.android.wifi.ISemWifiManager: void unregisterPasswordCallback(com.samsung.android.wifi.ISemSharedPasswordCallback)>
<com.samsung.android.wifi.ISemWifiManager: void updateIWCHintCard(long)>
<com.samsung.android.wifi.ISemWifiManager: boolean isWifiDeveloperModeEnabled()>
<com.samsung.android.wifi.ISemWifiManager: boolean setRoamBand(int)>
<com.samsung.android.wifi.ISemWifiManager: int getNRTTrafficbandwidth()>
<com.samsung.android.wifi.ISemWifiManager: void requestStopAutohotspotAdvertisement(boolean)>
<com.samsung.android.wifi.ISemWifiManager: void setKeepConnectionAlways(boolean)>
<com.samsung.android.wifi.ISemWifiManager: void disableRandomMac()>
<com.samsung.android.wifi.ISemWifiManager: boolean getWifiApIsolate()>
<com.samsung.android.wifi.ISemWifiManager: boolean isAvailableTdls()>
<com.samsung.android.wifi.ISemWifiManager: void setFccChannelBackoffEnabled(java.lang.String,boolean)>
<com.samsung.android.wifi.ISemWifiManager: java.util.List getDiagnosisResults()>
<com.samsung.android.wifi.ISemWifiManager: int getNumOfTdlsSession()>
<com.samsung.android.wifi.ISemWifiManager: int getSmartApConnectedStatus(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: void addOrUpdateWifiControlHistory(java.lang.String,boolean)>
<com.samsung.android.wifi.ISemWifiManager: void notifyReachabilityLost()>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getTcpMonitorAllSocketHistory(int)>
<com.samsung.android.wifi.ISemWifiManager: boolean isAvailableAutoWifiScan()>
<com.samsung.android.wifi.ISemWifiManager: boolean setLatencyCritical(java.lang.String,int)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getMHSConfig(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: boolean setWifiSharingEnabled(boolean)>
<com.samsung.android.wifi.ISemWifiManager: int getSmartApConnectedStatusFromScanResult(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: int getWifiApMacAclMode()>
<com.samsung.android.wifi.ISemWifiManager: int setSmartMHSLocked(int)>
<com.samsung.android.wifi.ISemWifiManager: int[] getServiceDetectionResult()>
<com.samsung.android.wifi.ISemWifiManager: boolean setVendorWlanDriverProp(java.lang.String,java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: int getHotspotAntMode()>
<com.samsung.android.wifi.ISemWifiManager: int getRoamTrigger()>
<com.samsung.android.wifi.ISemWifiManager: void setWifiApClientEditedName(java.lang.String,java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getWifiFirmwareVersion()>
<com.samsung.android.wifi.ISemWifiManager: boolean isSupportedProfileRequest()>
<com.samsung.android.wifi.ISemWifiManager: void requestPassword(boolean)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getVendorWlanDriverProp(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: void resetDeveloperOptionsSettings()>
<com.samsung.android.wifi.ISemWifiManager: boolean isWifiSharingSupported()>
<com.samsung.android.wifi.ISemWifiManager: boolean isUploadModeEnabled()>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String retrieveSemWifiConfigsBackupData()>
<com.samsung.android.wifi.ISemWifiManager: int getWifiApChannel()>
<com.samsung.android.wifi.ISemWifiManager: void isClientAcceptedWifiProfileSharing(boolean)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getTcpMonitorDnsHistory(int)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getWifiRouterInfoPresentable(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: int startMcfMHSAdvertisement(boolean)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getWifiCid()>
<com.samsung.android.wifi.ISemWifiManager: boolean setFrameburstInfo(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: boolean startScan(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: java.util.List getWifiApStaListDetail()>
<com.samsung.android.wifi.ISemWifiManager: boolean getWifiApWpsPbc()>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String wifiApBackUpClientDataUsageSettingsInfo()>
<com.samsung.android.wifi.ISemWifiManager: boolean setAntInfo(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: void setWifiApWpsPbc(boolean)>
<com.samsung.android.wifi.ISemWifiManager: int manageWifiApMacAclList(java.lang.String,java.lang.String,int,int)>
<com.samsung.android.wifi.ISemWifiManager: android.content.pm.ParceledListSlice getConfiguredNetworks()>
<com.samsung.android.wifi.ISemWifiManager: boolean isWesModeEnabled()>
<com.samsung.android.wifi.ISemWifiManager: void setAllowWifiScan(boolean,java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: void updateGuiderFeature(android.os.Bundle)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getAutoWifiDump()>
<com.samsung.android.wifi.ISemWifiManager: void notifyConnect(int,java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: android.net.wifi.SoftApConfiguration getSoftApConfiguration()>
<com.samsung.android.wifi.ISemWifiManager: long getWifiApTodaysTotalDataUsage()>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getWifiApInterfaceName()>
<com.samsung.android.wifi.ISemWifiManager: int getWifiApFreq()>
<com.samsung.android.wifi.ISemWifiManager: int getWifiApMaxClient()>
<com.samsung.android.wifi.ISemWifiManager: boolean removeNetwork(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: boolean setNCHOModeEnabled(boolean)>
<com.samsung.android.wifi.ISemWifiManager: boolean supportWifiAp5GBasedOnCountry()>
<com.samsung.android.wifi.ISemWifiManager: void setTCRule(boolean,java.lang.String,int)>
<com.samsung.android.wifi.ISemWifiManager: boolean sendReassociationRequestFrame(java.lang.String,int)>
<com.samsung.android.wifi.ISemWifiManager: int canSmartMHSLocked()>
<com.samsung.android.wifi.ISemWifiManager: boolean isSwitchToMobileDataDefaultOff()>
<com.samsung.android.wifi.ISemWifiManager: java.util.Map getEasySetupScanSettings()>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getIWCQTables()>
<com.samsung.android.wifi.ISemWifiManager: java.util.List getMcfScanDetail()>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getTopHotspotClientsTodayAsString(int,int)>
<com.samsung.android.wifi.ISemWifiManager: boolean removeFactoryMacAddress()>
<com.samsung.android.wifi.ISemWifiManager: boolean isWiderBandwidthTdlsSupported()>
<com.samsung.android.wifi.ISemWifiManager: void reportBigData(java.lang.String,java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getIssueDetectorDump(int)>
<com.samsung.android.wifi.ISemWifiManager: void restoreIWCSettingsValue(int,int)>
<com.samsung.android.wifi.ISemWifiManager: boolean isIndividualAppSupported()>
<com.samsung.android.wifi.ISemWifiManager: void updateHostapdMacList(int)>
<com.samsung.android.wifi.ISemWifiManager: void setAntMode(int)>
<com.samsung.android.wifi.ISemWifiManager: void setWifiDeveloperModeEnabled(boolean)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getWifiEnableHistory()>
<com.samsung.android.wifi.ISemWifiManager: void setMhsAiServiceNsdResult(int[],java.lang.String[])>
<com.samsung.android.wifi.ISemWifiManager: void factoryReset()>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getCurrentStateAndEnterTime()>
<com.samsung.android.wifi.ISemWifiManager: int getWifiApConnectedStationCount()>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getWifiApStaList()>
<com.samsung.android.wifi.ISemWifiManager: void registerTasPolicyChangedListener(com.samsung.android.wifi.SemTasPolicyListener)>
<com.samsung.android.wifi.ISemWifiManager: void unregisterClientListDataUsageCallback(int)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String runIptablesRulesCommand(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getDcxoCalibrationData()>
<com.samsung.android.wifi.ISemWifiManager: boolean setRoamScanPeriod(int)>
<com.samsung.android.wifi.ISemWifiManager: boolean setRoamTrigger(int)>
<com.samsung.android.wifi.ISemWifiManager: boolean isP2pConnected()>
<com.samsung.android.wifi.ISemWifiManager: int getRoamBand()>
<com.samsung.android.wifi.ISemWifiManager: void setHotspotAntMode(int)>
<com.samsung.android.wifi.ISemWifiManager: boolean isSupportedQoSProvider()>
<com.samsung.android.wifi.ISemWifiManager: boolean isNCHOModeEnabled()>
<com.samsung.android.wifi.ISemWifiManager: boolean isWifiApGuestModeEnabled()>
<com.samsung.android.wifi.ISemWifiManager: void registerClientListDataUsageCallback(android.os.IBinder,com.samsung.android.wifi.ISemWifiApClientListUpdateCallback,int,int,int)>
<com.samsung.android.wifi.ISemWifiManager: boolean setCountryRev(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: boolean isMCFClientAutohotspotSupported()>
<com.samsung.android.wifi.ISemWifiManager: boolean isWifiApMacAclEnabled()>
<com.samsung.android.wifi.ISemWifiManager: int getRVFModeStatus()>
<com.samsung.android.wifi.ISemWifiManager: void setWifiApMacAclEnable(boolean)>
<com.samsung.android.wifi.ISemWifiManager: void registerWifiApDataUsageCallback(android.os.IBinder,com.samsung.android.wifi.ISemWifiApDataUsageCallback,int)>
<com.samsung.android.wifi.ISemWifiManager: void setIWCMockAction(int)>
<com.samsung.android.wifi.ISemWifiManager: int getRssi(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: void resetSoftAp(android.os.Message)>
<com.samsung.android.wifi.ISemWifiManager: void unregisterClientDataUsageCallback(int)>
<com.samsung.android.wifi.ISemWifiManager: int[] getTWTParams()>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getDailyUsageInfo(int)>
<com.samsung.android.wifi.ISemWifiManager: java.util.List getMonthlyDataUsage()>
<com.samsung.android.wifi.ISemWifiManager: void wifiApDisassocSta(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: boolean removePktlogFilter(java.lang.String,java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: void setWifiApClientMobileDataLimit(java.lang.String,long)>
<com.samsung.android.wifi.ISemWifiManager: void checkAppForWiFiOffloading(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: int getRoamDelta()>
<com.samsung.android.wifi.ISemWifiManager: int getSmartD2DClientConnectedStatus(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: boolean isScanningEnabled()>
<com.samsung.android.wifi.ISemWifiManager: void setArdkPowerSaveMode(boolean)>
<com.samsung.android.wifi.ISemWifiManager: boolean isWifiApEnabledWithDualBand()>
<com.samsung.android.wifi.ISemWifiManager: com.samsung.android.wifi.SemWifiApClientDetails getWifiApClientDetails(java.lang.String)>
<com.samsung.android.wifi.ISemWifiManager: java.lang.String getAntInfo()>
<com.samsung.android.wifi.ISemWifiManager: boolean linkQosQuery(long,long,long,int,long)>
<com.samsung.android.wifi.ISemWifiManager: void setEasySetupScanSettings(java.lang.String,com.samsung.android.wifi.SemEasySetupWifiScanSettings)>
<android.content.pm.IASKSManager: java.util.List getUnknownAppList()>
<android.content.pm.IASKSManager: java.lang.String[] checkASKSTarget(int)>
<android.content.pm.IASKSManager: byte[] getSEInfo(java.lang.String)>
<android.content.pm.IASKSManager: boolean isUnknownApps(java.lang.String,android.content.pm.Signature[])>
<android.content.pm.IASKSManager: int checkSecurityEnabled()>
<android.content.pm.IASKSManager: int verifyASKStokenForPackage(java.lang.String,java.lang.String,long,android.content.pm.Signature[],java.lang.String,java.lang.String,boolean)>
<android.content.pm.IASKSManager: void clearASKSruleForRemovedPackage(java.lang.String)>
<android.content.pm.IASKSManager: java.lang.String readASKSFiles(java.lang.String,java.lang.String)>
<android.content.pm.IASKSManager: int checkUnknownSourcePackage(java.lang.String,java.lang.String[],java.lang.String[],java.lang.String,android.content.pm.Signature[],java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,int)>
<android.content.pm.IASKSManager: void checkDeletableListForASKS()>
<android.content.pm.IASKSManager: void postASKSsetup(java.lang.String,java.lang.String,int)>
<android.content.pm.IASKSManager: void applyScpmPolicyFromApp()>
<android.content.pm.IASKSManager: void systemReady()>
<android.content.pm.IASKSManager: int checkRestrictedPermission(java.lang.String,java.lang.String)>
<android.content.pm.IASKSManager: boolean isTrustedStore(java.lang.String,int)>
<android.content.pm.IASKSManager: java.util.List getIMEIList()>
<android.content.pm.IASKSManager: java.lang.String getUNvalueForASKS()>
<android.content.pm.IASKSManager: void setTrustTimebyStatusChanged()>
<android.content.pm.IASKSManager: boolean checkFollowingLegitimateWay(java.lang.String,int)>
<android.hardware.face.IFaceServiceReceiver: void onSemAuthenticationSucceededWithBundle(android.hardware.face.Face,int,boolean,android.os.Bundle)>
<android.hardware.face.IFaceServiceReceiver: void onSemAuthenticationSucceeded(android.hardware.face.Face,int,boolean,byte[])>
<android.hardware.face.IFaceServiceReceiver: void onSemImageProcessed(byte[],int,int,int,int,android.os.Bundle)>
<android.hardware.face.IFaceServiceReceiver: void onSemStatusUpdate(int,java.lang.String)>
<com.android.internal.inputmethod.IInputMethodSession: void showSideSyncSoftInput(int)>
<com.samsung.android.net.IExtendedEthernetManager: android.net.IpConfiguration getConfiguration(java.lang.String)>
<com.samsung.android.gesture.IMotionRecognitionCallback: java.lang.String getListenerInfo()>
<com.samsung.android.gesture.IMotionRecognitionCallback: java.lang.String getListenerPackageName()>
<com.samsung.android.gesture.IMotionRecognitionCallback: void motionCallback(com.samsung.android.gesture.SemMotionRecognitionEvent)>
<android.service.wallpaper.IWallpaperEngine: void setSurfaceAlpha(float)>
<com.samsung.android.remoteappmode.IStartActivityInterceptListener: void onStartActivityIntercepted(android.content.Intent,android.os.Bundle,android.content.pm.ActivityInfo,int,boolean,int,int,int)>
<vendor.samsung.hardware.thermal.ISehThermalChangedCallback: void notifyTemperatures(vendor.samsung.hardware.thermal.SehTemperature[])>
<vendor.samsung.hardware.thermal.ISehThermalChangedCallback: java.lang.String getInterfaceHash()>
<vendor.samsung.hardware.thermal.ISehThermalChangedCallback: int getInterfaceVersion()>
<com.samsung.android.smartface.ISmartFaceClient: void onInfo(int,com.samsung.android.smartface.FaceInfo,int)>
<com.samsung.android.ims.options.SemCapabilityServiceEventListener: void onCapabilityAndAvailabilityPublished(int)>
<com.samsung.android.ims.options.SemCapabilityServiceEventListener: void onOwnCapabilitiesChanged()>
<com.samsung.android.ims.options.SemCapabilityServiceEventListener: void onMultipleCapabilitiesChanged(java.util.List,java.util.List)>
<com.samsung.android.ims.options.SemCapabilityServiceEventListener: void onCapabilitiesChanged(com.samsung.android.ims.util.SemImsUri,com.samsung.android.ims.options.SemCapabilities)>
<com.sec.android.iaft.callback.IIAFTCallback: void traceResult(java.lang.String,int,int,int,int)>
<android.hardware.input.IPointerIconChangedListener: void onPointerIconChanged(int,android.view.PointerIcon)>
<android.spay.IPaymentManager: byte[] getMeasurementFile()>
<android.spay.IPaymentManager: android.spay.PaymentTZServiceCommnInfo registerSPayFW(android.spay.PaymentTZServiceConfig)>
<android.view.IWindow: void dispatchLetterboxDirectionChanged(int)>
<android.view.IWindow: void dispatchDragEventUpdated(android.view.DragEvent)>
<android.view.IWindow: void dispatchSmartClipRemoteRequest(com.samsung.android.content.smartclip.SmartClipRemoteRequestInfo)>
<android.view.IWindow: void dispatchSPenGestureEvent(android.view.InputEvent[])>
<android.view.IWindow: void windowFocusInTaskChanged(boolean)>
<com.samsung.android.sepunion.ISemExclusiveTaskManager: java.util.List getExclusiveTaskList(java.lang.String)>
<com.samsung.android.continuity.ISemContinuitySimpleListener: void onNotify(android.os.Bundle)>
<com.samsung.android.service.HermesService.IHermesService: int hermesProvisioning()>
<com.samsung.android.service.HermesService.IHermesService: byte[] hermesUpdateCryptoFW()>
<com.samsung.android.service.HermesService.IHermesService: byte[] hermesSelftest()>
<com.samsung.android.service.HermesService.IHermesService: byte[] hermesGetSecureHWInfo()>
<com.samsung.android.service.HermesService.IHermesService: int hermesVerifyProvisioning()>
<com.samsung.android.service.HermesService.IHermesService: int hermesTerminateService()>
<com.skms.android.agent.ISkpmService: int SkpmServiceReleaseGetKeySession()>
<com.skms.android.agent.ISkpmService: int SkpmReadInjectedKeyUID(byte,byte,java.lang.String,byte[])>
<com.skms.android.agent.ISkpmService: int SkpmChangeOtaServer(java.lang.String,java.lang.String)>
<com.skms.android.agent.ISkpmService: int SkpmServiceCreateGetKeySession(byte,java.lang.String,byte[],byte)>
<com.skms.android.agent.ISkpmService: int SkpmServiceKeyInjection(byte,byte,java.lang.String,byte[],byte)>
<com.skms.android.agent.ISkpmService: int SkpmServiceInjectedKeyVerification(byte,byte,java.lang.String)>
<android.media.IVolumeController: void displayVolumeLimiterToast()>
<com.samsung.android.app.ISemExecuteManager: void unRegisterChangedCallback(java.lang.String,android.app.PendingIntent,android.os.UserHandle)>
<com.samsung.android.app.ISemExecuteManager: boolean hasShortcutHostPermission(java.lang.String)>
<com.samsung.android.app.ISemExecuteManager: android.os.ParcelFileDescriptor getShortcutIconFd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>
<com.samsung.android.app.ISemExecuteManager: void registerChangedCallback(java.lang.String,android.app.PendingIntent,android.os.UserHandle)>
<com.samsung.android.app.ISemExecuteManager: android.content.pm.ParceledListSlice getShortcuts(java.lang.String,java.lang.String,long,java.lang.String,java.util.List,android.content.ComponentName,int,android.os.UserHandle)>
<com.samsung.android.app.ISemExecuteManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,java.lang.String,int,android.os.UserHandle)>
<com.samsung.android.app.ISemExecuteManager: java.util.List getExecutableInfos()>
<com.samsung.android.app.ISemExecuteManager: com.samsung.android.app.SemExecutableInfo getExecutableInfo(java.lang.String)>
<com.samsung.android.app.ISemExecuteManager: boolean startShortcut(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.graphics.Rect,android.os.Bundle,int)>
<com.samsung.android.biometrics.ISemBiometricSysUiDisplayStateCallback: void onStart(int,int,int)>
<com.samsung.android.biometrics.ISemBiometricSysUiDisplayStateCallback: void onFinish(int,int,int)>
<com.samsung.android.gamesdk.IGameSDKListener: void onRefreshRateChanged()>
<com.samsung.android.gamesdk.IGameSDKListener: void onReleasedByTimeout()>
<com.samsung.android.gamesdk.IGameSDKListener: void onHighTempWarning(int)>
<com.samsung.android.gamesdk.IGameSDKListener: void onReleasedCpuBoost()>
<com.samsung.android.gamesdk.IGameSDKListener: void onReleasedGpuBoost()>
<com.samsung.android.knox.IContainerService: android.os.Bundle onMessage(java.lang.String,android.os.Bundle)>
<com.samsung.android.media.fmradio.internal.IFMEventListener: void onRadioDataSystemDisabled()>
<com.samsung.android.media.fmradio.internal.IFMEventListener: void onScanStarted()>
<com.samsung.android.media.fmradio.internal.IFMEventListener: void onProgrammeIdentificationExtendedCountryCodesReceived(int,int)>
<com.samsung.android.media.fmradio.internal.IFMEventListener: void onRadioTextPlusReceived(int,int,int,int,int,int)>
<com.samsung.android.media.fmradio.internal.IFMEventListener: void onScanFinished(long[])>
<com.samsung.android.media.fmradio.internal.IFMEventListener: void onChannelFound(long)>
<com.samsung.android.media.fmradio.internal.IFMEventListener: void onHeadsetDisconnected()>
<com.samsung.android.media.fmradio.internal.IFMEventListener: void onRadioEnabled()>
<com.samsung.android.media.fmradio.internal.IFMEventListener: void onAlternateFrequencyReceived(long)>
<com.samsung.android.media.fmradio.internal.IFMEventListener: void onRadioDataSystemEnabled()>
<com.samsung.android.media.fmradio.internal.IFMEventListener: void onScanStopped(long[])>
<com.samsung.android.media.fmradio.internal.IFMEventListener: void onAlternateFrequencyStarted()>
<com.samsung.android.media.fmradio.internal.IFMEventListener: void onRadioDataSystemReceived(long,java.lang.String,java.lang.String)>
<com.samsung.android.media.fmradio.internal.IFMEventListener: void onHeadsetConnected()>
<com.samsung.android.media.fmradio.internal.IFMEventListener: void onTuned(long)>
<com.samsung.android.media.fmradio.internal.IFMEventListener: void onRecordingFinished()>
<com.samsung.android.media.fmradio.internal.IFMEventListener: void onVolumeLocked()>
<com.samsung.android.media.fmradio.internal.IFMEventListener: void onRadioDisabled(int)>
<android.os.IIdmap2: java.lang.String getTargetPath(java.lang.String)>
<com.android.ims.internal.ISecImsMmTelEventListener: void onIncomingCall(int,android.os.Bundle)>
<com.android.ims.internal.ISecImsMmTelEventListener: void onCdpnInfo(java.lang.String,int)>
<com.samsung.android.knox.dar.ddar.proxy.IProxyAgent: boolean terminateSecureSession(int,java.lang.String,java.lang.String)>
<com.samsung.android.knox.dar.ddar.proxy.IProxyAgent: java.lang.String initializeSecureSession(int,java.lang.String,java.lang.String,java.lang.String)>
<com.samsung.android.knox.dar.ddar.proxy.IProxyAgent: void onAgentReconnected()>
<com.samsung.android.knox.dar.ddar.proxy.IProxyAgent: android.os.Bundle onMessage(int,java.lang.String,java.lang.String,android.os.Bundle)>
<android.media.IRingtonePlayer: void fadeinRingtone(android.os.IBinder)>
<android.media.IRingtonePlayer: void fadeoutRingtone(android.os.IBinder,int,float)>
<android.media.IRingtonePlayer: void playAsync(android.net.Uri,android.os.UserHandle,boolean,android.media.AudioAttributes)>
<android.media.IRingtonePlayer: android.os.IBinder setOnCompletionListener(android.app.INotificationPlayerOnCompletionListener)>
<android.security.authorization.IKeystoreAuthorization: void onLockScreenEvent(int,int,byte[],long[])>
<com.samsung.android.pass.IPassChecker: java.lang.String hasPermission(java.lang.String)>
<android.hardware.display.IDisplayManagerCallback: void onDisplayVolumeEvent(int,android.os.Bundle)>
<android.hardware.display.IDisplayManagerCallback: void onDeviceEvent(android.os.Bundle,int)>
<android.hardware.display.IDisplayManagerCallback: void onWifiDisplayParameterEvent(int,java.util.List)>
<android.hardware.display.IDisplayManagerCallback: void onDisplayVolumeKeyEvent(int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void selectCsgManual(int,vendor.samsung.hardware.radio.network.SehCsgInfo)>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void getCsgList(int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void setImsCallList(int,vendor.samsung.hardware.radio.network.SehImsCall[])>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void getAvailableNetworks(int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: java.lang.String getInterfaceHash()>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void sendRequestStrings(int,java.lang.String[])>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void setNrMode(int,int,boolean)>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void emergencyControl(int,int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void getRoamingNetworkInfoViaBLE(int,byte,java.lang.String)>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void sendEncodedUssd(int,vendor.samsung.hardware.radio.network.SehEncodedUssd)>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void getNrIconType(int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void getVendorSpecificConfiguration(int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void setDisable2g(int,int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void sendRequestRaw(int,byte[])>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void getDisable2g(int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void getPreferredNetworkList(int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void getNrMode(int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void getCnap(int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void setRoamingNetworkInfoViaBLE(int,vendor.samsung.hardware.radio.network.SehRoamingNetworkInfo[])>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void emergencySearch(int)>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void setPreferredNetworkList(int,vendor.samsung.hardware.radio.network.SehPreferredNetworkInfo)>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: int getInterfaceVersion()>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void setVendorSpecificConfiguration(int,vendor.samsung.hardware.radio.network.SehVendorConfiguration[])>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void setCurrentNetworkInfoViaBLE(int,vendor.samsung.hardware.radio.network.SehCurrentNetworkInfo[])>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void setResponseFunctions(vendor.samsung.hardware.radio.network.ISehRadioNetworkResponse,vendor.samsung.hardware.radio.network.ISehRadioNetworkIndication)>
<vendor.samsung.hardware.radio.network.ISehRadioNetwork: void setScanResultViaBLE(int,byte,byte)>
<android.blockchain.ITAController: android.blockchain.TACommandResponse processTACommand(android.blockchain.TACommandRequest)>
<android.blockchain.ITAController: boolean loadTA(android.os.ParcelFileDescriptor,long,long)>
<android.blockchain.ITAController: void unloadTA()>
<com.samsung.android.app.ISemDualAppManager: boolean isInstalledWhitelistedPackage(java.lang.String)>
<com.samsung.android.app.ISemDualAppManager: java.lang.String[] getAllWhitelistedPackages()>
<com.samsung.android.app.ISemDualAppManager: android.os.Bundle updateDualAppData(java.lang.String,int,android.os.Bundle)>
<com.samsung.android.app.ISemDualAppManager: java.util.List getAllInstalledWhitelistedPackages()>
<android.hardware.IDeviceInjectorCallback: void onInjectionPendingStopped(java.lang.String,java.lang.String)>
<android.hardware.IDeviceInjectorCallback: void onSessionCreated(android.hardware.IDeviceInjectorSession)>
<android.hardware.IDeviceInjectorCallback: void onError(int)>
<android.hardware.IDeviceInjectorCallback: void onInjectionStopped(java.lang.String,java.lang.String,java.lang.String)>
<android.hardware.IDeviceInjectorCallback: void onInjectionStarted(java.lang.String,java.lang.String,java.lang.String)>
<android.hardware.IDeviceInjectorCallback: void onInjectionPendingStarted(java.lang.String,java.lang.String)>
<com.samsung.cmfa.AuthTouch.IAuthTouchEnableListener: void notifyTouchEventEnabled(boolean,boolean)>
<com.samsung.android.game.IGameManagerCallback: void onGameFocusOut(java.lang.String)>
<com.samsung.android.game.IGameManagerCallback: void onGameFocusIn(java.lang.String)>
<com.android.internal.telephony.ISemTelephony: java.lang.String getActivationDay(java.lang.String,java.lang.String)>
<com.android.internal.telephony.ISemTelephony: boolean getSupportedNrca(int)>
<com.android.internal.telephony.ISemTelephony: int getNetworkStatusDisplayOption(java.lang.String,java.lang.String)>
<com.android.internal.telephony.ISemTelephony: boolean isSimFDNEnabledForSubscriber(int)>
<com.android.internal.telephony.ISemTelephony: java.lang.String getCdmaMinForOtasp(int)>
<com.android.internal.telephony.ISemTelephony: int getNrMode(int)>
<com.android.internal.telephony.ISemTelephony: boolean setNrMode(int,int,boolean,java.lang.String)>
<com.android.internal.telephony.ISemTelephony: void setGbaBootstrappingParams(int,byte[],java.lang.String,java.lang.String)>
<com.android.internal.telephony.ISemTelephony: boolean getIccUsimPersoEnabled()>
<com.android.internal.telephony.ISemTelephony: boolean getSdnAvailable()>
<com.android.internal.telephony.ISemTelephony: void dialForSubscriber(int,java.lang.String)>
<com.android.internal.telephony.ISemTelephony: int getDisable2g()>
<com.android.internal.telephony.ISemTelephony: int sendRequestToRIL(byte[],byte[],int,int)>
<com.android.internal.telephony.ISemTelephony: boolean isSupportLteCapaOptionC(int)>
<com.android.internal.telephony.ISemTelephony: boolean getIccUsimPersoEnabledForSubId(int)>
<com.android.internal.telephony.ISemTelephony: byte[] sms_NSRI_decryptsms(int,byte[])>
<com.android.internal.telephony.ISemTelephony: boolean isMmiForSubscriber(int,java.lang.String)>
<com.android.internal.telephony.ISemTelephony: boolean isEmergencyNumberBySubId(int,java.lang.String,boolean)>
<com.android.internal.telephony.ISemTelephony: android.telephony.VendorConfigurationState getVendorConfigState(int)>
<com.android.internal.telephony.ISemTelephony: boolean setTransmitPowerExt(long,boolean)>
<com.android.internal.telephony.ISemTelephony: java.lang.String getUaUap(java.lang.String)>
<com.android.internal.telephony.ISemTelephony: boolean isVideoCall()>
<com.android.internal.telephony.ISemTelephony: void reloadTestEmergencyNumber()>
<com.android.internal.telephony.ISemTelephony: android.telephony.CellIdentity getCellLocationBySubId(int,java.lang.String,java.lang.String)>
<com.android.internal.telephony.ISemTelephony: void setAllowDataDuringCall(int)>
<com.android.internal.telephony.ISemTelephony: boolean setIccSimPersoEnabledForSubId(int,boolean,java.lang.String)>
<com.android.internal.telephony.ISemTelephony: java.lang.String getEuimid()>
<com.android.internal.telephony.ISemTelephony: void sendVolteState(int,boolean)>
<com.android.internal.telephony.ISemTelephony: boolean setVoNRMode(int,int)>
<com.android.internal.telephony.ISemTelephony: boolean setSimOnOffForSlot(int,int)>
<com.android.internal.telephony.ISemTelephony: byte[] NSRI_requestProc(int,byte[])>
<com.android.internal.telephony.ISemTelephony: void setEPSLOCI(byte[])>
<com.android.internal.telephony.ISemTelephony: byte[] getCurrentUATI()>
<com.android.internal.telephony.ISemTelephony: boolean setTransmitPowerWithFlag(int,boolean)>
<com.android.internal.telephony.ISemTelephony: boolean setDisable2g(int)>
<com.android.internal.telephony.ISemTelephony: boolean getDataRoamingEnabled()>
<com.android.internal.telephony.ISemTelephony: int getVoNRMode(int)>
<com.android.internal.telephony.ISemTelephony: int invokeOemRilRequestRawForSubscriber(int,byte[],byte[])>
<com.android.internal.telephony.ISemTelephony: int checkNSRIUSIMstate_int()>
<com.android.internal.telephony.ISemTelephony: java.util.List getAllCellInfoBySubId(int,java.lang.String,java.lang.String)>
<com.android.internal.telephony.ISemTelephony: java.lang.String getMobileQualityInformation(int,java.lang.String,java.lang.String)>
<com.android.internal.telephony.ISemTelephony: void requestModemActivityInfo(android.os.ResultReceiver,java.lang.String)>
<com.android.internal.telephony.ISemTelephony: byte[] sms_NSRI_decryptsmsintxside(int,java.lang.String,byte[])>
<com.android.internal.telephony.ISemTelephony: boolean getFDNavailable(int)>
<com.android.internal.telephony.ISemTelephony: int getSimPinRetryForSubscriber(int)>
<com.android.internal.telephony.ISemTelephony: byte[] getAtr(int)>
<com.android.internal.telephony.ISemTelephony: int getSimPukRetryForSubscriber(int)>
<com.android.internal.telephony.ISemTelephony: java.lang.String checkCallControl(int,java.lang.String)>
<com.android.internal.telephony.ISemTelephony: boolean supplyPerso(java.lang.String)>
<com.android.internal.telephony.ISemTelephony: boolean changeIccSimPersoPassword(java.lang.String,java.lang.String)>
<com.android.internal.telephony.ISemTelephony: boolean changeIccSimPersoPasswordForSubId(int,java.lang.String,java.lang.String)>
<com.android.internal.telephony.ISemTelephony: android.telephony.ServiceState getServiceStateForPhoneId(int,java.lang.String,java.lang.String)>
<com.android.internal.telephony.ISemTelephony: byte[] sms_NSRI_encryptsms(int,java.lang.String,byte[])>
<com.android.internal.telephony.ISemTelephony: boolean setIccSimPersoEnabled(boolean,java.lang.String)>
<com.android.internal.telephony.ISemTelephony: boolean supplyPersoForSubId(int,java.lang.String)>
<com.android.internal.telephony.ISemTelephony: java.lang.String getSecondaryImei(java.lang.String,java.lang.String)>
<com.android.internal.telephony.ISemTelephony: java.lang.String getIpAddressFromLinkProp(java.lang.String)>
<com.sec.android.iaft.IIAFDService: boolean IAFDParse(java.lang.String,java.lang.String,int,int,int,java.lang.String,java.lang.String,java.lang.String)>
<com.sec.android.iaft.IIAFDService: void IAFDShow(int,int,java.lang.String)>
<android.content.pm.IPackageManager: int performDexOptForADCP(java.lang.String,boolean)>
<android.content.pm.IPackageManager: java.lang.String[] checkASKSTarget(int)>
<android.content.pm.IPackageManager: java.util.List getRequestedRuntimePermissionsForMDM(java.lang.String)>
<android.content.pm.IPackageManager: boolean removeEncPkgDir(int,java.lang.String)>
<android.content.pm.IPackageManager: void changeMonetizationBadgeState(java.lang.String,java.lang.String)>
<android.content.pm.IPackageManager: boolean getMetadataForIconTray(java.lang.String,java.lang.String,int,java.util.List)>
<android.content.pm.IPackageManager: void setTrustTimebyStatusChanged()>
<android.content.pm.IPackageManager: boolean shouldAppSupportBadgeIcon(java.lang.String)>
<android.content.pm.IPackageManager: boolean createEncAppData(java.lang.String,int)>
<android.content.pm.IPackageManager: int getProgressionOfPackageChanged()>
<android.content.pm.IPackageManager: void checkDeletableListForASKS()>
<android.content.pm.IPackageManager: void clearPackagePreferredActivitiesAsUserForMDM(java.lang.String,int)>
<android.content.pm.IPackageManager: boolean isUnknownSourcePackage(java.lang.String)>
<android.content.pm.IPackageManager: boolean isSystemCompressedPackage(java.lang.String,int)>
<android.content.pm.IPackageManager: java.lang.String getUNvalueForASKS()>
<android.content.pm.IPackageManager: boolean isPackageAutoDisabled(java.lang.String,int)>
<android.content.pm.IPackageManager: void setApplicationEnabledSettingWithList(java.util.List,int,int,boolean,boolean,int,java.lang.String)>
<android.content.pm.IPackageManager: boolean applyRuntimePermissionsForAllApplicationsForMDM(int,int)>
<android.content.pm.IPackageManager: java.util.List getPackageListForDualDarPolicy(java.lang.String)>
<android.content.pm.IPackageManager: void cancelEMPHandlerSendPendingBroadcast()>
<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice getUnknownSourcePackagesAsUser(long,int)>
<android.content.pm.IPackageManager: boolean semIsPermissionRevokedByUserFixed(java.lang.String,java.lang.String,int)>
<android.content.pm.IPackageManager: int setLicensePermissionsForMDM(java.lang.String)>
<android.content.pm.IPackageManager: int movePackageToSd(java.lang.String,java.lang.String,android.content.pm.IMemorySaverPackageMoveObserver)>
<android.content.pm.IPackageManager: boolean removeEncUserDir(int)>
<android.content.pm.IPackageManager: java.util.List getPackageGrantedPermissionsForMDM(java.lang.String)>
<android.content.pm.IPackageManager: java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo,java.lang.String,int)>
<android.content.pm.IPackageManager: java.util.List getGrantedPermissionsForMDM(java.lang.String)>
<android.content.pm.IPackageManager: boolean applyRuntimePermissionsForMDM(java.lang.String,java.util.List,int,int)>
<vendor.samsung.hardware.radio.sim.ISehRadioSimResponse: void getUsimPhonebookCapabilityResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,int[])>
<vendor.samsung.hardware.radio.sim.ISehRadioSimResponse: void supplyIccPersonalizationResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo)>
<vendor.samsung.hardware.radio.sim.ISehRadioSimResponse: void getSimLockInfoResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,vendor.samsung.hardware.radio.sim.SehSimLockInfo)>
<vendor.samsung.hardware.radio.sim.ISehRadioSimResponse: void changeIccPersonalizationResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo)>
<vendor.samsung.hardware.radio.sim.ISehRadioSimResponse: void getPhonebookStorageInfoResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,vendor.samsung.hardware.radio.sim.SehPhonebookInfo)>
<vendor.samsung.hardware.radio.sim.ISehRadioSimResponse: void getAtrResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,java.lang.String)>
<vendor.samsung.hardware.radio.sim.ISehRadioSimResponse: void accessPhonebookEntryResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,int)>
<vendor.samsung.hardware.radio.sim.ISehRadioSimResponse: java.lang.String getInterfaceHash()>
<vendor.samsung.hardware.radio.sim.ISehRadioSimResponse: void getPhonebookEntryResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,vendor.samsung.hardware.radio.sim.SehSimPhonebookResponse)>
<vendor.samsung.hardware.radio.sim.ISehRadioSimResponse: int getInterfaceVersion()>
<vendor.samsung.hardware.radio.sim.ISehRadioSimResponse: void setSimOnOffResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo)>
<vendor.samsung.hardware.radio.sim.ISehRadioSimResponse: void supplyNetworkDepersonalizationResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,int)>
<vendor.samsung.hardware.radio.sim.ISehRadioSimResponse: void setSimInitEventResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo)>
<vendor.samsung.hardware.radio.sim.ISehRadioSimResponse: void getIccCardStatusResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo,vendor.samsung.hardware.radio.sim.SehCardStatus)>
<com.samsung.android.location.ISLocationLMSHook: boolean isUidForeground(int)>
<com.samsung.android.location.ISLocationLMSHook: boolean isProviderEnabledForUser(java.lang.String,int)>
<com.samsung.android.location.ISLocationLMSHook: void updateRequestInfo(boolean,int,int,java.lang.String,java.lang.String,boolean,int)>
<com.samsung.android.location.ISLocationLMSHook: android.location.IGpsGeofenceHardware getHWGeofence()>
<android.location.ILocationListener: void onProviderEnabledChanged(java.lang.String,boolean)>
<android.location.ILocationListener: void onLocationChanged(java.util.List,android.os.IRemoteCallback)>
<android.location.ILocationListener: void onFlushComplete(int)>
<com.samsung.android.displayquality.ISemDisplayQualityManager: void enhanceDisplayOutdoorVisibilityByLux(int)>
<com.samsung.android.displayquality.ISemDisplayQualityManager: void setAdaptiveSync(boolean)>
<vendor.samsung.hardware.radio.data.ISehRadioDataResponse: void setDataAllowedResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo)>
<vendor.samsung.hardware.radio.data.ISehRadioDataResponse: void setMobileDataSettingResponse(vendor.samsung.hardware.radio.SehRadioResponseInfo)>
<vendor.samsung.hardware.radio.data.ISehRadioDataResponse: java.lang.String getInterfaceHash()>
<vendor.samsung.hardware.radio.data.ISehRadioDataResponse: int getInterfaceVersion()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void setSpeakerOn(boolean)>
<com.samsung.android.media.fmradio.internal.IFMPlayer: boolean isDeviceSpeakerEnabled()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void enableRDS()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: boolean isSeeking()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: long searchDown()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void setStringTunningParameter(java.lang.String,java.lang.String)>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void setBand(int)>
<com.samsung.android.media.fmradio.internal.IFMPlayer: long searchUp()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void cancelSeek()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: boolean isScanning()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: long[] getLastScanResult()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: boolean isBatteryLow()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: long getLongTunningParameter(java.lang.String,long)>
<com.samsung.android.media.fmradio.internal.IFMPlayer: long seekUp()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void setListener(com.samsung.android.media.fmradio.internal.IFMEventListener)>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void setVolume(long)>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void removeListener(com.samsung.android.media.fmradio.internal.IFMEventListener)>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void tune(long)>
<com.samsung.android.media.fmradio.internal.IFMPlayer: long getVolume()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void cancelAFSwitching()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: boolean isHeadsetPlugged()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: long seekDown()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: int getIntegerTunningParameter(java.lang.String,int)>
<com.samsung.android.media.fmradio.internal.IFMPlayer: boolean isRDSEnable()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void setMono()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: boolean getSoftMuteMode()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void setIntegerTunningParameter(java.lang.String,int)>
<com.samsung.android.media.fmradio.internal.IFMPlayer: boolean on()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: boolean off()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: boolean cancelScan()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void setStereo()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: long searchAll()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void setSoftmute(boolean)>
<com.samsung.android.media.fmradio.internal.IFMPlayer: boolean isOn()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void setFMIntenna(boolean)>
<com.samsung.android.media.fmradio.internal.IFMPlayer: boolean isAFEnable()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void scan()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: long getCurrentChannel()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void setLongTunningParameter(java.lang.String,long)>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void disableRDS()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: long getPlayedFreq()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: boolean isAirPlaneMode()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: long getMaxVolume()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: boolean on_in_testmode()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: int isBusy()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void mute(boolean)>
<com.samsung.android.media.fmradio.internal.IFMPlayer: boolean isTvOutPlugged()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void setChannelSpacing(int)>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void setRecordMode(boolean)>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void enableAF()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: void disableAF()>
<com.samsung.android.media.fmradio.internal.IFMPlayer: java.lang.String getStringTunningParameter(java.lang.String,java.lang.String)>
<com.android.internal.policy.IKeyguardService: void setCoverOccluded(boolean)>
<com.android.internal.policy.IKeyguardService: void onFinishedBootAnim()>
<com.android.internal.policy.IKeyguardService: void setPendingIntentAfterUnlock(android.app.PendingIntent,android.content.Intent)>
<com.android.internal.policy.IKeyguardService: void setDexOccluded(boolean)>
<com.android.internal.policy.IKeyguardService: void startFingerprintAuthentication()>
<com.android.internal.policy.IKeyguardService: void updateCoverLauncherAppWidget()>
<com.android.internal.policy.IKeyguardService: void startedEarlyWakingUp(int)>
<android.content.IRCPInterface: long moveUnlimitedFiles(int,int,android.net.Uri,com.samsung.android.knox.SemIRCPCallback)>
<android.content.IRCPInterface: android.os.Bundle getFileInfo(java.lang.String,int)>
<android.content.IRCPInterface: int moveFile(int,java.lang.String,int,java.lang.String)>
<android.content.IRCPInterface: boolean isFileExist(java.lang.String,int)>
<android.content.IRCPInterface: long moveUnlimitedFiles2(int,int,android.net.Uri,com.samsung.android.knox.SemIRCPCallback,java.lang.String)>
<android.content.IRCPInterface: void cancel(long)>
<android.content.IRCPInterface: java.lang.String getErrorMessage(int)>
<android.content.IRCPInterface: long moveFiles2(int,java.util.List,int,java.util.List,com.samsung.android.knox.SemIRCPCallback,java.lang.String)>
<android.content.IRCPInterface: long moveUnlimitedFilesForApp(int,android.net.Uri,int,int)>
<android.content.IRCPInterface: void cancelCopyChunks(long)>
<android.content.IRCPInterface: long copyFiles(int,java.util.List,int,java.util.List,com.samsung.android.knox.SemIRCPCallback)>
<android.content.IRCPInterface: java.util.List getFiles(java.lang.String,int)>
<android.content.IRCPInterface: long moveFilesForApp(int,java.util.List,java.util.List)>
<android.content.IRCPInterface: int copyFile(int,java.lang.String,int,java.lang.String)>
<android.content.IRCPInterface: long moveFilesForAppEx(int,java.util.List,java.util.List,int)>
<android.content.IRCPInterface: int copyChunks(int,java.lang.String,int,java.lang.String,long,int,long,boolean)>
<android.content.IRCPInterface: long copyFiles2(int,java.util.List,int,java.util.List,com.samsung.android.knox.SemIRCPCallback,java.lang.String)>
<android.content.IRCPInterface: long moveFiles(int,java.util.List,int,java.util.List,com.samsung.android.knox.SemIRCPCallback)>
<com.android.internal.widget.IUpdateVerifierInterface: void requestSaGuid(com.android.internal.widget.IUpdateVerifierCallback)>
<com.android.internal.widget.IUpdateVerifierInterface: void updateVerifier(byte[],byte[])>
<android.telephony.ims.aidl.IImsConfig: void notifyRcsAutoConfigurationErrorReceived(int,java.lang.String)>
<android.telephony.ims.aidl.IImsConfig: void notifyProvisionedStringValueChanged(int,java.lang.String)>
<android.telephony.ims.aidl.IImsConfig: void notifyRcsPreConfigurationReceived(byte[])>
<android.telephony.ims.aidl.IImsConfig: java.lang.String getRcsClientConfiguration(int)>
<android.telephony.ims.aidl.IImsConfig: void notifyProvisionedIntValueChanged(int,int)>
<com.samsung.android.sepunion.IOneHandService: void writeSetting(java.lang.String,java.lang.String,int)>
<com.samsung.android.sepunion.IOneHandService: void clickTile(java.lang.String)>
<com.samsung.android.sepunion.IOneHandService: void registerListener(java.lang.String,android.os.IBinder)>
<com.samsung.android.sepunion.IOneHandService: void unRegisterListener(java.lang.String,android.os.IBinder)>
<android.net.wifi.nl80211.IWifiScannerImpl: void disableRandomMac()>
<com.android.internal.appwidget.IAppWidgetService: void changeHostIds(java.lang.String,int[],int)>
<com.android.internal.appwidget.IAppWidgetService: android.content.IntentSender semCreateAppWidgetConfigIntentSender(java.lang.String,int,int)>
<com.android.internal.appwidget.IAppWidgetService: java.util.Map getAllWidgets(java.lang.String,int)>
<com.android.internal.appwidget.IAppWidgetService: java.util.List getAllProvidersForProfile(int,int,boolean)>
<com.samsung.android.content.smartclip.IBleSpenChargeLockStateChangedListener: void onChanged(boolean)>
<android.location.IGnssAntennaInfoListener: void onGnssAntennaInfoChanged(java.util.List)>
<android.hardware.biometrics.IBiometricAuthenticator: void prepareForAuthentication(boolean,android.os.IBinder,long,int,android.hardware.biometrics.IBiometricSensorReceiver,java.lang.String,long,int,boolean)>
<com.samsung.android.onehandop.IOneHandOpWatcher: void onInputFilterChanged()>
<com.samsung.android.onehandop.IOneHandOpWatcher: void onMagnificationSpecChanged()>
<android.window.ITaskFragmentOrganizerController: boolean isSupportActivityEmbedded(java.lang.String)>
<android.window.ITaskFragmentOrganizerController: void registerOrganizer(android.window.ITaskFragmentOrganizer)>
<android.window.ITaskFragmentOrganizerController: void applyTransaction(android.window.WindowContainerTransaction,int,boolean)>
<com.samsung.android.cover.ICoverStateListenerCallback: void onCoverAttachStateChanged(boolean)>
<com.samsung.android.cover.ICoverStateListenerCallback: void onCoverSwitchStateChanged(boolean)>
<com.samsung.android.cover.ICoverStateListenerCallback: java.lang.String getListenerInfo()>
<android.os.IVold: boolean isSensitive(java.lang.String)>
<android.os.IVold: void asecDestroy(java.lang.String,boolean)>
<android.os.IVold: void unlockUserKey(int,int,java.lang.String,java.lang.String)>
<android.os.IVold: void cpFileAtData(java.lang.String,java.lang.String,int,int,android.os.IVoldTaskListener)>
<android.os.IVold: int asecGetUsedSpace(java.lang.String)>
<android.os.IVold: void setUserKeyProtection(int,java.lang.String)>
<android.os.IVold: void asecFixperms(java.lang.String,int,java.lang.String)>
<android.os.IVold: boolean setSensitive(int,java.lang.String)>
<android.os.IVold: void asecUnmount(java.lang.String,boolean)>
<android.os.IVold: void asecResize(java.lang.String,int,java.lang.String)>
<android.os.IVold: java.lang.String asecPath(java.lang.String)>
<android.os.IVold: void setMpUidForFileSystem(int)>
<android.os.IVold: boolean setDualDARPolicyCmd(int,int)>
<android.os.IVold: void asecRename(java.lang.String,java.lang.String)>
<android.os.IVold: boolean mountSdpMediaStorageCmd(int)>
<android.os.IVold: void sdeMoveMountHidden(java.lang.String,int,int,android.os.IVoldMountCallback)>
<android.os.IVold: void destroyUserKey(int)>
<android.os.IVold: void sdeEnable(java.lang.String,int,int,boolean,android.os.IVoldTaskListener,android.os.IVoldMountCallback)>
<android.os.IVold: java.lang.String asecFsPath(java.lang.String)>
<android.os.IVold: void asecTrim(java.lang.String,int,java.lang.String)>
<android.os.IVold: void asecFinalize(java.lang.String)>
<android.os.IVold: void mvFileAtData(java.lang.String,java.lang.String,int,int,android.os.IVoldTaskListener)>
<android.os.IVold: void asecMount(java.lang.String,java.lang.String,int,boolean)>
<android.os.IVold: void lockUserKey(int)>
<android.os.IVold: boolean setSdpPolicyToPathCmd(int,java.lang.String)>
<android.os.IVold: boolean setSdpPolicyCmd(int)>
<android.os.IVold: void asecCreate(java.lang.String,int,java.lang.String,java.lang.String,int,boolean)>
<android.os.IVold: java.lang.String[] asecList()>
<android.os.IVold: void createUserKey(int,int,boolean)>
<android.os.IVold: void setDebugForExternal(java.lang.String)>
<android.os.IVold: long getUsedF2fsFileNode()>
<com.samsung.android.media.codec.IVideoTranscodingService: void stopTask(java.lang.String)>
<com.samsung.android.media.codec.IVideoTranscodingService: void startTask(java.lang.String)>
<com.samsung.android.media.codec.IVideoTranscodingService: java.lang.String register(int,com.samsung.android.media.codec.IVideoTranscodingServiceCallback)>
<android.location.IGnssNavigationMessageListener: void onStatusChanged(int)>
<android.location.IGnssNavigationMessageListener: void onGnssNavigationMessageReceived(android.location.GnssNavigationMessage)>
<com.samsung.android.wifi.ISemWifiApDataUsageCallback: void onDataUsageChanged(java.lang.String)>
<android.view.accessibility.IWindowMagnificationConnectionCallback: void onSourceBoundsChanged(int,android.graphics.Rect)>
<android.view.accessibility.IWindowMagnificationConnectionCallback: void onAccessibilityActionPerformed(int)>
<android.view.accessibility.IWindowMagnificationConnectionCallback: void onChangeMagnificationMode(int,int)>
<android.view.accessibility.IWindowMagnificationConnectionCallback: void onPerformScaleAction(int,float)>
<android.view.accessibility.IWindowMagnificationConnectionCallback: void onMove(int)>
<android.view.accessibility.IWindowMagnificationConnectionCallback: void onWindowMagnifierBoundsChanged(int,android.graphics.Rect)>
<com.samsung.cmfa.AuthTouch.IAuthFactorTouchService: void registerAuthTouchEnableListener(com.samsung.cmfa.AuthTouch.IAuthTouchEnableListener)>
<com.samsung.cmfa.AuthTouch.IAuthFactorTouchService: void unregisterAuthTouchEventListener(com.samsung.cmfa.AuthTouch.IAuthTouchEventListener)>
<com.samsung.cmfa.AuthTouch.IAuthFactorTouchService: void unregisterAuthTouchEnableListener(com.samsung.cmfa.AuthTouch.IAuthTouchEnableListener)>
<com.samsung.cmfa.AuthTouch.IAuthFactorTouchService: void setTouchEvent(boolean,boolean)>
<com.samsung.cmfa.AuthTouch.IAuthFactorTouchService: void onPointerEvent(android.view.MotionEvent)>
<com.samsung.cmfa.AuthTouch.IAuthFactorTouchService: void registerAuthTouchEventListener(com.samsung.cmfa.AuthTouch.IAuthTouchEventListener)>
<com.samsung.android.bio.fingerprint.ISemFingerprintRequestCallback: void onResult(int)>
<android.content.pm.ILauncherApps: void changePackageIcon(java.lang.String,int)>
<com.samsung.android.knox.ISemRemoteContentManager: android.content.IRCPInterface getRCPInterface()>
<com.samsung.android.knox.ISemRemoteContentManager: int copyFile(int,java.lang.String,int,java.lang.String)>
<com.samsung.android.knox.ISemRemoteContentManager: android.os.Bundle exchangeData(java.lang.String,int,android.os.Bundle)>
<com.samsung.android.knox.ISemRemoteContentManager: void cancelCopyChunks(long)>
<com.samsung.android.knox.ISemRemoteContentManager: android.os.Bundle getFileInfo(java.lang.String,int)>
<com.samsung.android.knox.ISemRemoteContentManager: boolean isFileExist(java.lang.String,int)>
<com.samsung.android.knox.ISemRemoteContentManager: void registerRCPInterface(android.content.IRCPInterface,int)>
<com.samsung.android.knox.ISemRemoteContentManager: long moveFilesForApp(int,java.util.List,java.util.List)>
<com.samsung.android.knox.ISemRemoteContentManager: long moveFilesForAppEx(int,java.util.List,java.util.List,int)>
<com.samsung.android.knox.ISemRemoteContentManager: java.util.List getFiles(java.lang.String,int)>
<com.samsung.android.knox.ISemRemoteContentManager: int moveFile(int,java.lang.String,int,java.lang.String)>
<com.samsung.android.knox.ISemRemoteContentManager: boolean deleteFile(java.lang.String,int)>
<com.samsung.android.knox.ISemRemoteContentManager: int copyChunks(int,java.lang.String,int,java.lang.String,long,int,long,boolean)>
<com.samsung.android.knox.ISemRemoteContentManager: long moveUnlimitedFiles(int,android.net.Uri,int,int)>
<com.samsung.android.knox.ISemRemoteContentManager: int copyFileInternal(int,java.lang.String,int,java.lang.String)>
<android.net.IVpnManager: void registerSystemDefaultNetworkCallback()>
<android.net.IVpnManager: void resetUidListInNetworkCapabilities(java.lang.String,int,java.lang.String)>
<android.net.IVpnManager: void updateUidRangesToUserVpnWithBlackList(java.lang.String,int,int,int[],java.lang.String)>
<android.net.IVpnManager: java.lang.String[] getDnsServerListForInterface(java.lang.String)>
<android.net.IVpnManager: int knoxVpnProfileType(java.lang.String)>
<android.net.IVpnManager: java.lang.String[] getProxyInfoForUid(int)>
<android.net.IVpnManager: boolean checkIfLocalProxyPortExists(int)>
<android.net.IVpnManager: void startLegacyKnoxVpn(int,com.android.internal.net.KnoxVpnProfile)>
<android.net.IVpnManager: void unregisterSystemDefaultNetworkCallback()>
<android.net.IVpnManager: boolean disconnectKnoxVpn(java.lang.String,int)>
<android.net.IVpnManager: java.lang.String getActiveDefaultInterface()>
<android.net.IVpnManager: void updateUidRangesToUserVpn(java.lang.String,int,boolean,int,java.lang.String)>
<android.net.IVpnManager: com.android.internal.net.LegacyVpnInfo getLegacyKnoxVpnInfo(int)>
<android.net.IVpnManager: void applyBlockingRulesToUidRange(java.lang.String,int,boolean,java.lang.String)>
<android.net.IVpnManager: void updateUidRangesToPerAppVpn(java.lang.String,int,boolean,int[],java.lang.String)>
<android.net.IVpnManager: void removeEnterpriseVpnInstance(java.lang.String,java.lang.String,int)>
<android.net.IVpnManager: void createEnterpriseVpnInstance(java.lang.String,java.lang.String,int,int)>
<android.net.IVpnManager: boolean getChainingEnabledForProfile(int)>
<android.net.IVpnManager: void updateEnterpriseVpn(java.lang.String,int,boolean)>
<android.net.IVpnManager: int getNetIdforActiveDefaultInterface()>
<android.net.IVpnManager: boolean prepareEnterpriseVpnExt(java.lang.String,boolean)>
<android.net.IVpnManager: void updateLocalProxyInfo(java.lang.String,int,java.lang.String,android.net.ProxyInfo)>
<android.net.IVpnManager: boolean checkIfUidIsExempted(int)>
<android.net.IVpnManager: void stopLegacyKnoxVpn(int,java.lang.String,java.lang.String)>
<android.net.IVpnManager: boolean isProxyConfiguredForKnoxVpn(int)>
<android.net.IVpnManager: android.net.Network getActiveDefaultNetwork()>
<com.samsung.android.remoteappmode.ITaskChangeListener: void onTaskDisplayChanged(int,int)>
<com.samsung.android.remoteappmode.ITaskChangeListener: void onTaskRemoved(int)>
<com.samsung.android.remoteappmode.ITaskChangeListener: void onRecentTaskListUpdated()>
<com.samsung.android.remoteappmode.ITaskChangeListener: void onTaskTriedToGoToBackground(int,int)>
<com.samsung.android.remoteappmode.ITaskChangeListener: void onTaskPlayed(int,int)>
<com.samsung.android.perfsdkservice.IPerfSDKService: int connectionRequest()>
<com.samsung.android.perfsdkservice.IPerfSDKService: java.lang.String getAllowedPkgName()>
<com.samsung.android.perfsdkservice.IPerfSDKService: int[] getThermalTable()>
<com.samsung.android.perfsdkservice.IPerfSDKService: int[] getHighBoostingLevel()>
<com.samsung.android.perfsdkservice.IPerfSDKService: int setSessionKey(java.lang.String)>
<com.samsung.android.perfsdkservice.IPerfSDKService: int[] getLowBoostingLevel()>
<com.samsung.android.perfsdkservice.IPerfSDKService: int initPerfSDK(java.lang.String)>
<com.samsung.android.perfsdkservice.IPerfSDKService: java.lang.String getForegroundPackagename()>
<com.samsung.android.perfsdkservice.IPerfSDKService: java.lang.String getChangedForegroundPackagename()>
<com.samsung.android.perfsdkservice.IPerfSDKService: int removeSessionKey(java.lang.String)>
<android.security.IKeyChainService: java.util.List userAliases()>
<android.security.IKeyChainService: boolean deleteEntry(java.lang.String,int)>
<android.security.IKeyChainService: java.lang.String[] listAliases(java.lang.String,int)>
<android.security.IKeyChainService: boolean setCertificateChain(java.lang.String,byte[])>
<android.security.IKeyChainService: byte[] getCertificateFromTrustCredential(java.lang.String,boolean)>
<android.security.IKeyChainService: java.lang.String getCertificateAlias(byte[])>
<android.security.IKeyChainService: boolean containsAlias(java.lang.String)>
<android.security.IKeyChainService: boolean isCertificateEntry(java.lang.String,int)>
<android.security.IKeyChainService: boolean contains(java.lang.String,int)>
<android.security.IKeyChainService: java.util.List allSystemAliases()>
<android.security.IKeyChainService: byte[] findIssuer(byte[])>
<android.security.IKeyChainService: byte[] getCertificateSystem(java.lang.String,java.lang.String,int)>
<android.security.IKeyChainService: boolean updateKeyPair(java.lang.String,byte[],byte[],int)>
<android.security.IKeyChainService: boolean attestKey(java.lang.String,byte[])>
<com.samsung.android.gesture.IMotionRecognitionService: boolean getSSPstatus()>
<com.samsung.android.gesture.IMotionRecognitionService: boolean setTestSensor()>
<com.samsung.android.gesture.IMotionRecognitionService: boolean getPickUpMotionStatus()>
<com.samsung.android.gesture.IMotionRecognitionService: void startAdaptiveBrightness()>
<com.samsung.android.gesture.IMotionRecognitionService: void registerCallback(android.os.IBinder,int,int)>
<com.samsung.android.gesture.IMotionRecognitionService: void useMotionAlways(android.os.IBinder,boolean)>
<com.samsung.android.gesture.IMotionRecognitionService: float[] getEvToLux(float[])>
<com.samsung.android.gesture.IMotionRecognitionService: void setMotionAngle(android.os.IBinder,int)>
<com.samsung.android.gesture.IMotionRecognitionService: void unregisterCallback(android.os.IBinder)>
<com.samsung.android.gesture.IMotionRecognitionService: int resetMotionEngine()>
<com.samsung.android.gesture.IMotionRecognitionService: void stopAdaptiveBrightness()>
<com.samsung.android.gesture.IMotionRecognitionService: boolean isAvailable(int)>
<com.samsung.android.gesture.IMotionRecognitionService: java.lang.String getEvLuxTableInfo(java.lang.String)>
<com.samsung.android.gesture.IMotionRecognitionService: void setMotionTiltLevel(int,int,int,int,int,int)>
<com.samsung.android.desktopmode.IDesktopModeUiServiceCallback: void onClickButtonPositive()>
<com.samsung.android.desktopmode.IDesktopModeUiServiceCallback: void onDismiss()>
<com.samsung.android.desktopmode.IDesktopModeUiServiceCallback: void onClickButtonNegative()>
<com.samsung.android.desktopmode.IDesktopModeUiServiceCallback: void onAnimationComplete()>
<com.samsung.android.desktopmode.IDesktopModeUiServiceCallback: void onShow()>
<android.os.IVoldListener: void onEncryptionStateChanged(java.lang.String,java.lang.String,java.lang.String)>
<android.os.IVoldListener: void sendVoldMessage(java.lang.String)>
<android.os.IVoldListener: void onVolumeStateChanged(java.lang.String,int)>
<com.samsung.android.gamesdk.IGameSDKStateListener: void onGameSDKInitialized()>
<com.samsung.android.gamesdk.IGameSDKStateListener: void onGameSDKFinalized()>
<com.samsung.android.location.ISLocationManager: void removePassiveLocation(android.app.PendingIntent,com.samsung.android.location.ISLocationListener)>
<com.samsung.android.location.ISLocationManager: void reportGpsGeofenceAddStatus(int,int)>
<com.samsung.android.location.ISLocationManager: void setSLocationLMSHook(com.samsung.android.location.ISLocationLMSHook)>
<com.samsung.android.location.ISLocationManager: void requestPassiveLocation(android.app.PendingIntent,com.samsung.android.location.ISLocationListener,java.lang.String,java.lang.String)>
<com.samsung.android.location.ISLocationManager: int removeSingleLocation(android.app.PendingIntent,com.samsung.android.location.ISLocationListener)>
<com.samsung.android.location.ISLocationManager: int requestLocation(boolean,com.samsung.android.location.ISLocationListener,java.lang.String,java.lang.String)>
<com.samsung.android.location.ISLocationManager: void onGnssStatusChanged(boolean)>
<com.samsung.android.location.ISLocationManager: void notifyAppForeground(int,boolean)>
<com.samsung.android.location.ISLocationManager: int removeLocation(com.samsung.android.location.ISLocationListener)>
<com.samsung.android.location.ISLocationManager: int removeGeofences(java.util.List,java.lang.String,java.lang.String)>
<com.samsung.android.location.ISLocationManager: int requestSingleLocation(int,int,boolean,android.app.PendingIntent,com.samsung.android.location.ISLocationListener,java.lang.String,java.lang.String)>
<com.samsung.android.location.ISLocationManager: void flushBatchedLocations()>
<com.samsung.android.location.ISLocationManager: int removeGeofencesPendingIntent(android.app.PendingIntent)>
<com.samsung.android.location.ISLocationManager: void reportGpsGeofenceTransition(int,android.location.Location,int,long)>
<com.samsung.android.location.ISLocationManager: int addGeofences(java.util.List,android.app.PendingIntent,java.lang.String,java.lang.String)>
<com.samsung.android.location.ISLocationManager: void reportGpsGeofencePauseStatus(int,int)>
<com.samsung.android.location.ISLocationManager: int requestMostAccurateLocation(int,int,int,android.app.PendingIntent,com.samsung.android.location.ISLocationListener,java.lang.String,java.lang.String)>
<com.samsung.android.location.ISLocationManager: void reportGpsGeofenceRemoveStatus(int,int)>
<com.samsung.android.location.ISLocationManager: void reportGpsGeofenceStatus(int,android.location.Location)>
<com.samsung.android.location.ISLocationManager: void onSvStatusChanged(int,int[],float[],float[],float[],float[],float[])>
<com.samsung.android.location.ISLocationManager: int removeBatchedLocations(android.app.PendingIntent,com.samsung.android.location.ISLocationBatchingListener)>
<com.samsung.android.location.ISLocationManager: int requestBatchedLocations(com.samsung.android.location.SemLocationBatchingRequest,android.app.PendingIntent,com.samsung.android.location.ISLocationBatchingListener,java.lang.String,java.lang.String)>
<com.samsung.android.location.ISLocationManager: boolean isAvailable(int)>
<com.samsung.android.location.ISLocationManager: void reportGpsGeofenceResumeStatus(int,int)>
<android.os.ICustomFrequencyManager: float[] supportVRTemperaturesInformation(java.lang.String,int,int)>
<android.os.ICustomFrequencyManager: boolean checkHintExist(int)>
<android.os.ICustomFrequencyManager: void setGamePowerSaving(boolean)>
<android.os.ICustomFrequencyManager: boolean checkSysfsIdExist(int)>
<android.os.ICustomFrequencyManager: java.lang.String readFile(java.lang.String,char)>
<android.os.ICustomFrequencyManager: int getGameThrottlingLevel()>
<android.os.ICustomFrequencyManager: void setGameTouchParam(java.lang.String,java.lang.String,java.lang.String)>
<android.os.ICustomFrequencyManager: void unsetGameTouchParam()>
<android.os.ICustomFrequencyManager: void sendDrawingTid(int,int,int)>
<android.os.ICustomFrequencyManager: void setFrozenTime(int)>
<android.os.ICustomFrequencyManager: void mpdUpdate(int)>
<android.os.ICustomFrequencyManager: void setGpisHint(boolean)>
<android.os.ICustomFrequencyManager: int requestFreezeSlowdown(int,boolean,java.lang.String)>
<android.os.ICustomFrequencyManager: void disableGpisHint()>
<android.os.ICustomFrequencyManager: int getSsrmStatus(int)>
<android.os.ICustomFrequencyManager: android.os.CpuTrackerInfo getProcessCpuUsage(int[])>
<android.os.ICustomFrequencyManager: void restrictApp(java.lang.String,int,int)>
<android.os.ICustomFrequencyManager: int getBatteryRemainingUsageTime(int)>
<android.os.ICustomFrequencyManager: boolean removeDvfsLockAllowedUid(int)>
<android.os.ICustomFrequencyManager: int addDvfsLockAllowedUid(int)>
<android.os.ICustomFrequencyManager: java.lang.String readSysfs(int)>
<android.os.ICustomFrequencyManager: void setGameFps(int)>
<android.os.ICustomFrequencyManager: void requestMpParameterUpdate(java.lang.String)>
<android.os.ICustomFrequencyManager: void sendCommandToSSRM(java.lang.String,java.lang.String)>
<android.os.ICustomFrequencyManager: void requestCPUUpdate(int,int)>
<android.os.ICustomFrequencyManager: void writeSysfs(int,java.lang.String)>
<android.os.ICustomFrequencyManager: boolean checkResourceExist(int)>
<android.os.ICustomFrequencyManager: void enableInteractionHint(boolean)>
<android.os.ICustomFrequencyManager: int[] getSupportedFrequency(int,int)>
<android.os.ICustomFrequencyManager: void setGameTurboMode(boolean)>
<android.os.ICustomFrequencyManager: void acquire(int,int,java.lang.String,int,int[])>
<android.os.ICustomFrequencyManager: void requestGpis(int,int,int)>
<android.os.ICustomFrequencyManager: void release(int,int)>
<com.samsung.android.knox.dar.sdp.ISdpListener: void onStateChange(int)>
<com.samsung.android.knox.dar.sdp.ISdpListener: void onEngineRemoved()>
<com.samsung.android.multiwindow.IKeyEventListener: void sendShortcutKeyWithFocusedTask(int,android.view.KeyEvent)>
<com.samsung.android.knox.tima.attestation.IEnhancedAttestationPolicyCallback: void onAttestationFinished(com.samsung.android.knox.tima.attestation.EnhancedAttestationResult)>