<com.oplus.bracket.IOplusBracketModeChangedListener: void onBracketModeChanged(int)>
<com.oplus.bracket.IOplusBracketModeChangedListener: void onBindService(com.oplus.bracket.IOplusBracketWindowObserver)>
<com.oplus.bracket.IOplusBracketModeChangedListener: void onUnBindService(int)>
<com.oplus.bracket.IOplusBracketModeChangedListener: void onBracketRegionChange(android.graphics.Rect)>
<android.hardware.fingerprint.IFingerprintService: void setUdfpsOverlay(android.hardware.fingerprint.IUdfpsOverlay)>
<android.hardware.fingerprint.IFingerprintService: void prepareForAuthentication(android.os.IBinder,long,android.hardware.biometrics.IBiometricSensorReceiver,android.hardware.fingerprint.FingerprintAuthenticateOptions,long,int,boolean)>
<android.hardware.fingerprint.IFingerprintService: void onUiReady(long,int)>
<android.net.ITetheringStatsProvider: void setInterfaceQuota(java.lang.String,long)>
<android.net.ITetheringStatsProvider: android.net.NetworkStats getTetherStats(int)>
<com.oplus.verifycode.IOplusVerifyCodeService: void setVerifyCode(java.lang.String)>
<android.bluetooth.IBluetoothGatt: void startAdvertisingSet(android.bluetooth.le.AdvertisingSetParameters,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseData,android.bluetooth.le.PeriodicAdvertisingParameters,android.bluetooth.le.AdvertiseData,int,int,int,android.bluetooth.le.IAdvertisingSetCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void clientSetPreferredPhy(int,java.lang.String,int,int,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void serverReadPhy(int,java.lang.String,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void endReliableWrite(int,java.lang.String,boolean,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void unregisterScanner(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void unregisterServer(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void readDescriptor(int,java.lang.String,int,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void disconnectAll(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void beginReliableWrite(int,java.lang.String,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void unregisterClient(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void stopAdvertisingSet(android.bluetooth.le.IAdvertisingSetCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void registerSync(android.bluetooth.le.ScanResult,int,int,android.bluetooth.le.IPeriodicAdvertisingCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void getOwnAddress(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void transferSync(android.bluetooth.BluetoothDevice,int,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void transferSetInfo(android.bluetooth.BluetoothDevice,int,int,android.bluetooth.le.IPeriodicAdvertisingCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void discoverServiceByUuid(int,java.lang.String,android.os.ParcelUuid,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void readUsingCharacteristicUuid(int,java.lang.String,android.os.ParcelUuid,int,int,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void stopScanForIntent(android.app.PendingIntent,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void leConnectionUpdate(int,java.lang.String,int,int,int,int,int,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void startScanForIntent(android.app.PendingIntent,android.bluetooth.le.ScanSettings,java.util.List,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void connectionParameterUpdate(int,java.lang.String,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void setAdvertisingParameters(int,android.bluetooth.le.AdvertisingSetParameters,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void registerClient(android.os.ParcelUuid,android.bluetooth.IBluetoothGattCallback,boolean,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void serverConnect(int,java.lang.String,boolean,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void writeCharacteristic(int,java.lang.String,int,int,int,byte[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void readRemoteRssi(int,java.lang.String,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void discoverServices(int,java.lang.String,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void registerForNotification(int,java.lang.String,int,boolean,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void subrateModeRequest(int,java.lang.String,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void getSupportedDistanceMeasurementMethods(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void clearServices(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void startDistanceMeasurement(android.os.ParcelUuid,android.bluetooth.le.DistanceMeasurementParams,android.bluetooth.le.IDistanceMeasurementCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void writeDescriptor(int,java.lang.String,int,int,byte[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void registerScanner(android.bluetooth.le.IScannerCallback,android.os.WorkSource,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void refreshDevice(int,java.lang.String,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void configureMTU(int,java.lang.String,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void sendResponse(int,java.lang.String,int,int,int,byte[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void unregisterSync(android.bluetooth.le.IPeriodicAdvertisingCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void setPeriodicAdvertisingEnable(int,boolean,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void stopDistanceMeasurement(android.os.ParcelUuid,android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void stopScan(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void serverDisconnect(int,java.lang.String,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void setScanResponseData(int,android.bluetooth.le.AdvertiseData,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void setPeriodicAdvertisingData(int,android.bluetooth.le.AdvertiseData,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void leSubrateRequest(int,java.lang.String,int,int,int,int,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void readCharacteristic(int,java.lang.String,int,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void clientConnect(int,java.lang.String,int,boolean,int,boolean,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void serverSetPreferredPhy(int,java.lang.String,int,int,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void numHwTrackFiltersAvailable(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void setPeriodicAdvertisingParameters(int,android.bluetooth.le.PeriodicAdvertisingParameters,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void registerServer(android.os.ParcelUuid,android.bluetooth.IBluetoothGattServerCallback,boolean,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void removeService(int,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void addService(int,android.bluetooth.BluetoothGattService,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void clientDisconnect(int,java.lang.String,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void enableAdvertisingSet(int,boolean,int,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void flushPendingBatchResults(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void unregAll(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void setAdvertisingData(int,android.bluetooth.le.AdvertiseData,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void getDevicesMatchingConnectionStates(int[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void clientReadPhy(int,java.lang.String,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void sendNotification(int,java.lang.String,int,boolean,byte[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothGatt: void startScan(int,android.bluetooth.le.ScanSettings,java.util.List,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.app.IActivityTaskManager: boolean startDreamActivity(android.content.Intent)>
<android.app.IActivityTaskManager: android.window.TaskSnapshot getTaskSnapshot(int,boolean,boolean)>
<android.app.IWindowToken: void onConfigurationChanged(android.content.res.Configuration,int)>
<android.app.IWindowToken: void onWindowTokenRemoved()>
<android.bluetooth.IBluetoothLeBroadcastAssistantCallback: void onSourceFound(android.bluetooth.BluetoothLeBroadcastMetadata)>
<android.bluetooth.IBluetoothLeBroadcastAssistantCallback: void onSourceRemoved(android.bluetooth.BluetoothDevice,int,int)>
<android.bluetooth.IBluetoothLeBroadcastAssistantCallback: void onReceiveStateChanged(android.bluetooth.BluetoothDevice,int,android.bluetooth.BluetoothLeBroadcastReceiveState)>
<android.bluetooth.IBluetoothLeBroadcastAssistantCallback: void onSearchStopped(int)>
<android.bluetooth.IBluetoothLeBroadcastAssistantCallback: void onSourceModifyFailed(android.bluetooth.BluetoothDevice,int,int)>
<android.bluetooth.IBluetoothLeBroadcastAssistantCallback: void onSourceRemoveFailed(android.bluetooth.BluetoothDevice,int,int)>
<android.bluetooth.IBluetoothLeBroadcastAssistantCallback: void onSourceAddFailed(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothLeBroadcastMetadata,int)>
<android.bluetooth.IBluetoothLeBroadcastAssistantCallback: void onSourceModified(android.bluetooth.BluetoothDevice,int,int)>
<android.bluetooth.IBluetoothLeBroadcastAssistantCallback: void onSearchStopFailed(int)>
<android.bluetooth.IBluetoothLeBroadcastAssistantCallback: void onSourceAdded(android.bluetooth.BluetoothDevice,int,int)>
<android.bluetooth.IBluetoothLeBroadcastAssistantCallback: void onSearchStartFailed(int)>
<android.bluetooth.IBluetoothLeBroadcastAssistantCallback: void onSearchStarted(int)>
<android.os.storage.IOplusStorageManagerService: int clearSDLockPassword()>
<android.os.storage.IOplusStorageManagerService: byte[] decryptDek(byte[],int,byte[],byte[],byte[],byte[])>
<android.os.storage.IOplusStorageManagerService: java.util.Map initAeKek()>
<android.os.storage.IOplusStorageManagerService: java.util.Map initBeKek()>
<android.os.storage.IOplusStorageManagerService: void addAuthResultInfo(int,int,int,java.lang.String)>
<android.os.storage.IOplusStorageManagerService: int configDfsFuse(java.lang.String,int,int)>
<android.os.storage.IOplusStorageManagerService: android.os.ParcelFileDescriptor mountDfsFuse(java.lang.String,java.lang.String)>
<android.os.storage.IOplusStorageManagerService: int setSDLockPassword(java.lang.String)>
<android.os.storage.IOplusStorageManagerService: java.util.Map encryptDek(byte[],int,byte[],byte[],byte[])>
<android.os.storage.IOplusStorageManagerService: void eraseSDLock()>
<android.os.storage.IOplusStorageManagerService: int unlockSDCard(java.lang.String)>
<android.os.storage.IOplusStorageManagerService: int getSDLockState()>
<android.os.storage.IOplusStorageManagerService: int getStorageData()>
<android.os.storage.IOplusStorageManagerService: void voldTBExt()>
<android.os.storage.IOplusStorageManagerService: java.lang.String getSDCardId()>
<android.os.storage.IOplusStorageManagerService: long getUnlockSdcardDeadline()>
<android.os.storage.IOplusStorageManagerService: int umountDfsFuse(java.lang.String)>
<android.bluetooth.IBluetoothVolumeControlCallback: void onVolumeOffsetChanged(android.bluetooth.BluetoothDevice,int)>
<com.oplus.darkmode.IOplusDarkModeListener: void onUiModeConfigurationChangeFinish()>
<com.oplus.exsystemservice.postman.IOplusStampService: int sendOnStampEvent(java.lang.String,java.util.Map,long)>
<com.oplus.exsystemservice.postman.IOplusStampService: void sendDeleteStampId(java.lang.String)>
<android.hardware.camera2.extension.IImageCaptureExtenderImpl: void onInit(java.lang.String,android.hardware.camera2.impl.CameraMetadataNative)>
<android.hardware.camera2.extension.IImageCaptureExtenderImpl: void onDeInit()>
<android.app.IActivityClientController: void updateActivitySpecificConfig(android.os.IBinder,android.content.res.Configuration)>
<android.view.selectiontoolbar.ISelectionToolbarCallback: void onToolbarShowTimeout()>
<android.view.selectiontoolbar.ISelectionToolbarCallback: void onError(int)>
<android.view.selectiontoolbar.ISelectionToolbarCallback: void onShown(android.view.selectiontoolbar.WidgetInfo)>
<android.view.selectiontoolbar.ISelectionToolbarCallback: void onWidgetUpdated(android.view.selectiontoolbar.WidgetInfo)>
<android.view.selectiontoolbar.ISelectionToolbarCallback: void onMenuItemClicked(android.view.selectiontoolbar.ToolbarMenuItem)>
<android.bluetooth.IBluetoothLeCallControlCallback: void onHoldCall(int,android.os.ParcelUuid)>
<android.bluetooth.IBluetoothLeCallControlCallback: void onAcceptCall(int,android.os.ParcelUuid)>
<android.bluetooth.IBluetoothLeCallControlCallback: void onBearerRegistered(int)>
<android.bluetooth.IBluetoothLeCallControlCallback: void onUnholdCall(int,android.os.ParcelUuid)>
<android.bluetooth.IBluetoothLeCallControlCallback: void onTerminateCall(int,android.os.ParcelUuid)>
<android.bluetooth.IBluetoothLeCallControlCallback: void onPlaceCall(int,android.os.ParcelUuid,java.lang.String)>
<android.bluetooth.IBluetoothLeCallControlCallback: void onJoinCalls(int,java.util.List)>
<android.hardware.fingerprint.IUdfpsOverlay: void show(long,int,int)>
<android.hardware.fingerprint.IUdfpsOverlay: void hide(int)>
<android.bluetooth.IBluetoothActivityEnergyInfoListener: void onBluetoothActivityEnergyInfoAvailable(android.bluetooth.BluetoothActivityEnergyInfo)>
<android.bluetooth.IBluetoothCsipSetCoordinatorLockCallback: void onGroupLockSet(int,int,boolean)>
<android.apex.IApexService: android.apex.ApexInfo installAndActivatePackage(java.lang.String)>
<android.media.IAudioService: int getBleCgVolume()>
<android.media.IAudioService: void setParameters(java.lang.String)>
<android.media.IAudioService: int rescaleCgVolumeIndexToHfpVolumeIndex(int)>
<android.media.IAudioService: boolean isBluetoothLeCgOn()>
<android.media.IAudioService: void handleBluetoothA2dpActiveDeviceChange(android.bluetooth.BluetoothDevice,int,int,boolean,int)>
<android.media.IAudioService: void setIPDeviceConnectionState(android.media.AudioDeviceAttributes,int,java.lang.String,android.os.IBinder,boolean)>
<android.media.IAudioService: void oplusRegisterModeDispatcher(android.media.IAudioModeDispatcher)>
<android.media.IAudioService: java.lang.String getParameters(java.lang.String)>
<android.media.IAudioService: void cacheParameters(java.lang.String)>
<android.media.IAudioService: void cacheBinauralRecordParameters(java.lang.String)>
<android.media.IAudioService: boolean setStreamVolumePermission()>
<android.media.IAudioService: int getLastHfpScoVolume()>
<com.oplus.app.ITerminateObserver: void onRequestTerminate(int,java.lang.String)>
<com.oplus.app.ITerminateObserver: void onTerminateStateChanged(int,int,boolean)>
<android.os.IPowerManager: void setFlashing(int,int,int,int,int)>
<android.os.IPowerManager: int getDefaultScreenBrightnessSetting()>
<android.os.IPowerManager: int getMaximumScreenBrightnessSetting()>
<android.os.IPowerManager: int getMinimumScreenBrightnessSetting()>
<android.view.IWindowSession: void setRefreshRate(android.view.SurfaceControl,float,int,int,java.lang.String,java.lang.String)>
<android.view.IWindowSession: void remove(android.view.IWindow)>
<android.view.IWindowSession: android.os.IBinder performDrag(android.view.IWindow,int,android.view.SurfaceControl,int,float,float,float,float,android.content.ClipData)>
<android.view.IWindowSession: void grantInputChannel(int,android.view.SurfaceControl,android.view.IWindow,android.os.IBinder,int,int,int,int,android.os.IBinder,android.os.IBinder,java.lang.String,android.view.InputChannel)>
<com.android.internal.telephony.ISmsSecurityService: boolean sendResponse(com.android.internal.telephony.SmsAuthorizationRequest,boolean)>
<com.android.internal.telephony.ISmsSecurityService: boolean unregister(com.android.internal.telephony.ISmsSecurityAgent)>
<com.android.internal.telephony.ISmsSecurityService: boolean register(com.android.internal.telephony.ISmsSecurityAgent)>
<android.view.IRecentsAnimationController: void finishPutt(int,int,android.graphics.Rect,int,android.os.Bundle)>
<android.view.IRecentsAnimationController: void finishZoom(boolean,boolean,int,int,android.graphics.Rect,int,android.os.Bundle)>
<android.view.IRecentsAnimationController: void enterZoomFromRecent(android.view.SurfaceControl,android.view.SurfaceControl,android.graphics.Rect,android.graphics.Rect,android.os.Bundle)>
<android.view.IRecentsAnimationController: void finish(boolean,boolean)>
<com.android.internal.policy.IKeyguardService: void requestKeyguard(java.lang.String)>
<android.bluetooth.IBluetoothA2dpSink: void getDevicesMatchingConnectionStates(int[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dpSink: void connect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dpSink: void disconnect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dpSink: void getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dpSink: void getConnectedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dpSink: void getConnectionPolicy(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dpSink: void setConnectionPolicy(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dpSink: void getAudioConfig(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dpSink: void isA2dpPlaying(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.service.wallpaper.IWallpaperService: void attach(android.service.wallpaper.IWallpaperConnection,android.os.IBinder,int,boolean,int,int,android.graphics.Rect,int,int)>
<android.view.accessibility.IAccessibilityManager: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)>
<android.view.accessibility.IAccessibilityManager: java.util.List getInstalledAccessibilityServiceList(int)>
<android.hardware.camera2.extension.ISessionProcessorImpl: void deInitSession()>
<android.hardware.camera2.extension.ISessionProcessorImpl: android.hardware.camera2.extension.CameraSessionConfig initSession(java.lang.String,java.util.Map,android.hardware.camera2.extension.OutputSurface,android.hardware.camera2.extension.OutputSurface,android.hardware.camera2.extension.OutputSurface)>
<android.hardware.camera2.extension.ISessionProcessorImpl: void onCaptureSessionStart(android.hardware.camera2.extension.IRequestProcessorImpl)>
<android.bluetooth.IBluetoothBattery: void getConnectionPolicy(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothBattery: void getDevicesMatchingConnectionStates(int[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothBattery: void disconnect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothBattery: void getConnectedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothBattery: void connect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothBattery: void getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothBattery: void setConnectionPolicy(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.security.keymaster.IKeyAttestationApplicationIdProvider: android.security.keymaster.KeyAttestationApplicationId getKeyAttestationApplicationId(int)>
<android.view.IWindowManager: boolean useBLAST()>
<android.view.IWindowManager: android.content.res.Configuration attachToDisplayContent(android.os.IBinder,int)>
<android.view.IWindowManager: android.content.res.Configuration attachWindowContextToDisplayArea(android.os.IBinder,int,int,android.os.Bundle)>
<android.view.IWindowManager: void attachWindowContextToWindowToken(android.os.IBinder,android.os.IBinder)>
<android.view.IWindowManager: void freezeRotation(int)>
<android.view.IWindowManager: void thawRotation()>
<android.view.IWindowManager: boolean destroyInputConsumer(java.lang.String,int)>
<android.view.IWindowManager: void thawDisplayRotation(int)>
<android.view.IWindowManager: void freezeDisplayRotation(int,int)>
<android.view.IWindowManager: void detachWindowContextFromWindowContainer(android.os.IBinder)>
<android.nfc.INfcAdapter: android.os.IBinder getNfcAdapterVendorInterface(java.lang.String)>
<android.bluetooth.IBluetoothOobDataCallback: void onError(int)>
<android.bluetooth.IBluetoothOobDataCallback: void onOobData(int,android.bluetooth.OobData)>
<android.app.IWallpaperManager: boolean isLockscreenLiveWallpaperEnabled()>
<android.app.IWallpaperManager: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>
<android.view.IRecentsAnimationRunner: void onAnimationStart(android.view.IRecentsAnimationController,android.view.RemoteAnimationTarget[],android.view.RemoteAnimationTarget[],android.graphics.Rect,android.graphics.Rect)>
<android.bluetooth.IBluetoothConnectionCallback: void onDeviceDisconnected(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.IBluetoothConnectionCallback: void onDeviceConnected(android.bluetooth.BluetoothDevice)>
<android.location.provider.IProviderRequestListener: void onProviderRequestChanged(java.lang.String,android.location.provider.ProviderRequest)>
<android.telephony.satellite.stub.ISatellite: void requestIsSatelliteCommunicationAllowedForCurrentLocation(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>
<android.telephony.satellite.stub.ISatellite: void requestIsSatelliteSupported(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>
<android.telephony.satellite.stub.ISatellite: void requestTimeForNextSatelliteVisibility(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void requestSatelliteEnabled(boolean,boolean,com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void requestSatelliteListeningEnabled(boolean,int,com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void startSendingSatellitePointingInfo(com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void stopSendingSatellitePointingInfo(com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void requestIsSatelliteProvisioned(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>
<android.telephony.satellite.stub.ISatellite: void sendSatelliteDatagram(android.telephony.satellite.stub.SatelliteDatagram,boolean,com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void requestSatelliteModemState(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void pollPendingSatelliteDatagrams(com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void requestSatelliteCapabilities(com.android.internal.telephony.IIntegerConsumer,android.telephony.satellite.stub.ISatelliteCapabilitiesConsumer)>
<android.telephony.satellite.stub.ISatellite: void requestIsSatelliteEnabled(com.android.internal.telephony.IIntegerConsumer,com.android.internal.telephony.IBooleanConsumer)>
<android.telephony.satellite.stub.ISatellite: void deprovisionSatelliteService(java.lang.String,com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void provisionSatelliteService(java.lang.String,byte[],com.android.internal.telephony.IIntegerConsumer)>
<android.telephony.satellite.stub.ISatellite: void enableCellularModemWhileSatelliteModeIsOn(boolean,com.android.internal.telephony.IIntegerConsumer)>
<android.security.authorization.IKeystoreAuthorization: android.hardware.security.keymint.HardwareAuthToken getGateKeeperAuthToken()>
<android.security.authorization.IKeystoreAuthorization: void rename_keystore_entry(int,int,java.lang.String)>
<android.security.authorization.IKeystoreAuthorization: void onLockScreenEvent(int,int,byte[],long[])>
<android.bluetooth.IBluetoothSocketManager: void requestMaximumTxDataLength(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothSocketManager: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)>
<android.bluetooth.IBluetoothSocketManager: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)>
<android.media.IRingtonePlayer: void playAsync(android.net.Uri,android.os.UserHandle,boolean,android.media.AudioAttributes)>
<com.android.internal.app.IBatteryStats: void notePhoneDataConnectionState(int,boolean,int,int)>
<android.bluetooth.IBluetoothGattServerCallback: void onPhyRead(java.lang.String,int,int,int)>
<android.bluetooth.IBluetoothGattServerCallback: void onNotificationSent(java.lang.String,int)>
<android.bluetooth.IBluetoothGattServerCallback: void onExecuteWrite(java.lang.String,int,boolean)>
<android.bluetooth.IBluetoothGattServerCallback: void onPhyUpdate(java.lang.String,int,int,int)>
<android.bluetooth.IBluetoothGattServerCallback: void onServerConnectionState(int,int,boolean,java.lang.String)>
<android.bluetooth.IBluetoothGattServerCallback: void onMtuChanged(java.lang.String,int)>
<android.bluetooth.IBluetoothGattServerCallback: void onCharacteristicWriteRequest(java.lang.String,int,int,int,boolean,boolean,int,byte[])>
<android.bluetooth.IBluetoothGattServerCallback: void onDescriptorWriteRequest(java.lang.String,int,int,int,boolean,boolean,int,byte[])>
<android.bluetooth.IBluetoothGattServerCallback: void onDescriptorReadRequest(java.lang.String,int,int,boolean,int)>
<android.bluetooth.IBluetoothGattServerCallback: void onSubrateChange(java.lang.String,int,int,int,int,int)>
<android.bluetooth.IBluetoothGattServerCallback: void onCharacteristicReadRequest(java.lang.String,int,int,boolean,int)>
<android.bluetooth.IBluetoothGattServerCallback: void onServiceAdded(int,android.bluetooth.BluetoothGattService)>
<android.bluetooth.IBluetoothGattServerCallback: void onServerRegistered(int,int)>
<android.bluetooth.IBluetoothGattServerCallback: void onConnectionUpdated(java.lang.String,int,int,int,int)>
<com.android.internal.widget.ILockSettings: java.lang.String getPassword()>
<com.android.internal.widget.ILockSettings: void sanitizePassword()>
<android.view.accessibility.IAccessibilityInteractionConnection: void attachAccessibilityOverlayToWindow(android.view.SurfaceControl)>
<com.android.internal.telephony.ITelephonyRegistry: void notifyDataActivity(int)>
<android.app.admin.IDevicePolicyManager: void setOverrideKeepProfilesRunning(boolean)>
<android.app.admin.IDevicePolicyManager: boolean isUsbDataSignalingEnabledForUser(int)>
<android.bluetooth.IBluetooth: void allowLowLatencyAudio(boolean,android.bluetooth.BluetoothDevice,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void factoryReset(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getState(com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void isLeAudioDevice(java.lang.String,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getSilenceMode(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: android.bluetooth.IBluetoothSocketManager getSocketManager()>
<android.bluetooth.IBluetooth: void updateQuietModeStatus(boolean,android.content.AttributionSource)>
<android.bluetooth.IBluetooth: void isDistanceMeasurementSupported(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void stopRfcommListener(android.os.ParcelUuid,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void unregisterMetadataListener(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getUuids(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getPhonebookAccessPermission(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void setSimAccessPermission(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void logL2capcocClientConnection(android.bluetooth.BluetoothDevice,int,boolean,int,long,long,long,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getMaxConnectedAudioDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getMostRecentlyConnectedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void disable(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void isLeAudioBroadcastAssistantSupported(com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void sdpSearch(android.bluetooth.BluetoothDevice,android.os.ParcelUuid,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getPreferredAudioProfiles(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void requestAudioPolicyAsSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothSinkAudioPolicy,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getOffloadedTransportDiscoveryDataScanSupported(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void isLeExtendedAdvertisingSupported(com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void isActivityAndEnergyReportingSupported(com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void findBrDevice(java.lang.String,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void unregisterPreferredAudioProfilesChangedCallback(android.bluetooth.IBluetoothPreferredAudioProfilesCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void setName(java.lang.String,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getAdapterConnectionState(com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void isLeAudioBroadcastSourceSupported(com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getRequestedAudioPolicyAsSink(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void registerCallback(android.bluetooth.IBluetoothCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void startDiscovery(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void setPhonebookAccessPermission(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getSupportedProfiles(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void onLeServiceUp(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void fetchRemoteUuids(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void registerBluetoothQualityReportReadyCallback(android.bluetooth.IBluetoothQualityReportReadyCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void isLe2MPhySupported(com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: boolean isLogRedactionEnabled()>
<android.bluetooth.IBluetooth: void getName(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void setActiveDevice(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getDiscoverableTimeout(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getRemoteType(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void enable(boolean,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getSimAccessPermission(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void isLeAudioSupported(com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getMessageAccessPermission(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void setPasskey(android.bluetooth.BluetoothDevice,boolean,int,byte[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getIdentityAddress(java.lang.String,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getIoCapability(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void setSilenceMode(android.bluetooth.BluetoothDevice,boolean,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getRemoteName(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getAddress(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getLeAudioStatus(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void isConnectableDevice(java.lang.String,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void isLePeriodicAdvertisingSupported(com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getScanMode(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void isMultiAdvertisementSupported(com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void setMessageAccessPermission(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void setScanMode(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void setPreferredAudioProfiles(android.bluetooth.BluetoothDevice,android.os.Bundle,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getBondedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void canBondWithoutDialog(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void isLeCodedPhySupported(com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void removeActiveDevice(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void setForegroundUserId(int,android.content.AttributionSource)>
<android.bluetooth.IBluetooth: void cancelDiscovery(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void unregisterCallback(android.bluetooth.IBluetoothCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void isRequestAudioPolicyAsSinkSupported(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void findLeAudioDevices(java.lang.String,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void setMetadata(android.bluetooth.BluetoothDevice,int,byte[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void disconnectAllEnabledProfiles(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getPackageNameOfBondingApplication(android.bluetooth.BluetoothDevice,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void registerBluetoothConnectionCallback(android.bluetooth.IBluetoothConnectionCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getRemoteClass(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void isBondingInitiatedLocally(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getProfileConnectionState(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void connectAllEnabledProfiles(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void isOffloadedScanBatchingSupported(com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void unregisterBluetoothQualityReportReadyCallback(android.bluetooth.IBluetoothQualityReportReadyCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getRemoteAlias(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getMetadata(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getNameLengthForAdvertise(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void isOffloadedFilteringSupported(com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getActiveDevices(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void onBrEdrDown(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getConnectionHandle(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void cancelBondProcess(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void setIoCapability(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void isDiscovering(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void generateLocalOobData(int,android.bluetooth.IBluetoothOobDataCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getBatteryLevel(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getLeMaximumAdvertisingDataLength(com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void removeBond(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void startRfcommListener(java.lang.String,android.os.ParcelUuid,android.app.PendingIntent,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void requestActivityInfo(android.bluetooth.IBluetoothActivityEnergyInfoListener,android.content.AttributionSource)>
<android.bluetooth.IBluetooth: void setLeAudioStatus(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void notifyActiveDeviceChangeApplied(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void unregisterBluetoothConnectionCallback(android.bluetooth.IBluetoothConnectionCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getBondState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void registerMetadataListener(android.bluetooth.IBluetoothMetadataListener,android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void reportActivityInfo(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void createBond(android.bluetooth.BluetoothDevice,int,android.bluetooth.OobData,android.bluetooth.OobData,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void registerPreferredAudioProfilesChangedCallback(android.bluetooth.IBluetoothPreferredAudioProfilesCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void retrievePendingSocketForServiceRecord(android.os.ParcelUuid,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getDiscoveryEndMillis(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void getRemoteUuids(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void setDiscoverableTimeout(long,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetooth: void logL2capcocServerConnection(android.bluetooth.BluetoothDevice,int,boolean,int,long,long,long,long,com.android.modules.utils.SynchronousResultReceiver)>
<android.location.provider.ILocationProviderManager: void onInitialize(boolean,android.location.provider.ProviderProperties,java.lang.String)>
<android.location.provider.ILocationProviderManager: void onFlushComplete()>
<android.location.provider.ILocationProviderManager: void onReportLocation(android.location.Location)>
<android.location.provider.ILocationProviderManager: void onReportLocations(java.util.List)>
<android.location.provider.ILocationProviderManager: void onSetProperties(android.location.provider.ProviderProperties)>
<android.location.provider.ILocationProviderManager: void onSetAllowed(boolean)>
<android.bluetooth.IBluetoothStateChangeCallback: void onBluetoothStateChange(boolean)>
<com.oplus.app.IActivityMultiWindowAllowanceObserver: void onMultiWindowAllowanceChanged(com.oplus.app.ActivityMultiWindowAllowance)>
<android.location.IOplusLocationManager: void setDebugOn()>
<android.location.IOplusLocationManager: void setDebugOff()>
<android.location.IOplusLocationManager: void setDebugDump()>
<android.location.IOplusLocationManager: boolean freezeLocationProcess(java.lang.String,boolean,int)>
<android.location.IOplusLocationManager: java.util.List getInUsePackagesList()>
<android.location.ILocationCallback: void onLocation(android.location.Location)>
<com.oplus.multisearch.IOplusMultiSearchManagerSession: void registerListener(com.oplus.multisearch.IOplusMultiSearchListener)>
<com.oplus.multisearch.IOplusMultiSearchManagerSession: void unregisterListener(com.oplus.multisearch.IOplusMultiSearchListener)>
<android.app.job.IJobService: void updateJobParameters(android.app.job.JobParameters)>
<android.location.INetInitiatedListener: boolean sendNiResponse(int,int)>
<com.oplus.splitscreen.IOplusSplitScreenSession: void startReplaceSplitWhenNormal(int,android.content.Intent,int,int)>
<com.oplus.splitscreen.IOplusSplitScreenSession: java.util.Map calculateThreeLayoutRects(int,android.content.Intent,int)>
<com.oplus.splitscreen.IOplusSplitScreenSession: void startZoomWindowFromSplit(int,android.graphics.Rect,float)>
<com.oplus.splitscreen.IOplusSplitScreenSession: java.util.Map calculateReplaceLayoutRects(int,android.content.Intent,int,boolean)>
<com.oplus.splitscreen.IOplusSplitScreenSession: void setSplitRequestedOrientation(int)>
<com.oplus.splitscreen.IOplusSplitScreenSession: void notifyFoldUpdatingComplete()>
<com.oplus.splitscreen.IOplusSplitScreenSession: void removeSelfSplitTaskIfNeed(int,int)>
<com.oplus.splitscreen.IOplusSplitScreenSession: void registerStackDivider(com.oplus.splitscreen.IOplusStackDividerConnection)>
<com.oplus.splitscreen.IOplusSplitScreenSession: void hideTargetSplashScreen(int)>
<com.oplus.splitscreen.IOplusSplitScreenSession: void setOverrideRemoteAnimations(android.view.RemoteAnimationDefinition)>
<com.oplus.splitscreen.IOplusSplitScreenSession: java.util.Map getCurrentEmbeddedRects(int)>
<com.oplus.splitscreen.IOplusSplitScreenSession: void unregisterActivityMultiWindowAllowanceObserver(android.os.IBinder,android.os.IBinder)>
<com.oplus.splitscreen.IOplusSplitScreenSession: android.view.SurfaceControl getWallpaperDisplayAreaSurface()>
<com.oplus.splitscreen.IOplusSplitScreenSession: boolean requestSwitchToSplitScreen(android.os.IBinder,com.oplus.app.SplitScreenParams)>
<com.oplus.splitscreen.IOplusSplitScreenSession: void startThreeSplitFromNormal(int,android.content.Intent,int)>
<com.oplus.splitscreen.IOplusSplitScreenSession: boolean requestSwitchToFullScreen(android.os.IBinder)>
<com.oplus.splitscreen.IOplusSplitScreenSession: void setSplitRootTaskAlwaysOnTop(boolean)>
<com.oplus.splitscreen.IOplusSplitScreenSession: void setWallpaperVisible(boolean)>
<com.oplus.splitscreen.IOplusSplitScreenSession: void setSplitControlBarRegion(android.graphics.Rect,boolean)>
<com.oplus.splitscreen.IOplusSplitScreenSession: void notifySplitRootTaskId(int,int,int)>
<com.oplus.splitscreen.IOplusSplitScreenSession: int getLastLayerForTask(int)>
<com.oplus.splitscreen.IOplusSplitScreenSession: java.util.List getRecentUsedApp(int,long,boolean,java.util.List)>
<com.oplus.splitscreen.IOplusSplitScreenSession: void maintainSplitToZoomTaskState(int,boolean)>
<com.oplus.splitscreen.IOplusSplitScreenSession: android.graphics.Rect getCurrentRectForTask(int,int)>
<com.oplus.splitscreen.IOplusSplitScreenSession: void setSplitTasksState(int,int,boolean)>
<com.oplus.splitscreen.IOplusSplitScreenSession: void registerActivityMultiWindowAllowanceObserver(android.os.IBinder,android.os.IBinder)>
<com.oplus.splitscreen.IOplusSplitScreenSession: boolean moveChildrenTaskToBack(int)>
<com.oplus.splitscreen.IOplusSplitScreenSession: boolean isTopActivityFinishDraw(int)>
<com.oplus.splitscreen.IOplusSplitScreenSession: void updateEnterNormalType(int)>
<com.oplus.splitscreen.IOplusSplitScreenSession: java.util.List getRecentUsedAppWithMultiApp(int,long,boolean,java.util.List)>
<android.bluetooth.IBluetoothManagerCallback: void onBluetoothServiceUp(android.bluetooth.IBluetooth)>
<android.bluetooth.IBluetoothManagerCallback: void onBrEdrDown()>
<android.bluetooth.IBluetoothManagerCallback: void onBluetoothServiceDown()>
<android.os.IDeviceIdleController: void resetPreIdleTimeoutMode()>
<android.os.IDeviceIdleController: int setPreIdleTimeoutMode(int)>
<android.bluetooth.IBluetoothLeBroadcastCallback: void onPlaybackStopped(int,int)>
<android.bluetooth.IBluetoothLeBroadcastCallback: void onBroadcastStopFailed(int)>
<android.bluetooth.IBluetoothLeBroadcastCallback: void onPlaybackStarted(int,int)>
<android.bluetooth.IBluetoothLeBroadcastCallback: void onBroadcastStarted(int,int)>
<android.bluetooth.IBluetoothLeBroadcastCallback: void onBroadcastStartFailed(int)>
<android.bluetooth.IBluetoothLeBroadcastCallback: void onBroadcastUpdateFailed(int,int)>
<android.bluetooth.IBluetoothLeBroadcastCallback: void onBroadcastUpdated(int,int)>
<android.bluetooth.IBluetoothLeBroadcastCallback: void onBroadcastStopped(int,int)>
<android.bluetooth.IBluetoothLeBroadcastCallback: void onBroadcastMetadataChanged(int,android.bluetooth.BluetoothLeBroadcastMetadata)>
<android.os.IUpdateEngine: boolean applyPostInstall()>
<android.os.IUpdateEngine: void switchSlot()>
<android.os.IUpdateEngine: int checkPayloadPremise()>
<android.hardware.biometrics.IBiometricAuthenticator: void prepareForAuthentication(boolean,android.os.IBinder,long,int,android.hardware.biometrics.IBiometricSensorReceiver,java.lang.String,long,int,boolean)>
<android.window.ITaskFragmentOrganizerController: void applyTransaction(android.window.WindowContainerTransaction,int,boolean)>
<android.window.ITaskFragmentOrganizerController: void registerOrganizer(android.window.ITaskFragmentOrganizer)>
<android.os.IVold: int stopserviceAppFuse()>
<android.os.IVold: java.io.FileDescriptor mountDfsFuse(java.lang.String,java.lang.String)>
<android.os.IVold: int clearCache(int)>
<android.os.IVold: void lockUserKey(int)>
<android.os.IVold: byte[] exportSensitiveKey(int,int,boolean)>
<android.os.IVold: void checkBeforeMount(java.lang.String)>
<android.os.IVold: java.lang.String sdlockGetCid()>
<android.os.IVold: void unlockUserKey(int,int,java.lang.String)>
<android.os.IVold: void setUserKeyProtection(int,java.lang.String)>
<android.os.IVold: void createUserKey(int,int,boolean)>
<android.os.IVold: byte[] exportSensitiveBePublicKey(int,int)>
<android.os.IVold: void sdlockUnlock(java.lang.String)>
<android.os.IVold: void sdlockSetPassword(java.lang.String)>
<android.os.IVold: void ufsHid()>
<android.os.IVold: void sdlockClearPassword(java.lang.String)>
<android.os.IVold: void sdlockErase()>
<android.os.IVold: void voldTBExt()>
<android.os.IVold: void unlockSensitiveKey(int,int,java.lang.String,java.lang.String,int)>
<android.os.IVold: int startserviceAppFuse()>
<android.os.IVold: void destroyUserKey(int)>
<android.os.IVold: java.lang.String sdlockPoll()>
<android.os.IVold: void configDfsFuse(java.lang.String,int,int)>
<android.os.IVold: int umountDfsFuse(java.lang.String)>
<android.os.IVold: void fsyncCtrl(java.lang.String)>
<android.os.IVold: void onSecureKeyguardStateChangedForSensitiveFile(boolean,int,int)>
<android.location.IGnssNavigationMessageListener: void onStatusChanged(int)>
<android.location.IGnssNavigationMessageListener: void onGnssNavigationMessageReceived(android.location.GnssNavigationMessage)>
<android.view.accessibility.IWindowMagnificationConnectionCallback: void onChangeMagnificationMode(int,int)>
<android.view.accessibility.IWindowMagnificationConnectionCallback: void onPerformScaleAction(int,float)>
<android.view.accessibility.IWindowMagnificationConnectionCallback: void onSourceBoundsChanged(int,android.graphics.Rect)>
<android.view.accessibility.IWindowMagnificationConnectionCallback: void onAccessibilityActionPerformed(int)>
<android.view.accessibility.IWindowMagnificationConnectionCallback: void onMove(int)>
<android.view.accessibility.IWindowMagnificationConnectionCallback: void onWindowMagnifierBoundsChanged(int,android.graphics.Rect)>
<android.os.IVoldListener: void onDiskStateChanged(java.lang.String)>
<android.os.IVoldListener: void onVolumeChecked(java.lang.String,int,java.lang.String,java.lang.String)>
<android.os.IVoldListener: void onVolumeStateChanged(java.lang.String,int)>
<android.bluetooth.IBluetoothCallback: void onBluetoothStateChange(int,int)>
<android.bluetooth.IBluetoothPbapClient: void connect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothPbapClient: void disconnect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothPbapClient: void getConnectionPolicy(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothPbapClient: void setConnectionPolicy(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothPbapClient: void getDevicesMatchingConnectionStates(int[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothPbapClient: void getConnectedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothPbapClient: void getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.content.IOplusClipboardManager: android.content.ClipData getUserPrimaryClip(java.lang.String,int)>
<android.content.IOplusClipboardManager: java.util.Map getUserPathInfo()>
<android.content.pm.IPackageManager: java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[],boolean,android.os.PersistableBundle,android.os.PersistableBundle,android.content.pm.SuspendDialogInfo,java.lang.String,int)>
<android.bluetooth.IBluetoothMcpServiceManager: void setDeviceAuthorized(android.bluetooth.BluetoothDevice,boolean,android.content.AttributionSource)>
<android.bluetooth.IBluetoothManager: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)>
<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetoothGatt getBluetoothGatt()>
<android.bluetooth.IBluetoothManager: android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)>
<android.bluetooth.IBluetoothManager: boolean bindBluetoothProfileService(int,java.lang.String,android.bluetooth.IBluetoothProfileServiceConnection)>
<android.bluetooth.IBluetoothManager: boolean disable(android.content.AttributionSource,boolean)>
<android.bluetooth.IBluetoothManager: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
<android.bluetooth.IBluetoothManager: boolean disableBle(android.content.AttributionSource,android.os.IBinder)>
<android.bluetooth.IBluetoothManager: boolean enable(android.content.AttributionSource)>
<android.bluetooth.IBluetoothManager: boolean enableNoAutoConnect(android.content.AttributionSource)>
<android.bluetooth.IBluetoothManager: int getState()>
<android.bluetooth.IBluetoothManager: java.lang.String getAddress(android.content.AttributionSource)>
<android.bluetooth.IBluetoothManager: boolean onFactoryReset(android.content.AttributionSource)>
<android.bluetooth.IBluetoothManager: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>
<android.bluetooth.IBluetoothManager: boolean enableBle(android.content.AttributionSource,android.os.IBinder)>
<android.bluetooth.IBluetoothManager: void unbindBluetoothProfileService(int,android.bluetooth.IBluetoothProfileServiceConnection)>
<android.bluetooth.IBluetoothManager: int getBtHciSnoopLogMode()>
<android.bluetooth.IBluetoothManager: boolean isBleAppPresent()>
<android.bluetooth.IBluetoothManager: int setBtHciSnoopLogMode(int)>
<android.bluetooth.IBluetoothManager: boolean isHearingAidProfileSupported()>
<android.bluetooth.IBluetoothManager: java.lang.String getName(android.content.AttributionSource)>
<android.bluetooth.IBluetoothManager: boolean isBleScanAlwaysAvailable()>
<com.oplus.thermalcontrol.IThermalStatusListener: void empty2()>
<com.oplus.thermalcontrol.IThermalStatusListener: void notifyThermalSource(int,int,java.lang.String)>
<com.oplus.thermalcontrol.IThermalStatusListener: void notifyThermalBroadCast(int,int)>
<com.oplus.thermalcontrol.IThermalStatusListener: void notifyTsensorTemp(int)>
<com.oplus.thermalcontrol.IThermalStatusListener: void empty1()>
<com.oplus.thermalcontrol.IThermalStatusListener: void notifyThermalStatus(int)>
<android.bluetooth.le.IDistanceMeasurementCallback: void onStartFail(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.le.IDistanceMeasurementCallback: void onStopped(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.le.IDistanceMeasurementCallback: void onStarted(android.bluetooth.BluetoothDevice)>
<android.bluetooth.le.IDistanceMeasurementCallback: void onResult(android.bluetooth.BluetoothDevice,android.bluetooth.le.DistanceMeasurementResult)>
<android.os.renderacc.IRenderAcceleratingService: int registerListener(android.os.renderacc.IRenderAcceleratingStateListener)>
<android.os.renderacc.IRenderAcceleratingService: void setDeviceCommand(java.lang.String)>
<android.os.renderacc.IRenderAcceleratingService: int isSupportGameFrc()>
<android.os.renderacc.IRenderAcceleratingService: int setDeviceBuffer(java.lang.String,android.os.SharedMemory)>
<android.os.renderacc.IRenderAcceleratingService: void updatePqEnhanceList(java.lang.String,java.util.List)>
<android.os.renderacc.IRenderAcceleratingService: void setPqEnhanceListMode(int)>
<android.os.renderacc.IRenderAcceleratingService: int turnOnGameFrc(int,int)>
<android.os.renderacc.IRenderAcceleratingService: int turnOffGameFrc()>
<android.os.renderacc.IRenderAcceleratingService: int turnOnSuperResolution()>
<android.os.renderacc.IRenderAcceleratingService: int getDeviceWorkMode()>
<android.os.renderacc.IRenderAcceleratingService: int isGameInPqEnhanceList(java.lang.String)>
<android.os.renderacc.IRenderAcceleratingService: int unregisterListener(android.os.renderacc.IRenderAcceleratingStateListener)>
<android.os.renderacc.IRenderAcceleratingService: int setGameFps(int)>
<android.os.renderacc.IRenderAcceleratingService: java.lang.String getDeviceCommand(java.lang.String)>
<android.os.renderacc.IRenderAcceleratingService: int getDeviceCapability()>
<android.os.renderacc.IRenderAcceleratingService: int getDeviceType()>
<android.os.renderacc.IRenderAcceleratingService: int turnOffSuperResolution()>
<android.os.renderacc.IRenderAcceleratingService: int isSupportSuperResolution()>
<android.os.renderacc.IRenderAcceleratingStateListener: void onStateReport(int)>
<android.app.IApplicationThread: void enableActivityThreadLog(boolean)>
<android.app.IApplicationThread: void setDynamicalLogEnable(boolean)>
<android.app.IApplicationThread: void dumpMemInfo(android.os.ParcelFileDescriptor,android.os.Debug$MemoryInfo,boolean,boolean,boolean,boolean,boolean,java.lang.String[])>
<android.app.IApplicationThread: void dumpMainLooperTrackedMsg()>
<android.app.IApplicationThread: void bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.lang.String,java.lang.String,android.content.pm.ProviderInfoList,android.content.ComponentName,android.app.ProfilerInfo,android.os.Bundle,android.app.IInstrumentationWatcher,android.app.IUiAutomationConnection,int,boolean,boolean,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle,java.lang.String,android.content.AutofillOptions,android.content.ContentCaptureOptions,long[],android.os.SharedMemory,long,long)>
<android.app.IApplicationThread: void oplusScheduleReceiver(android.content.Intent,android.content.pm.ActivityInfo,android.content.res.CompatibilityInfo,int,java.lang.String,android.os.Bundle,boolean,int,int,int)>
<android.app.IApplicationThread: void dumpMessage(boolean)>
<android.app.IApplicationThread: void enableProcessMainThreadLooperLog()>
<android.app.IApplicationThread: void getBroadcastState(int)>
<android.app.IApplicationThread: void setDynamicalLogConfig(java.util.List)>
<android.media.IAudioPolicyService: int getVolumeGroupFromAudioAttributes(android.media.AudioAttributesInternal,boolean)>
<android.media.IAudioPolicyService: void stopOutputSamplerate(int,int)>
<android.media.IAudioPolicyService: int setParameters(java.lang.String)>
<android.media.IAudioPolicyService: android.media.AudioMixerAttributesInternal getPreferredMixerAttributes(android.media.AudioAttributesInternal,int)>
<android.media.IAudioPolicyService: android.media.GetOutputForAttrResponse getOutputForAttr(android.media.AudioAttributesInternal,int,android.content.AttributionSourceState,android.media.audio.common.AudioConfig,int,int)>
<android.media.IAudioPolicyService: boolean canBeSpatialized(android.media.AudioAttributesInternal,android.media.audio.common.AudioConfig,android.media.audio.common.AudioDevice[])>
<android.media.IAudioPolicyService: void setPolicyManagerParameters(int,int,int,int)>
<android.media.IAudioPolicyService: int getProductStrategyFromAudioAttributes(android.media.AudioAttributesInternal,boolean)>
<android.media.IAudioPolicyService: android.media.GetInputForAttrResponse getInputForAttr(android.media.AudioAttributesInternal,int,int,int,android.content.AttributionSourceState,android.media.audio.common.AudioConfigBase,int,int)>
<android.media.IAudioPolicyService: boolean isDirectOutputSupported(android.media.audio.common.AudioConfigBase,android.media.AudioAttributesInternal)>
<android.media.IAudioPolicyService: java.lang.String getParameters(java.lang.String)>
<android.media.IAudioPolicyService: int getDirectPlaybackSupport(android.media.AudioAttributesInternal,android.media.audio.common.AudioConfig)>
<android.media.IAudioPolicyService: android.media.audio.common.AudioProfile[] getDirectProfilesForAttributes(android.media.AudioAttributesInternal)>
<android.media.IAudioPolicyService: void setPreferredMixerAttributes(android.media.AudioAttributesInternal,int,int,android.media.AudioMixerAttributesInternal)>
<android.media.IAudioPolicyService: void setVolumeIndexForAttributes(android.media.AudioAttributesInternal,android.media.audio.common.AudioDeviceDescription,int)>
<android.media.IAudioPolicyService: void startOutputDynamic(int,int,int,int)>
<android.media.IAudioPolicyService: int getMinVolumeIndexForAttributes(android.media.AudioAttributesInternal)>
<android.media.IAudioPolicyService: void startOutputSamplerate(int,int)>
<android.media.IAudioPolicyService: void stopOutputDynamic(int,int,int,int)>
<android.media.IAudioPolicyService: void clearPreferredMixerAttributes(android.media.AudioAttributesInternal,int,int)>
<android.media.IAudioPolicyService: int startAudioSource(android.media.AudioPortConfigFw,android.media.AudioAttributesInternal)>
<android.media.IAudioPolicyService: int getVolumeIndexForAttributes(android.media.AudioAttributesInternal,android.media.audio.common.AudioDeviceDescription)>
<android.media.IAudioPolicyService: int getMaxVolumeIndexForAttributes(android.media.AudioAttributesInternal)>
<android.media.IAudioPolicyService: android.media.audio.common.AudioDevice[] getDevicesForAttributes(android.media.AudioAttributesInternal,boolean)>
<android.view.IWindow: void dispatchBlackScreenKeyEvent(android.view.KeyEvent)>
<android.bluetooth.IBluetoothHidHost: void getProtocolMode(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidHost: void virtualUnplug(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidHost: void getConnectionPolicy(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidHost: void getDevicesMatchingConnectionStates(int[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidHost: void setConnectionPolicy(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidHost: void getReport(android.bluetooth.BluetoothDevice,byte,byte,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidHost: void disconnect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidHost: void getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidHost: void setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidHost: void setIdleTime(android.bluetooth.BluetoothDevice,byte,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidHost: void setProtocolMode(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidHost: void setSpatialAudioMode(java.lang.String,boolean,android.content.AttributionSource)>
<android.bluetooth.IBluetoothHidHost: void getConnectedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidHost: void connect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidHost: void getIdleTime(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidHost: void sendData(android.bluetooth.BluetoothDevice,java.lang.String,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<com.oplus.bt.IBtAppAcceptList: void updateAppList()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readOplusReserve3(int,int)>
<vendor.oplus.hardware.performance.IPerformance: int disableDamonReclaim()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readTmemoryIoLatency()>
<vendor.oplus.hardware.performance.IPerformance: void setSchedAssistImptTask(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: void setSchedAssistScene(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getionwait()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getF2fsMovedBlks()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readJankCpuInfo()>
<vendor.oplus.hardware.performance.IPerformance: int writeMemMonitor(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: int searchAcmNomediaDirName(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: void writeTidsSet(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getallocwait()>
<vendor.oplus.hardware.performance.IPerformance: int writeTmemoryHighWaterRatio(int)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getKmallocDebug()>
<vendor.oplus.hardware.performance.IPerformance: int perProcessMemReclaim(int,int,int)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readStorageFeature(java.lang.String,java.lang.String,java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readUxTaskTrack(int,int)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getClmThreshold(int)>
<vendor.oplus.hardware.performance.IPerformance: int getUfsplusHpbStatus()>
<vendor.oplus.hardware.performance.IPerformance: int writeMemleakDetectThread(int)>
<vendor.oplus.hardware.performance.IPerformance: vendor.oplus.hardware.performance.ProcReqHal getHIScmCall()>
<vendor.oplus.hardware.performance.IPerformance: int getUfsplusTwStatus()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getDdrResidency()>
<vendor.oplus.hardware.performance.IPerformance: int writeTmemoryFlushBusy(int)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readCpuTaskstats()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getdstate()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readJankTaskTrack()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readMemleakDetectThread()>
<vendor.oplus.hardware.performance.IPerformance: int addTaskTrackPid(int,int,boolean)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readNormalizeRunningTime()>
<vendor.oplus.hardware.performance.IPerformance: int writeVaFeature(int)>
<vendor.oplus.hardware.performance.IPerformance: void setClmThreshold(java.lang.String,int)>
<vendor.oplus.hardware.performance.IPerformance: int addAcmDirName(java.lang.String,long)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readFgFreqsThreshold()>
<vendor.oplus.hardware.performance.IPerformance: void writeDBacktrace(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: int disableMultiThreadOptimize()>
<vendor.oplus.hardware.performance.IPerformance: int setDamonReclaimWmarks(int,int,int,int)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readTaskCpustatsEnable()>
<vendor.oplus.hardware.performance.IPerformance: void removeTaskTrackPid(int,int)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readNandswapProc(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getiowait()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getExt4FreefragInfo(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String hybridswap_memcg_para_read(int,java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readTmemoryErrorStat()>
<vendor.oplus.hardware.performance.IPerformance: void setFrameRate(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getClmMuxSwitch()>
<vendor.oplus.hardware.performance.IPerformance: int enableProcessReclaim()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readIOBacktrace()>
<vendor.oplus.hardware.performance.IPerformance: void writeTaskSchedInfo(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readJankCpuLoad32Scale()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getHICpuInfo()>
<vendor.oplus.hardware.performance.IPerformance: int getKernelVersion()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String hybridswap_zram_para_read(int)>
<vendor.oplus.hardware.performance.IPerformance: void writeIOBacktrace(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readClmHighLoadGrp()>
<vendor.oplus.hardware.performance.IPerformance: int existMemMonitor()>
<vendor.oplus.hardware.performance.IPerformance: int enableTaskCpustats()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getVmallocHashCal()>
<vendor.oplus.hardware.performance.IPerformance: int enableAudioPerf(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: void setSlideboost(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: int addAcmPkgName(java.lang.String,long)>
<vendor.oplus.hardware.performance.IPerformance: vendor.oplus.hardware.performance.ProcReqHal getHISchedLatency()>
<vendor.oplus.hardware.performance.IPerformance: long getAcmDirFlag(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: int getInterfaceVersion()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readTmemoryDirtypages()>
<vendor.oplus.hardware.performance.IPerformance: int setTpdID(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readKmallocDebugCreate()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readPidsSet()>
<vendor.oplus.hardware.performance.IPerformance: void writePidsSet(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readJankCpuIndicator()>
<vendor.oplus.hardware.performance.IPerformance: int writeOplusReserve3(int,int,java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: void writeClmEnable(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: vendor.oplus.hardware.performance.OsvelteVersionRet readOsvelteVersion()>
<vendor.oplus.hardware.performance.IPerformance: int writeKmallocDebugCreate(int)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readDConvert()>
<vendor.oplus.hardware.performance.IPerformance: int perProcessMemReadahead(int,int,int)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readClmLowLoadGrp()>
<vendor.oplus.hardware.performance.IPerformance: void writeJankTaskTrackEnable(boolean)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getDevinfoDDRInfo()>
<vendor.oplus.hardware.performance.IPerformance: int disableVmallocDebug()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getKmallocOrigin()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readRealTime()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readLimitTable()>
<vendor.oplus.hardware.performance.IPerformance: void setFgUids(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: int hybridswap_zram_para_write(int,java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getfsyncwait()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readVersion()>
<vendor.oplus.hardware.performance.IPerformance: void writeClmHighLoadGrp(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readSgeInfo()>
<vendor.oplus.hardware.performance.IPerformance: vendor.oplus.hardware.performance.ProcReqHal getHIIowaitHung()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readDBacktrace()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readRunningTime()>
<vendor.oplus.hardware.performance.IPerformance: int writeStorageFeature(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readClmHighLoadAll()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readNormalizeRealTime()>
<vendor.oplus.hardware.performance.IPerformance: int writeMonitorStatus(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: int enableVmallocDebug()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getMemMonitor()>
<vendor.oplus.hardware.performance.IPerformance: vendor.oplus.hardware.performance.ProcReqHal getHIIowait()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readVaFeature()>
<vendor.oplus.hardware.performance.IPerformance: void setImFlag(java.lang.String,java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: int hybridswap_memcg_para_write(int,java.lang.String,java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: int disableTaskCpustats()>
<vendor.oplus.hardware.performance.IPerformance: int writeUxState(java.lang.String,java.lang.String,java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: void clearTaskTrackGroup(int)>
<vendor.oplus.hardware.performance.IPerformance: int enableMultiThreadOptimize()>
<vendor.oplus.hardware.performance.IPerformance: int setTpdSerialParams(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: int delAcmDirName(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: int getAcmOpstat()>
<vendor.oplus.hardware.performance.IPerformance: void writeSchedInfoThreshold(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: int writeTmemoryFlushIdle(int)>
<vendor.oplus.hardware.performance.IPerformance: void setClmMuxSwitch(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: vendor.oplus.hardware.performance.ProcReqHal getHIIonWait()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readTaskSchedInfo()>
<vendor.oplus.hardware.performance.IPerformance: vendor.oplus.hardware.performance.ProcReqHal getHIAllocWait()>
<vendor.oplus.hardware.performance.IPerformance: int addAcmNomediaDirName(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: vendor.oplus.hardware.performance.ProcReqHal getHIEmcdrvIowait()>
<vendor.oplus.hardware.performance.IPerformance: int setFreqGoverner(java.lang.String,int[])>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readSchedInfoThreshold()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readTidsSet()>
<vendor.oplus.hardware.performance.IPerformance: int writeTmemoryMemory(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: int writeKmallocDebugCreateWithType(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: vendor.oplus.hardware.performance.ProcReqHal getHIUfsFeature()>
<vendor.oplus.hardware.performance.IPerformance: int getOswapVersion()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readJankCpuInfoSig()>
<vendor.oplus.hardware.performance.IPerformance: int setDamonReclaimMonitoring(int,int)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getDevinfoUfsInfo()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getDevinfoUfsVersionInfo()>
<vendor.oplus.hardware.performance.IPerformance: int setProcessReclaim(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: vendor.oplus.hardware.performance.ProcReqHal getHIDState()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readIomonitorInfo(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: vendor.oplus.hardware.performance.ProcMemStatRet readMemoryByUids(int[],int)>
<vendor.oplus.hardware.performance.IPerformance: int enableKmallocDebug()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getUfsSignalRecordUpload()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readTargetProcess(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: void writeFgFreqsThreshold(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readJankCpuLoad()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readClmEnable()>
<vendor.oplus.hardware.performance.IPerformance: vendor.oplus.hardware.performance.ProcMemStatRet readMemoryByPids(int[],int)>
<vendor.oplus.hardware.performance.IPerformance: int disableProcessReclaim()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getExt4FragScore(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: int setAcmOpstat(int)>
<vendor.oplus.hardware.performance.IPerformance: int disableTaskPlacementDecision()>
<vendor.oplus.hardware.performance.IPerformance: int disableKmallocDebug()>
<vendor.oplus.hardware.performance.IPerformance: int delAcmPkgName(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getschedlatency()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readJankVersion()>
<vendor.oplus.hardware.performance.IPerformance: long getAcmPkgFlag(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readSgeFreqInfo()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getHICpuLoading()>
<vendor.oplus.hardware.performance.IPerformance: void writeClmLowLoadGrp(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: int writeTmemoryCapacity(int)>
<vendor.oplus.hardware.performance.IPerformance: int enableDamonReclaim()>
<vendor.oplus.hardware.performance.IPerformance: int delAcmNomediaDirName(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getKmallocUsed()>
<vendor.oplus.hardware.performance.IPerformance: boolean isJankTaskTrackEnable()>
<vendor.oplus.hardware.performance.IPerformance: int setDamonReclaimColdTime(int)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getInterfaceHash()>
<vendor.oplus.hardware.performance.IPerformance: int writeNandswapProc(java.lang.String,java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readJankCpuLoad32()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readTmemorySysdirtypages()>
<vendor.oplus.hardware.performance.IPerformance: int enableTaskPlacementDecision()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readJankTaskTrackByPid(int)>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String readCallStack()>
<vendor.oplus.hardware.performance.IPerformance: int setDamonReclaimQuota(int,int,int)>
<vendor.oplus.hardware.performance.IPerformance: int writeTmemorySwitch(int)>
<vendor.oplus.hardware.performance.IPerformance: vendor.oplus.hardware.performance.ProcReqHal getHIFsyncWait()>
<vendor.oplus.hardware.performance.IPerformance: void writeClmHighLoadAll(java.lang.String)>
<vendor.oplus.hardware.performance.IPerformance: vendor.oplus.hardware.performance.ProcReqHal getHIKswapdLoading()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getVmallocDebug()>
<vendor.oplus.hardware.performance.IPerformance: java.lang.String getVmallocUsed()>
<android.bluetooth.IBluetoothLeAudio: void getGroupId(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void getMaximumNumberOfBroadcasts(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void setCodecConfigPreference(int,android.bluetooth.BluetoothLeAudioCodecConfig,android.bluetooth.BluetoothLeAudioCodecConfig,android.content.AttributionSource)>
<android.bluetooth.IBluetoothLeAudio: void inactiveUnicastProfile(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void connect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void setActiveDevice(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void isBroadcastEnable(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void getAllBroadcastMetadata(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void getMaximumStreamsPerBroadcast(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void updateBroadcast(int,android.bluetooth.BluetoothLeBroadcastSettings,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void isPreventUnicastProfile(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void pauseBroadcastAndActiveUnicast(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void getAudioLocationOfSrc(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void registerLeBroadcastCallback(android.bluetooth.IBluetoothLeBroadcastCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void setInactiveForHfpHandover(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void groupRemoveNode(int,android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void getMaximumSubgroupsPerBroadcast(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void stopBroadcast(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void setCcidInformation(android.os.ParcelUuid,int,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void getActiveDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void registerCallback(android.bluetooth.IBluetoothLeAudioCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void disconnect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void isInbandRingtoneEnabled(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver,int)>
<android.bluetooth.IBluetoothLeAudio: void unregisterCallback(android.bluetooth.IBluetoothLeAudioCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void setCallState(boolean,android.content.AttributionSource)>
<android.bluetooth.IBluetoothLeAudio: void getConnectionPolicy(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void setConnectionPolicy(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void setVolume(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void getCodecStatus(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void startBroadcast(android.bluetooth.BluetoothLeBroadcastSettings,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void isPlaying(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void getDevicesMatchingConnectionStates(int[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void getConnectedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void setInCall(boolean,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void groupAddNode(int,android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void isFallbackDeviceUsable(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void getAudioLocation(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void unregisterLeBroadcastCallback(android.bluetooth.IBluetoothLeBroadcastCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothLeAudio: void getConnectedGroupLeadDevice(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.le.IAdvertisingSetCallback: void onAdvertisingSetStarted(int,int,int)>
<android.bluetooth.le.IAdvertisingSetCallback: void onOwnAddressRead(int,int,java.lang.String)>
<android.bluetooth.le.IAdvertisingSetCallback: void onPeriodicAdvertisingEnabled(int,boolean,int)>
<android.bluetooth.le.IAdvertisingSetCallback: void onAdvertisingDataSet(int,int)>
<android.bluetooth.le.IAdvertisingSetCallback: void onScanResponseDataSet(int,int)>
<android.bluetooth.le.IAdvertisingSetCallback: void onAdvertisingEnabled(int,boolean,int)>
<android.bluetooth.le.IAdvertisingSetCallback: void onPeriodicAdvertisingParametersUpdated(int,int)>
<android.bluetooth.le.IAdvertisingSetCallback: void onAdvertisingParametersUpdated(int,int,int)>
<android.bluetooth.le.IAdvertisingSetCallback: void onPeriodicAdvertisingDataSet(int,int)>
<android.bluetooth.le.IAdvertisingSetCallback: void onAdvertisingSetStopped(int)>
<android.service.selectiontoolbar.ISelectionToolbarRenderServiceCallback: void transferTouch(android.os.IBinder,android.os.IBinder)>
<android.permission.IOnPermissionsChangeListener: void onPermissionsChanged(int)>
<android.bluetooth.le.IPeriodicAdvertisingCallback: void onSyncTransferred(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.le.IPeriodicAdvertisingCallback: void onSyncEstablished(int,android.bluetooth.BluetoothDevice,int,int,int,int)>
<android.bluetooth.le.IPeriodicAdvertisingCallback: void onBigInfoAdvertisingReport(int,boolean)>
<android.bluetooth.le.IPeriodicAdvertisingCallback: void onPeriodicAdvertisingReport(android.bluetooth.le.PeriodicAdvertisingReport)>
<android.bluetooth.le.IPeriodicAdvertisingCallback: void onSyncLost(int)>
<android.os.IDumpstate: void retrieveBugreport(int,java.lang.String,java.io.FileDescriptor,java.lang.String,android.os.IDumpstateListener)>
<com.android.ims.internal.IImsUt: int queryCFForServiceClass(int,java.lang.String,int)>
<android.bluetooth.IBluetoothA2dp: void getDynamicBufferSupport(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dp: void getCodecStatus(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dp: void getActiveDevice(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dp: void getDevicesMatchingConnectionStates(int[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dp: void getConnectionPolicy(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dp: void isOptionalCodecsSupported(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dp: void disableOptionalCodecs(android.bluetooth.BluetoothDevice,android.content.AttributionSource)>
<android.bluetooth.IBluetoothA2dp: void setOptionalCodecsEnabled(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource)>
<android.bluetooth.IBluetoothA2dp: void disconnect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dp: void enableOptionalCodecs(android.bluetooth.BluetoothDevice,android.content.AttributionSource)>
<android.bluetooth.IBluetoothA2dp: void getConnectedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dp: void isOptionalCodecsEnabled(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dp: void isFallbackDeviceUsable(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dp: void getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dp: void isA2dpPlaying(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dp: void setAvrcpAbsoluteVolume(int,android.content.AttributionSource)>
<android.bluetooth.IBluetoothA2dp: void setActiveDevice(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dp: void setCodecConfigPreference(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothCodecConfig,android.content.AttributionSource)>
<android.bluetooth.IBluetoothA2dp: void connect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dp: void isAvrcpAbsoluteVolumeSupported(com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dp: void getBufferConstraints(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dp: void setBufferLengthMillis(int,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothA2dp: void setConnectionPolicy(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothPbap: void disconnect(android.bluetooth.BluetoothDevice,android.content.AttributionSource)>
<android.bluetooth.IBluetoothPbap: java.util.List getConnectedDevices(android.content.AttributionSource)>
<android.bluetooth.IBluetoothPbap: boolean setConnectionPolicy(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource)>
<android.bluetooth.IBluetoothPbap: java.util.List getDevicesMatchingConnectionStates(int[],android.content.AttributionSource)>
<android.bluetooth.IBluetoothPbap: int getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource)>
<com.oplus.multisearch.IOplusMultiSearchListener: void onBackPressedOnTaskRoot(android.app.ActivityManager$RunningTaskInfo)>
<com.oplus.multisearch.IOplusMultiSearchListener: void onTaskInfoChanged(android.app.ActivityManager$RunningTaskInfo)>
<com.oplus.multisearch.IOplusMultiSearchListener: void onTaskAppeared(android.app.ActivityManager$RunningTaskInfo,android.view.SurfaceControl)>
<com.oplus.multisearch.IOplusMultiSearchListener: void onTaskVanished(android.app.ActivityManager$RunningTaskInfo)>
<com.oplus.vrr.IOPlusRefreshRate: void notifyLauncherEvent(int)>
<com.oplus.vrr.IOPlusRefreshRate: boolean isWhiteListGame(java.lang.String)>
<com.oplus.vrr.IOPlusRefreshRate: boolean setVsyncConfig(int,float,float,java.lang.String)>
<com.oplus.vrr.IOPlusRefreshRate: void updateAccelerationPkgName(java.lang.String,int,int)>
<com.oplus.vrr.IOPlusRefreshRate: int getModeType(int)>
<com.oplus.vrr.IOPlusRefreshRate: void unRegisterOplusPixelWorksCallback(com.oplus.vrr.IOPlusPixelWorksCallback)>
<com.oplus.vrr.IOPlusRefreshRate: float getPreferredFrameRate(java.lang.String,java.lang.String)>
<com.oplus.vrr.IOPlusRefreshRate: boolean hasFlickerRisk()>
<com.oplus.vrr.IOPlusRefreshRate: void updateDisplayModes(long)>
<com.oplus.vrr.IOPlusRefreshRate: boolean setFrameRate(float,java.lang.String,java.lang.String,int)>
<com.oplus.vrr.IOPlusRefreshRate: int findDisplayModeIdByPolicy(int,int,int)>
<com.oplus.vrr.IOPlusRefreshRate: int getRefreshRatePolicy(float)>
<com.oplus.vrr.IOPlusRefreshRate: void setTgpaGameData(android.os.Bundle)>
<com.oplus.vrr.IOPlusRefreshRate: boolean setFrameRateTargetControl(float,java.lang.String,boolean,java.lang.String)>
<com.oplus.vrr.IOPlusRefreshRate: void notifyBrightnessChange(int,float)>
<com.oplus.vrr.IOPlusRefreshRate: void screenStateChange(int,int)>
<com.oplus.vrr.IOPlusRefreshRate: void setFrameRateTargetControlAsynchronous(float,java.lang.String,boolean,java.lang.String)>
<com.oplus.vrr.IOPlusRefreshRate: boolean setOsyncTargetFps(int)>
<com.oplus.vrr.IOPlusRefreshRate: int getFRTCInfo(java.lang.String)>
<com.oplus.vrr.IOPlusRefreshRate: void setAppFrameRate(int,java.lang.String,boolean,java.lang.String)>
<com.oplus.vrr.IOPlusRefreshRate: int setSrState(java.lang.String,int)>
<com.oplus.vrr.IOPlusRefreshRate: boolean setDisplayFrameRateControl(float,java.lang.String,int,int)>
<com.oplus.vrr.IOPlusRefreshRate: void notifyDisableAdfrOtiPwStatus(int)>
<com.oplus.vrr.IOPlusRefreshRate: int getIrisCapability(java.lang.String)>
<com.oplus.vrr.IOPlusRefreshRate: int getSrState()>
<com.oplus.vrr.IOPlusRefreshRate: void notifyNitsChange(float)>
<com.oplus.vrr.IOPlusRefreshRate: void notifyPWMode(boolean)>
<com.oplus.vrr.IOPlusRefreshRate: void setExternalRefreshRateStatus(int)>
<com.oplus.vrr.IOPlusRefreshRate: void setLowFreqVideo(boolean)>
<com.oplus.vrr.IOPlusRefreshRate: int setIrisFunctionState(java.lang.String,int,int,int)>
<com.oplus.vrr.IOPlusRefreshRate: boolean isGameAccelerationScene()>
<com.oplus.vrr.IOPlusRefreshRate: void screenStateChangeWarning(int,int)>
<com.oplus.vrr.IOPlusRefreshRate: void registerOplusPixelWorksCallback(com.oplus.vrr.IOPlusPixelWorksCallback)>
<com.oplus.vrr.IOPlusRefreshRate: boolean setSystemFrameRateControl(float,java.lang.String)>
<com.oplus.vrr.IOPlusRefreshRate: java.util.List getList(int)>
<com.oplus.vrr.IOPlusRefreshRate: void setRefreshRatePolicy(int,float,int,boolean)>
<com.oplus.vrr.IOPlusRefreshRate: void setDynamicAppVsyncEnable(boolean)>
<android.location.IGnssStatusListener: void onFirstFix(int)>
<android.location.IGnssStatusListener: void onSvStatusChanged(android.location.GnssStatus)>
<android.location.IGnssStatusListener: void onGnssStarted()>
<android.location.IGnssStatusListener: void onGnssStopped()>
<com.android.internal.statusbar.IStatusBar: void requestAddTile(android.content.ComponentName,java.lang.CharSequence,java.lang.CharSequence,android.graphics.drawable.Icon,com.android.internal.statusbar.IAddTileResultCallback)>
<com.android.internal.statusbar.IStatusBar: void requestWindowMagnificationConnection(boolean)>
<android.companion.virtual.IVirtualDeviceManager: android.companion.virtual.IVirtualDevice createVirtualDevice(android.os.IBinder,java.lang.String,int,android.companion.virtual.VirtualDeviceParams,android.companion.virtual.IVirtualDeviceActivityListener,android.companion.virtual.IVirtualDeviceSoundEffectListener)>
<android.permission.IPermissionManager: void revokeRuntimePermission(java.lang.String,java.lang.String,int,java.lang.String)>
<android.permission.IPermissionManager: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String,int)>
<android.permission.IPermissionManager: void updatePermissionFlags(java.lang.String,java.lang.String,int,int,boolean,int)>
<android.permission.IPermissionManager: int getPermissionFlags(java.lang.String,java.lang.String,int)>
<android.permission.IPermissionManager: void startOneTimePermissionSession(java.lang.String,int,long,long)>
<android.permission.IPermissionManager: void grantRuntimePermission(java.lang.String,java.lang.String,int)>
<android.permission.IPermissionManager: boolean shouldShowRequestPermissionRationale(java.lang.String,java.lang.String,int)>
<android.location.IGnssMeasurementsListener: void onGnssMeasurementsReceived(android.location.GnssMeasurementsEvent)>
<android.location.IGnssMeasurementsListener: void onStatusChanged(int)>
<android.media.IMediaRouterService: android.media.RoutingSessionInfo getSystemSessionInfoForPackage(android.media.IMediaRouter2Manager,java.lang.String)>
<android.media.IMediaRouterService: boolean verifyPackageExists(java.lang.String)>
<android.content.IOplusOverlayManager: void setLanguageEnable(java.lang.String,int)>
<android.location.IGeocodeListener: void onResults(java.lang.String,java.util.List)>
<android.bluetooth.IBluetoothMap: void getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothMap: void getClient(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothMap: void getDevicesMatchingConnectionStates(int[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothMap: void disconnect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothMap: void getState(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothMap: void getConnectionPolicy(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothMap: void isConnected(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothMap: void setConnectionPolicy(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothMap: void getConnectedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<com.oplus.os.IOplusPreOdex: void dexoptNextPackage(java.lang.String)>
<com.oplus.os.IOplusPreOdex: void prepare(java.lang.String)>
<com.oplus.os.IOplusPreOdex: float getProgress(java.lang.String)>
<com.oplus.os.IOplusPreOdex: boolean isDone(java.lang.String)>
<com.oplus.os.IOplusPreOdex: void getOdrefreshStatus()>
<com.oplus.os.IOplusPreOdex: void interruptOtaDexopt()>
<com.oplus.os.IOplusPreOdex: void cleanup(java.lang.String)>
<com.oplus.os.IOplusPreOdex: java.lang.String nextDexoptCommand(java.lang.String)>
<com.oplus.os.IOplusPreOdex: java.lang.String dump(java.lang.String)>
<android.bluetooth.IBluetoothAvrcpTarget: void sendVolumeChanged(int)>
<com.oplus.app.IProcessTerminateObserver: void onProcessTerminate(java.lang.String)>
<android.accessibilityservice.IAccessibilityServiceConnection: void attachAccessibilityOverlayToDisplay(int,android.view.SurfaceControl)>
<android.accessibilityservice.IAccessibilityServiceConnection: void attachAccessibilityOverlayToWindow(int,android.view.SurfaceControl)>
<android.bluetooth.IBluetoothLeCallControl: void callAdded(int,android.bluetooth.BluetoothLeCall,android.content.AttributionSource)>
<android.bluetooth.IBluetoothLeCallControl: void registerBearer(java.lang.String,android.bluetooth.IBluetoothLeCallControlCallback,java.lang.String,java.util.List,int,java.lang.String,int,android.content.AttributionSource)>
<android.bluetooth.IBluetoothLeCallControl: void unregisterBearer(java.lang.String,android.content.AttributionSource)>
<android.bluetooth.IBluetoothLeCallControl: void currentCallsList(int,java.util.List,android.content.AttributionSource)>
<android.bluetooth.IBluetoothLeCallControl: void networkStateChanged(int,java.lang.String,int,android.content.AttributionSource)>
<android.bluetooth.IBluetoothLeCallControl: void callRemoved(int,android.os.ParcelUuid,int,android.content.AttributionSource)>
<android.bluetooth.IBluetoothLeCallControl: void callStateChanged(int,android.os.ParcelUuid,int,android.content.AttributionSource)>
<android.bluetooth.IBluetoothLeCallControl: void requestResult(int,int,int,android.content.AttributionSource)>
<android.bluetooth.IBluetoothLeBroadcastAssistant: int getMaximumSourceCapacity(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothLeBroadcastAssistant: void removeSource(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.IBluetoothLeBroadcastAssistant: void setBuiltinMode(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothLeBroadcastMetadata,boolean)>
<android.bluetooth.IBluetoothLeBroadcastAssistant: java.util.List getAllSources(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothLeBroadcastAssistant: java.util.List getDevicesMatchingConnectionStates(int[])>
<android.bluetooth.IBluetoothLeBroadcastAssistant: boolean isSearchInProgress()>
<android.bluetooth.IBluetoothLeBroadcastAssistant: void unregisterCallback(android.bluetooth.IBluetoothLeBroadcastAssistantCallback)>
<android.bluetooth.IBluetoothLeBroadcastAssistant: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothLeBroadcastAssistant: void addSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothLeBroadcastMetadata,boolean)>
<android.bluetooth.IBluetoothLeBroadcastAssistant: void startSearchingForSources(java.util.List)>
<android.bluetooth.IBluetoothLeBroadcastAssistant: void modifySource(android.bluetooth.BluetoothDevice,int,android.bluetooth.BluetoothLeBroadcastMetadata)>
<android.bluetooth.IBluetoothLeBroadcastAssistant: boolean setConnectionPolicy(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.IBluetoothLeBroadcastAssistant: java.util.List getConnectedDevices()>
<android.bluetooth.IBluetoothLeBroadcastAssistant: int getConnectionPolicy(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothLeBroadcastAssistant: void registerCallback(android.bluetooth.IBluetoothLeBroadcastAssistantCallback)>
<android.bluetooth.IBluetoothLeBroadcastAssistant: void stopSearchingForSources()>
<android.bluetooth.le.IScannerCallback: void onScanResult(android.bluetooth.le.ScanResult)>
<android.bluetooth.le.IScannerCallback: void onBatchScanResults(java.util.List)>
<android.bluetooth.le.IScannerCallback: void onScannerRegistered(int,int)>
<android.bluetooth.le.IScannerCallback: void onFoundOrLost(boolean,android.bluetooth.le.ScanResult)>
<android.bluetooth.le.IScannerCallback: void onScanManagerErrorCallback(int)>
<android.bluetooth.IBluetoothLeAudioCallback: void onGroupNodeRemoved(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.IBluetoothLeAudioCallback: void onCodecConfigChanged(int,android.bluetooth.BluetoothLeAudioCodecStatus)>
<android.bluetooth.IBluetoothLeAudioCallback: void onGroupNodeAdded(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.IBluetoothLeAudioCallback: void onGroupStatusChanged(int,int)>
<android.bluetooth.IBluetoothMetadataListener: void onMetadataChanged(android.bluetooth.BluetoothDevice,int,byte[])>
<android.app.IAlarmManager: void cancelPoweroffAlarm(java.lang.String)>
<android.bluetooth.IBluetoothGattCallback: void onConfigureMTU(java.lang.String,int,int)>
<android.bluetooth.IBluetoothGattCallback: void onExecuteWrite(java.lang.String,int)>
<android.bluetooth.IBluetoothGattCallback: void onClientConnectionState(int,int,boolean,java.lang.String)>
<android.bluetooth.IBluetoothGattCallback: void onConnectionUpdated(java.lang.String,int,int,int,int)>
<android.bluetooth.IBluetoothGattCallback: void onSubrateChange(java.lang.String,int,int,int,int,int)>
<android.bluetooth.IBluetoothGattCallback: void onNotify(java.lang.String,int,byte[])>
<android.bluetooth.IBluetoothGattCallback: void onPhyUpdate(java.lang.String,int,int,int)>
<android.bluetooth.IBluetoothGattCallback: void onClientRegistered(int,int)>
<android.bluetooth.IBluetoothGattCallback: void onCharacteristicRead(java.lang.String,int,int,byte[])>
<android.bluetooth.IBluetoothGattCallback: void onDescriptorWrite(java.lang.String,int,int,byte[])>
<android.bluetooth.IBluetoothGattCallback: void onCharacteristicWrite(java.lang.String,int,int,byte[])>
<android.bluetooth.IBluetoothGattCallback: void onReadRemoteRssi(java.lang.String,int,int)>
<android.bluetooth.IBluetoothGattCallback: void onDescriptorRead(java.lang.String,int,int,byte[])>
<android.bluetooth.IBluetoothGattCallback: void onSearchComplete(java.lang.String,java.util.List,int)>
<android.bluetooth.IBluetoothGattCallback: void onPhyRead(java.lang.String,int,int,int)>
<android.bluetooth.IBluetoothGattCallback: void onServiceChanged(java.lang.String)>
<android.view.inputmethod.IOplusInputMethodManager: boolean clearDefaultInputMethodByCustomize()>
<android.view.inputmethod.IOplusInputMethodManager: void unregisterCursorAnchorInfoListener(android.os.ResultReceiver)>
<android.view.inputmethod.IOplusInputMethodManager: void setAlwaysLogOff()>
<android.view.inputmethod.IOplusInputMethodManager: int getInputMethodWindowVisibleHeight(int)>
<android.view.inputmethod.IOplusInputMethodManager: void invalidateInputToSynergy(android.view.inputmethod.EditorInfo,com.android.internal.inputmethod.IRemoteInputConnection,int)>
<android.view.inputmethod.IOplusInputMethodManager: void updateTouchDeviceId(int)>
<android.view.inputmethod.IOplusInputMethodManager: java.lang.String getDefaultInputMethodByCustomize()>
<android.view.inputmethod.IOplusInputMethodManager: boolean setDefaultInputMethodByCustomize(java.lang.String)>
<android.view.inputmethod.IOplusInputMethodManager: void commitTextByOtherSide()>
<android.view.inputmethod.IOplusInputMethodManager: void registerInputMethodSynergyService(android.content.ComponentName,boolean)>
<android.view.inputmethod.IOplusInputMethodManager: void hideCurrentInputMethod()>
<android.view.inputmethod.IOplusInputMethodManager: void updateCursorAnchorInfoToSynergy(android.view.inputmethod.CursorAnchorInfo)>
<android.view.inputmethod.IOplusInputMethodManager: void registerCursorAnchorInfoListener(android.os.ResultReceiver)>
<android.view.inputmethod.IOplusInputMethodManager: void setAlwaysLogOn(long,java.lang.String)>
<android.view.inputmethod.IOplusInputMethodManager: void hideSoftInput()>
<android.bluetooth.IBluetoothQualityReportReadyCallback: void onBluetoothQualityReportReady(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothQualityReport,int)>
<android.location.provider.ILocationProvider: void setLocationProviderManager(android.location.provider.ILocationProviderManager)>
<android.location.provider.ILocationProvider: void sendExtraCommand(java.lang.String,android.os.Bundle)>
<android.location.provider.ILocationProvider: void flush()>
<android.location.provider.ILocationProvider: void setRequest(android.location.provider.ProviderRequest)>
<com.oplus.vrr.IOPlusPixelWorksCallback: void onPixelWorksStateChanged(int,int[])>
<android.bluetooth.IBluetoothCsipSetCoordinator: void lockGroup(int,android.bluetooth.IBluetoothCsipSetCoordinatorLockCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothCsipSetCoordinator: void getAllGroupIds(android.os.ParcelUuid,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothCsipSetCoordinator: void getConnectedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothCsipSetCoordinator: void connect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothCsipSetCoordinator: void getGroupUuidMapByDevice(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothCsipSetCoordinator: void getConnectionPolicy(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothCsipSetCoordinator: void unlockGroup(android.os.ParcelUuid,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothCsipSetCoordinator: void getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothCsipSetCoordinator: void setConnectionPolicy(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothCsipSetCoordinator: void getDesiredGroupSize(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothCsipSetCoordinator: void disconnect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothCsipSetCoordinator: void getDevicesMatchingConnectionStates(int[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.app.IUiAutomationConnection: android.graphics.Bitmap takeScreenshot(android.graphics.Rect)>
<android.app.IUiAutomationConnection: android.graphics.Bitmap takeSurfaceControlScreenshot(android.view.SurfaceControl)>
<android.view.accessibility.IWindowMagnificationConnection: void moveWindowMagnifier(int,float,float)>
<android.view.accessibility.IWindowMagnificationConnection: void setScale(int,float)>
<android.view.accessibility.IWindowMagnificationConnection: void disableWindowMagnification(int,android.view.accessibility.IRemoteMagnificationAnimationCallback)>
<android.view.accessibility.IWindowMagnificationConnection: void moveWindowMagnifierToPosition(int,float,float,android.view.accessibility.IRemoteMagnificationAnimationCallback)>
<android.view.accessibility.IWindowMagnificationConnection: void removeMagnificationSettingsPanel(int)>
<android.view.accessibility.IWindowMagnificationConnection: void enableWindowMagnification(int,float,float,float,float,float,android.view.accessibility.IRemoteMagnificationAnimationCallback)>
<android.view.accessibility.IWindowMagnificationConnection: void removeMagnificationButton(int)>
<android.view.accessibility.IWindowMagnificationConnection: void showMagnificationButton(int,int)>
<android.view.accessibility.IWindowMagnificationConnection: void setConnectionCallback(android.view.accessibility.IWindowMagnificationConnectionCallback)>
<android.location.IGnssAntennaInfoListener: void onGnssAntennaInfoChanged(java.util.List)>
<android.hardware.face.IFaceCommandCallback: void onFaceCmd(int,byte[])>
<android.bluetooth.IBluetoothHapClient: void switchToPreviousPresetForGroup(int,android.content.AttributionSource)>
<android.bluetooth.IBluetoothHapClient: void getDevicesMatchingConnectionStates(int[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHapClient: void getPresetInfo(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHapClient: void registerCallback(android.bluetooth.IBluetoothHapClientCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHapClient: void getConnectedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHapClient: void setPresetName(android.bluetooth.BluetoothDevice,int,java.lang.String,android.content.AttributionSource)>
<android.bluetooth.IBluetoothHapClient: void selectPreset(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource)>
<android.bluetooth.IBluetoothHapClient: void setConnectionPolicy(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHapClient: void getActivePresetIndex(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHapClient: void getActivePresetInfo(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHapClient: void switchToNextPreset(android.bluetooth.BluetoothDevice,android.content.AttributionSource)>
<android.bluetooth.IBluetoothHapClient: void getFeatures(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHapClient: void getHapGroup(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHapClient: void setPresetNameForGroup(int,int,java.lang.String,android.content.AttributionSource)>
<android.bluetooth.IBluetoothHapClient: void getAllPresetInfo(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHapClient: void switchToNextPresetForGroup(int,android.content.AttributionSource)>
<android.bluetooth.IBluetoothHapClient: void selectPresetForGroup(int,int,android.content.AttributionSource)>
<android.bluetooth.IBluetoothHapClient: void getConnectionPolicy(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHapClient: void getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHapClient: void switchToPreviousPreset(android.bluetooth.BluetoothDevice,android.content.AttributionSource)>
<android.bluetooth.IBluetoothHapClient: void unregisterCallback(android.bluetooth.IBluetoothHapClientCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.window.IOplusTaskOrganizer: void updateStartingWindowExtendedInfo(android.window.OplusStartingWindowExtendedInfo,android.os.IBinder)>
<android.app.IActivityManager: void removeApplicationStartInfoCompleteListener(int)>
<com.oplus.splitscreen.IOplusStackDividerConnection: void showSplitToast(int,android.os.Bundle)>
<com.oplus.splitscreen.IOplusStackDividerConnection: void enterSplitScreenNormal()>
<com.oplus.splitscreen.IOplusStackDividerConnection: void showEnterMinimizedToast()>
<com.oplus.splitscreen.IOplusStackDividerConnection: void dismissSplitScreenMode(int)>
<com.oplus.splitscreen.IOplusStackDividerConnection: void exitSplitScreen(int,int)>
<com.oplus.splitscreen.IOplusStackDividerConnection: void toggleSplitScreen(int)>
<com.oplus.splitscreen.IOplusStackDividerConnection: void startPairIntent(android.content.Intent,android.content.Intent,int,int,android.os.Bundle)>
<com.oplus.splitscreen.IOplusStackDividerConnection: void startIntent(android.app.PendingIntent,android.content.Intent,int,android.os.Bundle)>
<com.oplus.splitscreen.IOplusStackDividerConnection: void startTask(int,int,android.os.Bundle)>
<com.oplus.splitscreen.IOplusStackDividerConnection: void breakPairedTaskInRecent(int,int)>
<com.oplus.splitscreen.IOplusStackDividerConnection: void moveTaskToSplitStage(int,boolean)>
<com.oplus.splitscreen.IOplusStackDividerConnection: void matainSplitState(boolean)>
<com.oplus.splitscreen.IOplusStackDividerConnection: boolean needInterceptStartForSplitScreen(java.lang.String,java.lang.String,boolean)>
<com.oplus.splitscreen.IOplusStackDividerConnection: void setDividerShow(boolean)>
<com.oplus.splitscreen.IOplusStackDividerConnection: void showNotSupportSplitWarn(java.lang.CharSequence)>
<com.oplus.splitscreen.IOplusStackDividerConnection: void moveTaskAndIntentActivityToSplitScreen(android.app.ActivityManager$RunningTaskInfo,android.hardware.HardwareBuffer,int,boolean,int,android.app.PendingIntent,android.content.Intent,android.os.Bundle,int)>
<com.oplus.splitscreen.IOplusStackDividerConnection: void moveTasksToSplitStages(int,int,int,int)>
<com.oplus.splitscreen.IOplusStackDividerConnection: void moveToSplitScreen(int,android.app.PendingIntent,android.content.Intent,android.os.Bundle,int)>
<com.oplus.preloadsource.IOplusChannelService: void handleChannelEvent(java.util.List)>
<android.bluetooth.IBluetoothProfileServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.bluetooth.IBluetoothProfileServiceConnection: void onServiceDisconnected(android.content.ComponentName)>
<android.location.ICountryListener: void onCountryDetected(android.location.Country)>
<android.os.storage.IStorageManager: void destroyUserKey(int)>
<android.os.storage.IStorageManager: long mountTime()>
<android.os.storage.IStorageManager: void clearCache()>
<android.os.storage.IStorageManager: void createUserKey(int,int,boolean)>
<android.os.storage.IStorageManager: boolean isUserKeyUnlocked(int)>
<android.os.storage.IStorageManager: void lockUserKey(int)>
<android.os.storage.IStorageManager: void startserviceAppFuse()>
<android.os.storage.IStorageManager: void stopserviceAppFuse()>
<android.os.storage.IStorageManager: void runTBExt()>
<android.os.storage.IStorageManager: void setUserKeyProtection(int,byte[])>
<android.os.storage.IStorageManager: void unlockUserKey(int,int,byte[])>
<android.window.IWindowOrganizerController: int finishTransition(android.os.IBinder,android.window.WindowContainerTransaction,android.window.IWindowContainerTransactionCallback)>
<android.location.ILocationListener: void onProviderEnabledChanged(java.lang.String,boolean)>
<android.location.ILocationListener: void onFlushComplete(int)>
<android.location.ILocationListener: void onLocationChanged(java.util.List,android.os.IRemoteCallback)>
<android.os.ICustomizePmsCallback: void pmsCallback(java.lang.String,android.os.PersistableBundle)>
<android.bluetooth.IBluetoothVolumeControl: void disconnect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothVolumeControl: void registerCallback(android.bluetooth.IBluetoothVolumeControlCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothVolumeControl: void unmute(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothVolumeControl: void muteGroup(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothVolumeControl: void setConnectionPolicy(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothVolumeControl: void connect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothVolumeControl: void getConnectedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothVolumeControl: void setGroupVolume(int,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothVolumeControl: void getConnectionPolicy(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothVolumeControl: void isVolumeOffsetAvailable(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothVolumeControl: void unregisterCallback(android.bluetooth.IBluetoothVolumeControlCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothVolumeControl: void mute(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothVolumeControl: void getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothVolumeControl: void getDevicesMatchingConnectionStates(int[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothVolumeControl: void unmuteGroup(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothVolumeControl: void setVolumeOffset(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothVolumeControl: void getGroupVolume(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: java.lang.String get_shutdown_detect()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: java.lang.String read_theia_node(int)>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: java.lang.String get_mt_gpio()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: int get_operator_name()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: int get_rf_type()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: int[] readAgingData(int)>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: boolean set_phoenix(java.lang.String)>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: boolean set_shutdown_detect(java.lang.String)>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: java.lang.String get_opboot()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: boolean saveAgingData(int,int[],int)>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: boolean write_theia_node(int,java.lang.String)>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: java.lang.String get_pmic_info()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: java.lang.String get_poff_reason()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: boolean is_ufs_devices()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: java.lang.String get_opluspon_reason(int)>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: java.lang.String miscModuleBlocklist()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: java.lang.String get_pon_reason()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: java.lang.String miscReadLinkedModules()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: int get_eng_version()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: java.lang.String get_opluspoff_reason(int)>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: java.lang.String getInterfaceHash()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: java.lang.String get_hungtask()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: int get_sau()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: java.lang.String get_oplusocp_status(int)>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: int get_pcb_version()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: boolean set_opboot(java.lang.String)>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: int get_project()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: java.lang.String get_ocp()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: int get_ftmmode()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: java.lang.String get_force_reboot()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: java.lang.String get_serial_ID()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: int getInterfaceVersion()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: java.lang.String get_phoenix()>
<vendor.oplus.hardware.stability.oplus_project.IOplusProject: java.lang.String miscModule2Load()>
<com.oplus.bracket.IOplusBracketWindowObserver: void onSurfaceViewChange(com.oplus.bracket.IOplusBracketModeChangedListener,int,android.graphics.Rect)>
<com.oplus.bracket.IOplusBracketWindowObserver: void onSurfaceViewShow(com.oplus.bracket.IOplusBracketModeChangedListener,int)>
<android.os.IDeviceIdentifiersPolicyService: java.lang.String getPhoneSerialForPackage(java.lang.String,java.lang.String)>
<com.oplus.bt.IBluetoothLeCallControlCallback: void onPlaceCall(int,android.os.ParcelUuid,java.lang.String)>
<com.oplus.bt.IBluetoothLeCallControlCallback: void onJoinCalls(int,java.util.List)>
<com.oplus.bt.IBluetoothLeCallControlCallback: void onAcceptCall(int,android.os.ParcelUuid)>
<com.oplus.bt.IBluetoothLeCallControlCallback: void onBearerRegistered(int)>
<com.oplus.bt.IBluetoothLeCallControlCallback: void onUnholdCall(int,android.os.ParcelUuid)>
<com.oplus.bt.IBluetoothLeCallControlCallback: void onTerminateCall(int,android.os.ParcelUuid)>
<com.oplus.bt.IBluetoothLeCallControlCallback: void onHoldCall(int,android.os.ParcelUuid)>
<com.oplus.bt.IBluetoothLeCallControl: void currentCallsList(int,java.util.List,android.content.AttributionSource)>
<com.oplus.bt.IBluetoothLeCallControl: void isAudioOn(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<com.oplus.bt.IBluetoothLeCallControl: void stopIsoUsingVirtualVoiceCall(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<com.oplus.bt.IBluetoothLeCallControl: void stopVoiceRecognition(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<com.oplus.bt.IBluetoothLeCallControl: void phoneStateChanged(int,int,int,java.lang.String,int,java.lang.String,android.content.AttributionSource)>
<com.oplus.bt.IBluetoothLeCallControl: void callRemoved(int,android.os.ParcelUuid,int,android.content.AttributionSource)>
<com.oplus.bt.IBluetoothLeCallControl: void disconnectCgAudio(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<com.oplus.bt.IBluetoothLeCallControl: void getAudioState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<com.oplus.bt.IBluetoothLeCallControl: void networkStateChanged(int,java.lang.String,int,android.content.AttributionSource)>
<com.oplus.bt.IBluetoothLeCallControl: void startVoiceRecognition(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<com.oplus.bt.IBluetoothLeCallControl: void requestResult(int,int,int,android.content.AttributionSource)>
<com.oplus.bt.IBluetoothLeCallControl: void disconnectAudio(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<com.oplus.bt.IBluetoothLeCallControl: void callStateChanged(int,android.os.ParcelUuid,int,android.content.AttributionSource)>
<com.oplus.bt.IBluetoothLeCallControl: void connectAudio(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<com.oplus.bt.IBluetoothLeCallControl: void unregisterBearer(java.lang.String,android.content.AttributionSource)>
<com.oplus.bt.IBluetoothLeCallControl: void registerBearer(java.lang.String,com.oplus.bt.IBluetoothLeCallControlCallback,java.lang.String,java.util.List,int,java.lang.String,int,android.content.AttributionSource)>
<com.oplus.bt.IBluetoothLeCallControl: void connectCgAudio(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<com.oplus.bt.IBluetoothLeCallControl: void callAdded(int,android.bluetooth.BluetoothLeCall,android.content.AttributionSource)>
<com.oplus.bt.IBluetoothLeCallControl: void isInbandRingingEnabled(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<com.oplus.bt.IBluetoothLeCallControl: void startIsoUsingVirtualVoiceCall(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothPanCallback: void onAvailable(java.lang.String)>
<android.bluetooth.IBluetoothPanCallback: void onUnavailable()>
<android.location.IGnssNmeaListener: void onNmeaReceived(long,java.lang.String)>
<android.hardware.camera2.extension.IPreviewExtenderImpl: void onDeInit()>
<android.hardware.camera2.extension.IPreviewExtenderImpl: void onInit(java.lang.String,android.hardware.camera2.impl.CameraMetadataNative)>
<android.hardware.display.IDisplayManager: int getBacklightType(int)>
<android.hardware.display.IDisplayManager: void setSpecBrightness(int,java.lang.String,int)>
<android.bluetooth.IBluetoothHidDeviceCallback: void onConnectionStateChanged(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.IBluetoothHidDeviceCallback: void onGetReport(android.bluetooth.BluetoothDevice,byte,byte,int)>
<android.bluetooth.IBluetoothHidDeviceCallback: void onSetProtocol(android.bluetooth.BluetoothDevice,byte)>
<android.bluetooth.IBluetoothHidDeviceCallback: void onAppStatusChanged(android.bluetooth.BluetoothDevice,boolean)>
<android.bluetooth.IBluetoothHidDeviceCallback: void onSetReport(android.bluetooth.BluetoothDevice,byte,byte,byte[])>
<android.bluetooth.IBluetoothHidDeviceCallback: void onInterruptData(android.bluetooth.BluetoothDevice,byte,byte[])>
<android.bluetooth.IBluetoothHidDeviceCallback: void onVirtualCableUnplug(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHapClientCallback: void onPresetSelectionForGroupFailed(int,int)>
<android.bluetooth.IBluetoothHapClientCallback: void onSetPresetNameFailed(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.IBluetoothHapClientCallback: void onPresetSelectionFailed(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.IBluetoothHapClientCallback: void onPresetSelected(android.bluetooth.BluetoothDevice,int,int)>
<android.bluetooth.IBluetoothHapClientCallback: void onPresetInfoChanged(android.bluetooth.BluetoothDevice,java.util.List,int)>
<android.bluetooth.IBluetoothHapClientCallback: void onSetPresetNameForGroupFailed(int,int)>
<com.android.internal.telephony.ISmsSecurityAgent: void onAuthorize(com.android.internal.telephony.SmsAuthorizationRequest)>
<android.view.IOplusGestureAnimationController: void finishGestureAnimation(android.os.Bundle)>
<android.view.selectiontoolbar.ISelectionToolbarManager: void hideToolbar(long,int)>
<android.view.selectiontoolbar.ISelectionToolbarManager: void dismissToolbar(long,int)>
<android.view.selectiontoolbar.ISelectionToolbarManager: void showToolbar(android.view.selectiontoolbar.ShowInfo,android.view.selectiontoolbar.ISelectionToolbarCallback,int)>
<vendor.oplus.hardware.power.powermonitor.IPowerMonitor: java.lang.String getAtdEnable()>
<vendor.oplus.hardware.power.powermonitor.IPowerMonitor: int setAtdEnable(int)>
<vendor.oplus.hardware.power.powermonitor.IPowerMonitor: int setAtdLevel(int)>
<vendor.oplus.hardware.power.powermonitor.IPowerMonitor: int enableEdTask()>
<vendor.oplus.hardware.power.powermonitor.IPowerMonitor: int writeHoraeQmi(java.lang.String)>
<vendor.oplus.hardware.power.powermonitor.IPowerMonitor: java.lang.String readEdTaskEnabled()>
<vendor.oplus.hardware.power.powermonitor.IPowerMonitor: java.lang.String readAtdTask()>
<vendor.oplus.hardware.power.powermonitor.IPowerMonitor: java.lang.String getInterfaceHash()>
<vendor.oplus.hardware.power.powermonitor.IPowerMonitor: java.lang.String getAtdLevel()>
<vendor.oplus.hardware.power.powermonitor.IPowerMonitor: int getInterfaceVersion()>
<vendor.oplus.hardware.power.powermonitor.IPowerMonitor: int disableEdTask()>
<android.location.ICountryDetector: void addCountryListener(android.location.ICountryListener)>
<android.location.ICountryDetector: android.location.Country detectCountry()>
<android.location.ICountryDetector: void removeCountryListener(android.location.ICountryListener)>
<android.bluetooth.IBluetoothCsipSetCoordinatorCallback: void onCsisSetMemberAvailable(android.bluetooth.BluetoothDevice,int)>
<com.android.internal.telecom.ITelecomService: void addNewOutgoingCall(android.content.Intent)>
<com.android.internal.telecom.ITelecomService: void oplusCancelMissedCallsNotification(java.lang.String,android.os.Bundle)>
<android.os.IInstalld: boolean compileLayouts(java.lang.String,java.lang.String,java.lang.String,int)>
<android.os.IInstalld: void oplusCustomizeInterface(java.lang.String,android.os.PersistableBundle,android.os.ICustomizePmsCallback)>
<android.os.IInstalld: android.os.PersistableBundle oplusCommonInterface(java.lang.String,android.os.PersistableBundle)>
<android.service.selectiontoolbar.ISelectionToolbarRenderService: void onDismiss(int,long)>
<android.service.selectiontoolbar.ISelectionToolbarRenderService: void onConnected(android.os.IBinder)>
<android.service.selectiontoolbar.ISelectionToolbarRenderService: void onHide(long)>
<android.service.selectiontoolbar.ISelectionToolbarRenderService: void onShow(int,android.view.selectiontoolbar.ShowInfo,android.view.selectiontoolbar.ISelectionToolbarCallback)>
<com.oplus.verifycode.IOplusVerifyCodeListener: void onBindService(com.oplus.verifycode.IOplusVerifyCodeService)>
<com.oplus.verifycode.IOplusVerifyCodeListener: void onUnBindService(int)>
<com.oplus.verifycode.IOplusVerifyCodeListener: void notifyIMELayoutChanged(boolean,int,int)>
<com.oplus.verifycode.IOplusVerifyCodeListener: void notifyImeAttributeChanged(int,boolean)>
<android.bluetooth.IBluetoothMapClient: void getConnectionPolicy(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothMapClient: void sendMessage(android.bluetooth.BluetoothDevice,android.net.Uri[],java.lang.String,android.app.PendingIntent,android.app.PendingIntent,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothMapClient: void getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothMapClient: void connect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothMapClient: void getSupportedFeatures(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothMapClient: void getDevicesMatchingConnectionStates(int[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothMapClient: void getConnectedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothMapClient: void getUnreadMessages(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothMapClient: void disconnect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothMapClient: void isConnected(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothMapClient: void setConnectionPolicy(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothMapClient: void setMessageStatus(android.bluetooth.BluetoothDevice,java.lang.String,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.location.ILocationManager: android.location.provider.ProviderProperties getProviderProperties(java.lang.String)>
<android.location.ILocationManager: boolean isProviderEnabledForUser(java.lang.String,int)>
<android.location.ILocationManager: android.location.Location getLastLocation(java.lang.String,android.location.LastLocationRequest,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void requestListenerFlush(java.lang.String,android.location.ILocationListener,int)>
<android.location.ILocationManager: void removeGeofence(android.app.PendingIntent)>
<android.location.ILocationManager: void setAdasGnssLocationEnabledForUser(boolean,int)>
<android.location.ILocationManager: int getGnssYearOfHardware()>
<android.location.ILocationManager: boolean isProviderPackage(java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: android.location.LocationTime getGnssTimeMillis()>
<android.location.ILocationManager: void stopGnssBatch()>
<android.location.ILocationManager: void addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void removeGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener)>
<android.location.ILocationManager: void setTestProviderEnabled(java.lang.String,boolean,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void unregisterLocationListener(android.location.ILocationListener)>
<android.location.ILocationManager: java.util.List getAllProviders()>
<android.location.ILocationManager: java.lang.String[] getBackgroundThrottlingWhitelist()>
<android.location.ILocationManager: android.location.GnssCapabilities getGnssCapabilities()>
<android.location.ILocationManager: void unregisterGnssStatusCallback(android.location.IGnssStatusListener)>
<android.location.ILocationManager: android.os.ICancellationSignal getCurrentLocation(java.lang.String,android.location.LocationRequest,android.location.ILocationCallback,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void getFromLocation(double,double,int,android.location.GeocoderParams,android.location.IGeocodeListener)>
<android.location.ILocationManager: void startGnssBatch(long,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void removeGnssMeasurementsListener(android.location.IGnssMeasurementsListener)>
<android.location.ILocationManager: void setAutomotiveGnssSuspended(boolean)>
<android.location.ILocationManager: boolean isAdasGnssLocationEnabledForUser(int)>
<android.location.ILocationManager: void registerGnssNmeaCallback(android.location.IGnssNmeaListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: int getGnssBatchSize()>
<android.location.ILocationManager: void addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void requestPendingIntentFlush(java.lang.String,android.app.PendingIntent,int)>
<android.location.ILocationManager: boolean isAutomotiveGnssSuspended()>
<android.location.ILocationManager: void injectGnssMeasurementCorrections(android.location.GnssMeasurementCorrections)>
<android.location.ILocationManager: void getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,android.location.IGeocodeListener)>
<android.location.ILocationManager: void unregisterLocationPendingIntent(android.app.PendingIntent)>
<android.location.ILocationManager: android.os.PackageTagsList getAdasAllowlist()>
<android.location.ILocationManager: void registerLocationPendingIntent(java.lang.String,android.location.LocationRequest,android.app.PendingIntent,java.lang.String,java.lang.String)>
<android.location.ILocationManager: boolean hasProvider(java.lang.String)>
<android.location.ILocationManager: boolean isLocationEnabledForUser(int)>
<android.location.ILocationManager: void injectLocation(android.location.Location)>
<android.location.ILocationManager: void requestGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void setExtraLocationControllerPackage(java.lang.String)>
<android.location.ILocationManager: void addProviderRequestListener(android.location.provider.IProviderRequestListener)>
<android.location.ILocationManager: java.lang.String getGnssHardwareModelName()>
<android.location.ILocationManager: java.util.List getGnssAntennaInfos()>
<android.location.ILocationManager: void addTestProvider(java.lang.String,android.location.provider.ProviderProperties,java.util.List,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void removeTestProvider(java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void unregisterGnssNmeaCallback(android.location.IGnssNmeaListener)>
<android.location.ILocationManager: void registerLocationListener(java.lang.String,android.location.LocationRequest,android.location.ILocationListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void addGnssMeasurementsListener(android.location.GnssMeasurementRequest,android.location.IGnssMeasurementsListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void setExtraLocationControllerPackageEnabled(boolean)>
<android.location.ILocationManager: void flushGnssBatch()>
<android.location.ILocationManager: java.util.List getProviderPackages(java.lang.String)>
<android.location.ILocationManager: void removeProviderRequestListener(android.location.provider.IProviderRequestListener)>
<android.location.ILocationManager: java.lang.String getExtraLocationControllerPackage()>
<android.location.ILocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
<android.location.ILocationManager: void sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.location.ILocationManager: void setTestProviderLocation(java.lang.String,android.location.Location,java.lang.String,java.lang.String)>
<android.location.ILocationManager: boolean isExtraLocationControllerPackageEnabled()>
<android.location.ILocationManager: void registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String,java.lang.String,java.lang.String)>
<android.location.ILocationManager: void removeGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener)>
<android.location.ILocationManager: boolean geocoderIsPresent()>
<android.location.ILocationManager: void setLocationEnabledForUser(boolean,int)>
<android.location.ILocationManager: android.os.PackageTagsList getIgnoreSettingsAllowlist()>
<android.bluetooth.IBluetoothHidDevice: void connect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidDevice: void registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings,android.bluetooth.BluetoothHidDeviceAppQosSettings,android.bluetooth.BluetoothHidDeviceAppQosSettings,android.bluetooth.IBluetoothHidDeviceCallback,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidDevice: void setConnectionPolicy(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidDevice: void sendReport(android.bluetooth.BluetoothDevice,int,byte[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidDevice: void getUserAppName(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidDevice: void replyReport(android.bluetooth.BluetoothDevice,byte,byte,byte[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidDevice: void getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidDevice: void disconnect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidDevice: void unregisterApp(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidDevice: void getConnectedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidDevice: void getDevicesMatchingConnectionStates(int[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidDevice: void unplug(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHidDevice: void reportError(android.bluetooth.BluetoothDevice,byte,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void getAudioState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void setActiveDevice(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void getDevicesMatchingConnectionStates(int[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void startVoiceRecognition(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void isVoiceRecognitionSupported(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void disconnectAudio(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void stopScoUsingVirtualVoiceCall(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void getConnectionPolicy(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void phoneStateChanged(int,int,int,java.lang.String,int,java.lang.String,android.content.AttributionSource)>
<android.bluetooth.IBluetoothHeadset: void getAudioRouteAllowed(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void disconnect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void startScoUsingVirtualVoiceCall(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void getConnectedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void getActiveDevice(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void isAudioConnected(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void isInbandRingingEnabled(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void isNoiseReductionSupported(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void connect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void isAudioOn(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void setForceScoAudio(boolean,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void setConnectionPolicy(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void connectAudio(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void clccResponse(int,int,int,int,boolean,java.lang.String,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void setAudioRouteAllowed(boolean,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadset: void stopVoiceRecognition(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.location.IGeofenceProvider: void setGeofenceHardware(android.hardware.location.IGeofenceHardware)>
<android.location.IGeocodeProvider: void getFromLocationName(java.lang.String,double,double,double,double,int,android.location.GeocoderParams,android.location.IGeocodeListener)>
<android.location.IGeocodeProvider: void getFromLocation(double,double,int,android.location.GeocoderParams,android.location.IGeocodeListener)>
<android.bluetooth.IBluetoothSap: void disconnect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothSap: void getState(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothSap: void getDevicesMatchingConnectionStates(int[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothSap: void getClient(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothSap: void getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothSap: void getConnectedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothSap: void getConnectionPolicy(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothSap: void isConnected(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothSap: void setConnectionPolicy(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.os.INetworkManagementService: void addRoute(int,android.net.RouteInfo)>
<android.os.INetworkManagementService: void setGlobalAlert(long)>
<android.os.INetworkManagementService: void stopInterfaceForwarding(java.lang.String,java.lang.String)>
<android.os.INetworkManagementService: void removeInterfaceFromLocalNetwork(java.lang.String)>
<android.os.INetworkManagementService: int removeRoutesFromLocalNetwork(java.util.List)>
<android.os.INetworkManagementService: void tetherLimitReached(android.net.ITetheringStatsProvider)>
<android.os.INetworkManagementService: android.net.NetworkStats getNetworkStatsTethering(int)>
<android.os.INetworkManagementService: void startInterfaceForwarding(java.lang.String,java.lang.String)>
<android.os.INetworkManagementService: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>
<android.os.INetworkManagementService: void removeRoute(int,android.net.RouteInfo)>
<android.os.INetworkManagementService: void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider)>
<android.os.INetworkManagementService: void startTetheringWithConfiguration(boolean,java.lang.String[])>
<android.os.INetworkManagementService: void setFirewallInterfaceRule(java.lang.String,boolean)>
<android.os.INetworkManagementService: java.lang.String[] getDnsForwarders()>
<android.os.INetworkManagementService: void addInterfaceToLocalNetwork(java.lang.String,java.util.List)>
<android.bluetooth.IBluetoothPreferredAudioProfilesCallback: void onPreferredAudioProfilesChanged(android.bluetooth.BluetoothDevice,android.os.Bundle,int)>
<com.android.internal.inputmethod.IInputMethodClient: void updateVirtualDisplayToScreenMatrix(int,float[])>
<android.bluetooth.IBluetoothHearingAid: void getConnectionPolicy(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHearingAid: void getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHearingAid: void getHiSyncId(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHearingAid: void getDeviceSide(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHearingAid: void getActiveDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHearingAid: void setConnectionPolicy(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHearingAid: void getDevicesMatchingConnectionStates(int[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHearingAid: void getConnectedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHearingAid: void connect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHearingAid: void getAdvertisementServiceData(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHearingAid: void disconnect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHearingAid: void getDeviceMode(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHearingAid: void setActiveDevice(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHearingAid: void setVolume(int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<com.android.internal.statusbar.IStatusBarService: void hideCurrentInputMethodForBubbles()>
<android.hardware.display.IOplusDisplayManager: android.os.IBinder getPhysicalDisplayToken(long)>
<android.hardware.display.IOplusDisplayManager: android.os.Bundle getScreenProductionTime()>
<android.hardware.display.IOplusDisplayManager: android.os.Bundle getScreenMultiBitsSupport()>
<android.hardware.display.IOplusDisplayManager: boolean isSupportSinglePulseDimmingInEyeProtect()>
<android.hardware.display.IOplusDisplayManager: boolean isSupportSinglePulseDimming()>
<android.hardware.display.IOplusDisplayManager: void setSpecBrightness(int,java.lang.String,int)>
<android.hardware.display.IOplusDisplayManager: boolean isSupportUpgradeUIDevices()>
<android.hardware.display.IOplusDisplayManager: void setFakeLux(int,boolean,int,int)>
<android.security.maintenance.IKeystoreMaintenance: int getState(int)>
<android.bluetooth.IBluetoothHeadsetClient: void getAudioState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void sendDTMF(android.bluetooth.BluetoothDevice,byte,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void explicitCallTransfer(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void startVoiceRecognition(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void connectAudio(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void setAudioRouteAllowed(android.bluetooth.BluetoothDevice,boolean,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void disconnectAudio(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void connect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void getConnectionPolicy(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void stopVoiceRecognition(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void getCurrentAgEvents(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void holdCall(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void enterPrivateMode(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void getConnectedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void getCurrentAgFeatures(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void getCurrentCalls(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void acceptCall(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void dial(android.bluetooth.BluetoothDevice,java.lang.String,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void getLastVoiceTagNumber(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void sendVendorAtCommand(android.bluetooth.BluetoothDevice,int,java.lang.String,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void getDevicesMatchingConnectionStates(int[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void disconnect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void setConnectionPolicy(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void getAudioRouteAllowed(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void terminateCall(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHeadsetClientCall,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothHeadsetClient: void rejectCall(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.os.IVibratorManagerService: int getEffectType(int)>
<android.os.IVibratorManagerService: int getRingtoneEffectId(java.lang.String)>
<android.os.IVibratorManagerService: void updateVibrationAmplitude(int,java.lang.String,float)>
<android.os.IVibratorManagerService: boolean blockVibrationForApplication(java.lang.String,boolean,android.os.IBinder)>
<android.os.IVibratorManagerService: int getEffectDuration(int)>
<android.os.IVibratorManagerService: int getWaveformIndex(int)>
<android.window.ITaskOrganizerController: void setOrientationRequestPolicy(boolean,int[],int[])>
<android.bluetooth.IBluetoothPan: void getConnectedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothPan: void setBluetoothTethering(android.bluetooth.IBluetoothPanCallback,int,boolean,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothPan: void getDevicesMatchingConnectionStates(int[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothPan: void connect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothPan: void setConnectionPolicy(android.bluetooth.BluetoothDevice,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothPan: void disconnect(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothPan: void isTetheringOn(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothPan: void getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<com.android.internal.telephony.ITelephony: int invokeOemRilRequestRaw(byte[],byte[])>
<com.android.internal.telephony.ITelephony: void onDeviceAlignedWithSatellite(int,boolean)>
<android.bluetooth.IBluetoothAvrcpController: void getConnectionState(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothAvrcpController: void getDevicesMatchingConnectionStates(int[],android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothAvrcpController: void setPlayerApplicationSetting(android.bluetooth.BluetoothAvrcpPlayerSettings,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothAvrcpController: void getConnectedDevices(android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothAvrcpController: void sendGroupNavigationCmd(android.bluetooth.BluetoothDevice,int,int,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.bluetooth.IBluetoothAvrcpController: void getPlayerSettings(android.bluetooth.BluetoothDevice,android.content.AttributionSource,com.android.modules.utils.SynchronousResultReceiver)>
<android.hardware.camera2.extension.ICameraExtensionsProxyService: void unregisterClient(long)>
<android.hardware.camera2.extension.ICameraExtensionsProxyService: long registerClient()>
<android.permission.IPermissionController: void revokeSelfPermissionsOnKill(java.lang.String,java.util.List,com.android.internal.infra.AndroidFuture)>
<android.permission.IPermissionController: void notifyOneTimePermissionSessionTimeout(java.lang.String)>
<android.view.IOplusGestureAnimationRunner: void onAnimationStart(android.view.IOplusGestureAnimationController,android.view.RemoteAnimationTarget[],android.view.SurfaceControl[])>
<android.view.IOplusGestureAnimationRunner: void onAnimationCanceled()>
<com.android.internal.view.IInputMethodManager: boolean acceptStylusHandwritingDelegation(com.android.internal.inputmethod.IInputMethodClient,int,java.lang.String,java.lang.String)>
<com.android.internal.view.IInputMethodManager: void reportVirtualDisplayGeometryAsync(com.android.internal.inputmethod.IInputMethodClient,int,float[])>
<com.android.internal.telephony.ISub: int getActiveSubInfoCount(java.lang.String,java.lang.String)>
<com.android.internal.telephony.ISub: java.util.List getActiveSubscriptionInfoList(java.lang.String,java.lang.String)>